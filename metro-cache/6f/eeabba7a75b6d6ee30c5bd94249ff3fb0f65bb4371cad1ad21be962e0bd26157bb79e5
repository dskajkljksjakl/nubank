{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"../validators/is","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validate = validate;\n  exports.typeIs = typeIs;\n  exports.validateType = validateType;\n  exports.validateOptional = validateOptional;\n  exports.validateOptionalType = validateOptionalType;\n  exports.arrayOf = arrayOf;\n  exports.arrayOfType = arrayOfType;\n  exports.validateArrayOfType = validateArrayOfType;\n  exports.assertEach = assertEach;\n  exports.assertOneOf = assertOneOf;\n  exports.assertNodeType = assertNodeType;\n  exports.assertNodeOrValueType = assertNodeOrValueType;\n  exports.assertValueType = assertValueType;\n  exports.chain = chain;\n  exports.default = defineType;\n  exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = void 0;\n\n  var _is = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../validators/is\"));\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var VISITOR_KEYS = {};\n  exports.VISITOR_KEYS = VISITOR_KEYS;\n  var ALIAS_KEYS = {};\n  exports.ALIAS_KEYS = ALIAS_KEYS;\n  var FLIPPED_ALIAS_KEYS = {};\n  exports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;\n  var NODE_FIELDS = {};\n  exports.NODE_FIELDS = NODE_FIELDS;\n  var BUILDER_KEYS = {};\n  exports.BUILDER_KEYS = BUILDER_KEYS;\n  var DEPRECATED_KEYS = {};\n  exports.DEPRECATED_KEYS = DEPRECATED_KEYS;\n\n  function getType(val) {\n    if (Array.isArray(val)) {\n      return \"array\";\n    } else if (val === null) {\n      return \"null\";\n    } else if (val === undefined) {\n      return \"undefined\";\n    } else {\n      return typeof val;\n    }\n  }\n\n  function validate(validate) {\n    return {\n      validate: validate\n    };\n  }\n\n  function typeIs(typeName) {\n    return typeof typeName === \"string\" ? assertNodeType(typeName) : assertNodeType.apply(void 0, _toConsumableArray(typeName));\n  }\n\n  function validateType(typeName) {\n    return validate(typeIs(typeName));\n  }\n\n  function validateOptional(validate) {\n    return {\n      validate: validate,\n      optional: true\n    };\n  }\n\n  function validateOptionalType(typeName) {\n    return {\n      validate: typeIs(typeName),\n      optional: true\n    };\n  }\n\n  function arrayOf(elementType) {\n    return chain(assertValueType(\"array\"), assertEach(elementType));\n  }\n\n  function arrayOfType(typeName) {\n    return arrayOf(typeIs(typeName));\n  }\n\n  function validateArrayOfType(typeName) {\n    return validate(arrayOfType(typeName));\n  }\n\n  function assertEach(callback) {\n    function validator(node, key, val) {\n      if (!Array.isArray(val)) return;\n\n      for (var i = 0; i < val.length; i++) {\n        callback(node, key + \"[\" + i + \"]\", val[i]);\n      }\n    }\n\n    validator.each = callback;\n    return validator;\n  }\n\n  function assertOneOf() {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n\n    function validate(node, key, val) {\n      if (values.indexOf(val) < 0) {\n        throw new TypeError(\"Property \" + key + \" expected value to be one of \" + JSON.stringify(values) + \" but got \" + JSON.stringify(val));\n      }\n    }\n\n    validate.oneOf = values;\n    return validate;\n  }\n\n  function assertNodeType() {\n    for (var _len2 = arguments.length, types = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      types[_key2] = arguments[_key2];\n    }\n\n    function validate(node, key, val) {\n      var valid = false;\n\n      for (var _i = 0, _types = types; _i < _types.length; _i++) {\n        var type = _types[_i];\n\n        if ((0, _is.default)(type, val)) {\n          valid = true;\n          break;\n        }\n      }\n\n      if (!valid) {\n        throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected node to be of a type \" + JSON.stringify(types) + \" \" + (\"but instead got \" + JSON.stringify(val && val.type)));\n      }\n    }\n\n    validate.oneOfNodeTypes = types;\n    return validate;\n  }\n\n  function assertNodeOrValueType() {\n    for (var _len3 = arguments.length, types = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      types[_key3] = arguments[_key3];\n    }\n\n    function validate(node, key, val) {\n      var valid = false;\n\n      for (var _i2 = 0, _types2 = types; _i2 < _types2.length; _i2++) {\n        var type = _types2[_i2];\n\n        if (getType(val) === type || (0, _is.default)(type, val)) {\n          valid = true;\n          break;\n        }\n      }\n\n      if (!valid) {\n        throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected node to be of a type \" + JSON.stringify(types) + \" \" + (\"but instead got \" + JSON.stringify(val && val.type)));\n      }\n    }\n\n    validate.oneOfNodeOrValueTypes = types;\n    return validate;\n  }\n\n  function assertValueType(type) {\n    function validate(node, key, val) {\n      var valid = getType(val) === type;\n\n      if (!valid) {\n        throw new TypeError(\"Property \" + key + \" expected type of \" + type + \" but got \" + getType(val));\n      }\n    }\n\n    validate.type = type;\n    return validate;\n  }\n\n  function chain() {\n    for (var _len4 = arguments.length, fns = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      fns[_key4] = arguments[_key4];\n    }\n\n    function validate() {\n      for (var _i3 = 0, _fns = fns; _i3 < _fns.length; _i3++) {\n        var fn = _fns[_i3];\n        fn.apply(void 0, arguments);\n      }\n    }\n\n    validate.chainOf = fns;\n    return validate;\n  }\n\n  function defineType(type) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var inherits = opts.inherits && store[opts.inherits] || {};\n    var fields = opts.fields || inherits.fields || {};\n    var visitor = opts.visitor || inherits.visitor || [];\n    var aliases = opts.aliases || inherits.aliases || [];\n    var builder = opts.builder || inherits.builder || opts.visitor || [];\n\n    if (opts.deprecatedAlias) {\n      DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n    }\n\n    for (var _iterator = visitor.concat(builder), _isArray = Array.isArray(_iterator), _i4 = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i4 >= _iterator.length) break;\n        _ref = _iterator[_i4++];\n      } else {\n        _i4 = _iterator.next();\n        if (_i4.done) break;\n        _ref = _i4.value;\n      }\n\n      var _key6 = _ref;\n      fields[_key6] = fields[_key6] || {};\n    }\n\n    for (var _i5 = 0, _Object$keys = Object.keys(fields); _i5 < _Object$keys.length; _i5++) {\n      var _key5 = _Object$keys[_i5];\n      var field = fields[_key5];\n\n      if (builder.indexOf(_key5) === -1) {\n        field.optional = true;\n      }\n\n      if (field.default === undefined) {\n        field.default = null;\n      } else if (!field.validate) {\n        field.validate = assertValueType(getType(field.default));\n      }\n    }\n\n    VISITOR_KEYS[type] = opts.visitor = visitor;\n    BUILDER_KEYS[type] = opts.builder = builder;\n    NODE_FIELDS[type] = opts.fields = fields;\n    ALIAS_KEYS[type] = opts.aliases = aliases;\n    aliases.forEach(function (alias) {\n      FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n      FLIPPED_ALIAS_KEYS[alias].push(type);\n    });\n    store[type] = opts;\n  }\n\n  var store = {};\n});","map":[[2,0,1,0],[6,0,3,0,"Object"],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,0],[6,24,3,22,"exports"],[6,31,3,0],[6,33,3,31],[6,45,3,0],[6,47,3,45],[7,0,4,2,"value"],[7,4,4,2,"value"],[7,9,4,7],[7,11,4,9],[8,0,3,45],[8,3,3,0],[9,0,6,0,"exports"],[9,2,6,0,"exports"],[9,9,6,7],[9,10,6,8,"validate"],[9,18,6,0],[9,21,6,19,"validate"],[9,29,6,0],[10,0,7,0,"exports"],[10,2,7,0,"exports"],[10,9,7,7],[10,10,7,8,"typeIs"],[10,16,7,0],[10,19,7,17,"typeIs"],[10,25,7,0],[11,0,8,0,"exports"],[11,2,8,0,"exports"],[11,9,8,7],[11,10,8,8,"validateType"],[11,22,8,0],[11,25,8,23,"validateType"],[11,37,8,0],[12,0,9,0,"exports"],[12,2,9,0,"exports"],[12,9,9,7],[12,10,9,8,"validateOptional"],[12,26,9,0],[12,29,9,27,"validateOptional"],[12,45,9,0],[13,0,10,0,"exports"],[13,2,10,0,"exports"],[13,9,10,7],[13,10,10,8,"validateOptionalType"],[13,30,10,0],[13,33,10,31,"validateOptionalType"],[13,53,10,0],[14,0,11,0,"exports"],[14,2,11,0,"exports"],[14,9,11,7],[14,10,11,8,"arrayOf"],[14,17,11,0],[14,20,11,18,"arrayOf"],[14,27,11,0],[15,0,12,0,"exports"],[15,2,12,0,"exports"],[15,9,12,7],[15,10,12,8,"arrayOfType"],[15,21,12,0],[15,24,12,22,"arrayOfType"],[15,35,12,0],[16,0,13,0,"exports"],[16,2,13,0,"exports"],[16,9,13,7],[16,10,13,8,"validateArrayOfType"],[16,29,13,0],[16,32,13,30,"validateArrayOfType"],[16,51,13,0],[17,0,14,0,"exports"],[17,2,14,0,"exports"],[17,9,14,7],[17,10,14,8,"assertEach"],[17,20,14,0],[17,23,14,21,"assertEach"],[17,33,14,0],[18,0,15,0,"exports"],[18,2,15,0,"exports"],[18,9,15,7],[18,10,15,8,"assertOneOf"],[18,21,15,0],[18,24,15,22,"assertOneOf"],[18,35,15,0],[19,0,16,0,"exports"],[19,2,16,0,"exports"],[19,9,16,7],[19,10,16,8,"assertNodeType"],[19,24,16,0],[19,27,16,25,"assertNodeType"],[19,41,16,0],[20,0,17,0,"exports"],[20,2,17,0,"exports"],[20,9,17,7],[20,10,17,8,"assertNodeOrValueType"],[20,31,17,0],[20,34,17,32,"assertNodeOrValueType"],[20,55,17,0],[21,0,18,0,"exports"],[21,2,18,0,"exports"],[21,9,18,7],[21,10,18,8,"assertValueType"],[21,25,18,0],[21,28,18,26,"assertValueType"],[21,43,18,0],[22,0,19,0,"exports"],[22,2,19,0,"exports"],[22,9,19,7],[22,10,19,8,"chain"],[22,15,19,0],[22,18,19,16,"chain"],[22,23,19,0],[23,0,20,0,"exports"],[23,2,20,0,"exports"],[23,9,20,7],[23,10,20,8,"default"],[23,17,20,0],[23,20,20,18,"defineType"],[23,30,20,0],[24,0,21,0,"exports"],[24,2,21,0,"exports"],[24,9,21,7],[24,10,21,8,"DEPRECATED_KEYS"],[24,25,21,0],[24,28,21,26,"exports"],[24,35,21,33],[24,36,21,34,"BUILDER_KEYS"],[24,48,21,26],[24,51,21,49,"exports"],[24,58,21,56],[24,59,21,57,"NODE_FIELDS"],[24,70,21,49],[24,73,21,71,"exports"],[24,80,21,78],[24,81,21,79,"FLIPPED_ALIAS_KEYS"],[24,99,21,71],[24,102,21,100,"exports"],[24,109,21,107],[24,110,21,108,"ALIAS_KEYS"],[24,120,21,100],[24,123,21,121,"exports"],[24,130,21,128],[24,131,21,129,"VISITOR_KEYS"],[24,143,21,121],[24,146,21,144],[24,151,21,149],[24,152,21,0],[26,0,23,0],[26,6,23,4,"_is"],[26,9,23,7],[26,12,23,10,"_interopRequireDefault"],[26,34,23,32],[26,35,23,33,"require"],[26,46,23,40],[26,85,23,32],[26,86,23,0],[28,0,25,0],[28,11,25,9,"_interopRequireDefault"],[28,33,25,0],[28,34,25,32,"obj"],[28,37,25,0],[28,39,25,37],[29,0,25,39],[29,11,25,46,"obj"],[29,14,25,49],[29,18,25,53,"obj"],[29,21,25,56],[29,22,25,57,"__esModule"],[29,32,25,46],[29,35,25,70,"obj"],[29,38,25,46],[29,41,25,76],[30,0,25,78,"default"],[30,6,25,78,"default"],[30,13,25,85],[30,15,25,87,"obj"],[31,0,25,76],[31,5,25,39],[32,0,25,95],[34,0,27,0],[34,6,27,6,"VISITOR_KEYS"],[34,18,27,18],[34,21,27,21],[34,23,27,0],[35,0,28,0,"exports"],[35,2,28,0,"exports"],[35,9,28,7],[35,10,28,8,"VISITOR_KEYS"],[35,22,28,0],[35,25,28,23,"VISITOR_KEYS"],[35,37,28,0],[36,0,29,0],[36,6,29,6,"ALIAS_KEYS"],[36,16,29,16],[36,19,29,19],[36,21,29,0],[37,0,30,0,"exports"],[37,2,30,0,"exports"],[37,9,30,7],[37,10,30,8,"ALIAS_KEYS"],[37,20,30,0],[37,23,30,21,"ALIAS_KEYS"],[37,33,30,0],[38,0,31,0],[38,6,31,6,"FLIPPED_ALIAS_KEYS"],[38,24,31,24],[38,27,31,27],[38,29,31,0],[39,0,32,0,"exports"],[39,2,32,0,"exports"],[39,9,32,7],[39,10,32,8,"FLIPPED_ALIAS_KEYS"],[39,28,32,0],[39,31,32,29,"FLIPPED_ALIAS_KEYS"],[39,49,32,0],[40,0,33,0],[40,6,33,6,"NODE_FIELDS"],[40,17,33,17],[40,20,33,20],[40,22,33,0],[41,0,34,0,"exports"],[41,2,34,0,"exports"],[41,9,34,7],[41,10,34,8,"NODE_FIELDS"],[41,21,34,0],[41,24,34,22,"NODE_FIELDS"],[41,35,34,0],[42,0,35,0],[42,6,35,6,"BUILDER_KEYS"],[42,18,35,18],[42,21,35,21],[42,23,35,0],[43,0,36,0,"exports"],[43,2,36,0,"exports"],[43,9,36,7],[43,10,36,8,"BUILDER_KEYS"],[43,22,36,0],[43,25,36,23,"BUILDER_KEYS"],[43,37,36,0],[44,0,37,0],[44,6,37,6,"DEPRECATED_KEYS"],[44,21,37,21],[44,24,37,24],[44,26,37,0],[45,0,38,0,"exports"],[45,2,38,0,"exports"],[45,9,38,7],[45,10,38,8,"DEPRECATED_KEYS"],[45,25,38,0],[45,28,38,26,"DEPRECATED_KEYS"],[45,43,38,0],[47,0,40,0],[47,11,40,9,"getType"],[47,18,40,0],[47,19,40,17,"val"],[47,22,40,0],[47,24,40,22],[48,0,41,2],[48,8,41,6,"Array"],[48,13,41,11],[48,14,41,12,"isArray"],[48,21,41,6],[48,22,41,20,"val"],[48,25,41,6],[48,26,41,2],[48,28,41,26],[49,0,42,4],[49,13,42,11],[49,20,42,4],[50,0,43,3],[50,5,41,2],[50,11,43,9],[50,15,43,13,"val"],[50,18,43,16],[50,23,43,21],[50,27,43,9],[50,29,43,27],[51,0,44,4],[51,13,44,11],[51,19,44,4],[52,0,45,3],[52,5,43,9],[52,11,45,9],[52,15,45,13,"val"],[52,18,45,16],[52,23,45,21,"undefined"],[52,32,45,9],[52,34,45,32],[53,0,46,4],[53,13,46,11],[53,24,46,4],[54,0,47,3],[54,5,45,9],[54,11,47,9],[55,0,48,4],[55,13,48,11],[55,20,48,18,"val"],[55,23,48,4],[56,0,49,3],[57,0,50,1],[59,0,52,0],[59,11,52,9,"validate"],[59,19,52,0],[59,20,52,18,"validate"],[59,28,52,0],[59,30,52,28],[60,0,53,2],[60,11,53,9],[61,0,54,4,"validate"],[61,6,54,4,"validate"],[61,14,54,12],[61,16,54,4,"validate"],[62,0,53,9],[62,5,53,2],[63,0,56,1],[65,0,58,0],[65,11,58,9,"typeIs"],[65,17,58,0],[65,18,58,16,"typeName"],[65,26,58,0],[65,28,58,26],[66,0,59,2],[66,11,59,9],[66,18,59,16,"typeName"],[66,26,59,9],[66,31,59,29],[66,39,59,9],[66,42,59,40,"assertNodeType"],[66,56,59,54],[66,57,59,55,"typeName"],[66,65,59,54],[66,66,59,9],[66,69,59,67,"assertNodeType"],[66,83,59,81],[66,89,59,67],[66,117,59,85,"typeName"],[66,125,59,67],[66,127,59,2],[67,0,60,1],[69,0,62,0],[69,11,62,9,"validateType"],[69,23,62,0],[69,24,62,22,"typeName"],[69,32,62,0],[69,34,62,32],[70,0,63,2],[70,11,63,9,"validate"],[70,19,63,17],[70,20,63,18,"typeIs"],[70,26,63,24],[70,27,63,25,"typeName"],[70,35,63,24],[70,36,63,17],[70,37,63,2],[71,0,64,1],[73,0,66,0],[73,11,66,9,"validateOptional"],[73,27,66,0],[73,28,66,26,"validate"],[73,36,66,0],[73,38,66,36],[74,0,67,2],[74,11,67,9],[75,0,68,4,"validate"],[75,6,68,4,"validate"],[75,14,68,12],[75,16,68,4,"validate"],[75,24,67,9],[76,0,69,4,"optional"],[76,6,69,4,"optional"],[76,14,69,12],[76,16,69,14],[77,0,67,9],[77,5,67,2],[78,0,71,1],[80,0,73,0],[80,11,73,9,"validateOptionalType"],[80,31,73,0],[80,32,73,30,"typeName"],[80,40,73,0],[80,42,73,40],[81,0,74,2],[81,11,74,9],[82,0,75,4,"validate"],[82,6,75,4,"validate"],[82,14,75,12],[82,16,75,14,"typeIs"],[82,22,75,20],[82,23,75,21,"typeName"],[82,31,75,20],[82,32,74,9],[83,0,76,4,"optional"],[83,6,76,4,"optional"],[83,14,76,12],[83,16,76,14],[84,0,74,9],[84,5,74,2],[85,0,78,1],[87,0,80,0],[87,11,80,9,"arrayOf"],[87,18,80,0],[87,19,80,17,"elementType"],[87,30,80,0],[87,32,80,30],[88,0,81,2],[88,11,81,9,"chain"],[88,16,81,14],[88,17,81,15,"assertValueType"],[88,32,81,30],[88,33,81,31],[88,40,81,30],[88,41,81,14],[88,43,81,41,"assertEach"],[88,53,81,51],[88,54,81,52,"elementType"],[88,65,81,51],[88,66,81,14],[88,67,81,2],[89,0,82,1],[91,0,84,0],[91,11,84,9,"arrayOfType"],[91,22,84,0],[91,23,84,21,"typeName"],[91,31,84,0],[91,33,84,31],[92,0,85,2],[92,11,85,9,"arrayOf"],[92,18,85,16],[92,19,85,17,"typeIs"],[92,25,85,23],[92,26,85,24,"typeName"],[92,34,85,23],[92,35,85,16],[92,36,85,2],[93,0,86,1],[95,0,88,0],[95,11,88,9,"validateArrayOfType"],[95,30,88,0],[95,31,88,29,"typeName"],[95,39,88,0],[95,41,88,39],[96,0,89,2],[96,11,89,9,"validate"],[96,19,89,17],[96,20,89,18,"arrayOfType"],[96,31,89,29],[96,32,89,30,"typeName"],[96,40,89,29],[96,41,89,17],[96,42,89,2],[97,0,90,1],[99,0,92,0],[99,11,92,9,"assertEach"],[99,21,92,0],[99,22,92,20,"callback"],[99,30,92,0],[99,32,92,30],[100,0,93,2],[100,13,93,11,"validator"],[100,22,93,2],[100,23,93,21,"node"],[100,27,93,2],[100,29,93,27,"key"],[100,32,93,2],[100,34,93,32,"val"],[100,37,93,2],[100,39,93,37],[101,0,94,4],[101,10,94,8],[101,11,94,9,"Array"],[101,16,94,14],[101,17,94,15,"isArray"],[101,24,94,9],[101,25,94,23,"val"],[101,28,94,9],[101,29,94,4],[101,31,94,29],[103,0,96,4],[103,11,96,9],[103,15,96,13,"i"],[103,16,96,14],[103,19,96,17],[103,20,96,4],[103,22,96,20,"i"],[103,23,96,21],[103,26,96,24,"val"],[103,29,96,27],[103,30,96,28,"length"],[103,36,96,4],[103,38,96,36,"i"],[103,39,96,37],[103,41,96,4],[103,43,96,41],[104,0,97,6,"callback"],[104,8,97,6,"callback"],[104,16,97,14],[104,17,97,15,"node"],[104,21,97,14],[104,23,97,24,"key"],[104,26,97,14],[104,35,97,31,"i"],[104,36,97,14],[104,44,97,37,"val"],[104,47,97,40],[104,48,97,41,"i"],[104,49,97,40],[104,50,97,14],[104,51,97,6],[105,0,98,5],[106,0,99,3],[108,0,101,2,"validator"],[108,4,101,2,"validator"],[108,13,101,11],[108,14,101,12,"each"],[108,18,101,2],[108,21,101,19,"callback"],[108,29,101,2],[109,0,102,2],[109,11,102,9,"validator"],[109,20,102,2],[110,0,103,1],[112,0,105,0],[112,11,105,9,"assertOneOf"],[112,22,105,0],[112,25,105,32],[113,0,105,32],[113,38,105,24,"values"],[113,44,105,32],[114,0,105,24,"values"],[114,6,105,24,"values"],[114,12,105,32],[115,0,105,32],[117,0,106,2],[117,13,106,11,"validate"],[117,21,106,2],[117,22,106,20,"node"],[117,26,106,2],[117,28,106,26,"key"],[117,31,106,2],[117,33,106,31,"val"],[117,36,106,2],[117,38,106,36],[118,0,107,4],[118,10,107,8,"values"],[118,16,107,14],[118,17,107,15,"indexOf"],[118,24,107,8],[118,25,107,23,"val"],[118,28,107,8],[118,32,107,30],[118,33,107,4],[118,35,107,33],[119,0,108,6],[119,14,108,12],[119,18,108,16,"TypeError"],[119,27,108,12],[119,42,108,38,"key"],[119,45,108,12],[119,82,108,73,"JSON"],[119,86,108,77],[119,87,108,78,"stringify"],[119,96,108,73],[119,97,108,88,"values"],[119,103,108,73],[119,104,108,12],[119,121,108,107,"JSON"],[119,125,108,111],[119,126,108,112,"stringify"],[119,135,108,107],[119,136,108,122,"val"],[119,139,108,107],[119,140,108,12],[119,141,108,6],[120,0,109,5],[121,0,110,3],[123,0,112,2,"validate"],[123,4,112,2,"validate"],[123,12,112,10],[123,13,112,11,"oneOf"],[123,18,112,2],[123,21,112,19,"values"],[123,27,112,2],[124,0,113,2],[124,11,113,9,"validate"],[124,19,113,2],[125,0,114,1],[127,0,116,0],[127,11,116,9,"assertNodeType"],[127,25,116,0],[127,28,116,34],[128,0,116,34],[128,39,116,27,"types"],[128,44,116,34],[129,0,116,27,"types"],[129,6,116,27,"types"],[129,11,116,34],[130,0,116,34],[132,0,117,2],[132,13,117,11,"validate"],[132,21,117,2],[132,22,117,20,"node"],[132,26,117,2],[132,28,117,26,"key"],[132,31,117,2],[132,33,117,31,"val"],[132,36,117,2],[132,38,117,36],[133,0,118,4],[133,10,118,8,"valid"],[133,15,118,13],[133,18,118,16],[133,23,118,4],[135,0,120,4],[135,32,120,23,"types"],[135,37,120,4],[135,65,120,30],[136,0,120,9],[136,12,120,15,"type"],[136,16,120,19],[136,29,120,9],[138,0,121,6],[138,12,121,10],[138,13,121,11],[138,16,121,14,"_is"],[138,19,121,17],[138,20,121,18,"default"],[138,27,121,10],[138,29,121,27,"type"],[138,33,121,10],[138,35,121,33,"val"],[138,38,121,10],[138,39,121,6],[138,41,121,39],[139,0,122,8,"valid"],[139,10,122,8,"valid"],[139,15,122,13],[139,18,122,16],[139,22,122,8],[140,0,123,8],[141,0,124,7],[142,0,125,5],[144,0,127,4],[144,10,127,8],[144,11,127,9,"valid"],[144,16,127,4],[144,18,127,16],[145,0,128,6],[145,14,128,12],[145,18,128,16,"TypeError"],[145,27,128,12],[145,28,128,26],[145,42,128,38,"key"],[145,45,128,26],[145,57,128,48,"node"],[145,61,128,52],[145,62,128,53,"type"],[145,66,128,26],[145,105,128,91,"JSON"],[145,109,128,95],[145,110,128,96,"stringify"],[145,119,128,91],[145,120,128,106,"types"],[145,125,128,91],[145,126,128,26],[145,157,128,137,"JSON"],[145,161,128,141],[145,162,128,142,"stringify"],[145,171,128,137],[145,172,128,152,"val"],[145,175,128,155],[145,179,128,159,"val"],[145,182,128,162],[145,183,128,163,"type"],[145,187,128,137],[145,188,128,26],[145,189,128,12],[145,190,128,6],[146,0,129,5],[147,0,130,3],[149,0,132,2,"validate"],[149,4,132,2,"validate"],[149,12,132,10],[149,13,132,11,"oneOfNodeTypes"],[149,27,132,2],[149,30,132,28,"types"],[149,35,132,2],[150,0,133,2],[150,11,133,9,"validate"],[150,19,133,2],[151,0,134,1],[153,0,136,0],[153,11,136,9,"assertNodeOrValueType"],[153,32,136,0],[153,35,136,41],[154,0,136,41],[154,39,136,34,"types"],[154,44,136,41],[155,0,136,34,"types"],[155,6,136,34,"types"],[155,11,136,41],[156,0,136,41],[158,0,137,2],[158,13,137,11,"validate"],[158,21,137,2],[158,22,137,20,"node"],[158,26,137,2],[158,28,137,26,"key"],[158,31,137,2],[158,33,137,31,"val"],[158,36,137,2],[158,38,137,36],[159,0,138,4],[159,10,138,8,"valid"],[159,15,138,13],[159,18,138,16],[159,23,138,4],[161,0,140,4],[161,34,140,23,"types"],[161,39,140,4],[161,70,140,30],[162,0,140,9],[162,12,140,15,"type"],[162,16,140,19],[162,31,140,9],[164,0,141,6],[164,12,141,10,"getType"],[164,19,141,17],[164,20,141,18,"val"],[164,23,141,17],[164,24,141,10],[164,29,141,27,"type"],[164,33,141,10],[164,37,141,35],[164,38,141,36],[164,41,141,39,"_is"],[164,44,141,42],[164,45,141,43,"default"],[164,52,141,35],[164,54,141,52,"type"],[164,58,141,35],[164,60,141,58,"val"],[164,63,141,35],[164,64,141,6],[164,66,141,64],[165,0,142,8,"valid"],[165,10,142,8,"valid"],[165,15,142,13],[165,18,142,16],[165,22,142,8],[166,0,143,8],[167,0,144,7],[168,0,145,5],[170,0,147,4],[170,10,147,8],[170,11,147,9,"valid"],[170,16,147,4],[170,18,147,16],[171,0,148,6],[171,14,148,12],[171,18,148,16,"TypeError"],[171,27,148,12],[171,28,148,26],[171,42,148,38,"key"],[171,45,148,26],[171,57,148,48,"node"],[171,61,148,52],[171,62,148,53,"type"],[171,66,148,26],[171,105,148,91,"JSON"],[171,109,148,95],[171,110,148,96,"stringify"],[171,119,148,91],[171,120,148,106,"types"],[171,125,148,91],[171,126,148,26],[171,157,148,137,"JSON"],[171,161,148,141],[171,162,148,142,"stringify"],[171,171,148,137],[171,172,148,152,"val"],[171,175,148,155],[171,179,148,159,"val"],[171,182,148,162],[171,183,148,163,"type"],[171,187,148,137],[171,188,148,26],[171,189,148,12],[171,190,148,6],[172,0,149,5],[173,0,150,3],[175,0,152,2,"validate"],[175,4,152,2,"validate"],[175,12,152,10],[175,13,152,11,"oneOfNodeOrValueTypes"],[175,34,152,2],[175,37,152,35,"types"],[175,42,152,2],[176,0,153,2],[176,11,153,9,"validate"],[176,19,153,2],[177,0,154,1],[179,0,156,0],[179,11,156,9,"assertValueType"],[179,26,156,0],[179,27,156,25,"type"],[179,31,156,0],[179,33,156,31],[180,0,157,2],[180,13,157,11,"validate"],[180,21,157,2],[180,22,157,20,"node"],[180,26,157,2],[180,28,157,26,"key"],[180,31,157,2],[180,33,157,31,"val"],[180,36,157,2],[180,38,157,36],[181,0,158,4],[181,10,158,10,"valid"],[181,15,158,15],[181,18,158,18,"getType"],[181,25,158,25],[181,26,158,26,"val"],[181,29,158,25],[181,30,158,18],[181,35,158,35,"type"],[181,39,158,4],[183,0,160,4],[183,10,160,8],[183,11,160,9,"valid"],[183,16,160,4],[183,18,160,16],[184,0,161,6],[184,14,161,12],[184,18,161,16,"TypeError"],[184,27,161,12],[184,42,161,38,"key"],[184,45,161,12],[184,71,161,62,"type"],[184,75,161,12],[184,92,161,78,"getType"],[184,99,161,85],[184,100,161,86,"val"],[184,103,161,85],[184,104,161,12],[184,105,161,6],[185,0,162,5],[186,0,163,3],[188,0,165,2,"validate"],[188,4,165,2,"validate"],[188,12,165,10],[188,13,165,11,"type"],[188,17,165,2],[188,20,165,18,"type"],[188,24,165,2],[189,0,166,2],[189,11,166,9,"validate"],[189,19,166,2],[190,0,167,1],[192,0,169,0],[192,11,169,9,"chain"],[192,16,169,0],[192,19,169,23],[193,0,169,23],[193,39,169,18,"fns"],[193,42,169,23],[194,0,169,18,"fns"],[194,6,169,18,"fns"],[194,9,169,23],[195,0,169,23],[197,0,170,2],[197,13,170,11,"validate"],[197,21,170,2],[197,24,170,29],[198,0,171,4],[198,31,171,21,"fns"],[198,34,171,4],[198,62,171,26],[199,0,171,9],[199,12,171,15,"fn"],[199,14,171,17],[199,26,171,9],[200,0,172,6,"fn"],[200,8,172,6,"fn"],[200,10,172,8],[200,16,172,6],[201,0,173,5],[202,0,174,3],[204,0,176,2,"validate"],[204,4,176,2,"validate"],[204,12,176,10],[204,13,176,11,"chainOf"],[204,20,176,2],[204,23,176,21,"fns"],[204,26,176,2],[205,0,177,2],[205,11,177,9,"validate"],[205,19,177,2],[206,0,178,1],[208,0,180,0],[208,11,180,9,"defineType"],[208,21,180,0],[208,22,180,20,"type"],[208,26,180,0],[208,28,180,37],[209,0,180,37],[209,8,180,26,"opts"],[209,12,180,37],[209,83,180,33],[209,85,180,37],[210,0,181,2],[210,8,181,8,"inherits"],[210,16,181,16],[210,19,181,19,"opts"],[210,23,181,23],[210,24,181,24,"inherits"],[210,32,181,19],[210,36,181,36,"store"],[210,41,181,41],[210,42,181,42,"opts"],[210,46,181,46],[210,47,181,47,"inherits"],[210,55,181,41],[210,56,181,19],[210,60,181,60],[210,62,181,2],[211,0,182,2],[211,8,182,8,"fields"],[211,14,182,14],[211,17,182,17,"opts"],[211,21,182,21],[211,22,182,22,"fields"],[211,28,182,17],[211,32,182,32,"inherits"],[211,40,182,40],[211,41,182,41,"fields"],[211,47,182,17],[211,51,182,51],[211,53,182,2],[212,0,183,2],[212,8,183,8,"visitor"],[212,15,183,15],[212,18,183,18,"opts"],[212,22,183,22],[212,23,183,23,"visitor"],[212,30,183,18],[212,34,183,34,"inherits"],[212,42,183,42],[212,43,183,43,"visitor"],[212,50,183,18],[212,54,183,54],[212,56,183,2],[213,0,184,2],[213,8,184,8,"aliases"],[213,15,184,15],[213,18,184,18,"opts"],[213,22,184,22],[213,23,184,23,"aliases"],[213,30,184,18],[213,34,184,34,"inherits"],[213,42,184,42],[213,43,184,43,"aliases"],[213,50,184,18],[213,54,184,54],[213,56,184,2],[214,0,185,2],[214,8,185,8,"builder"],[214,15,185,15],[214,18,185,18,"opts"],[214,22,185,22],[214,23,185,23,"builder"],[214,30,185,18],[214,34,185,34,"inherits"],[214,42,185,42],[214,43,185,43,"builder"],[214,50,185,18],[214,54,185,54,"opts"],[214,58,185,58],[214,59,185,59,"visitor"],[214,66,185,18],[214,70,185,70],[214,72,185,2],[216,0,187,2],[216,8,187,6,"opts"],[216,12,187,10],[216,13,187,11,"deprecatedAlias"],[216,28,187,2],[216,30,187,28],[217,0,188,4,"DEPRECATED_KEYS"],[217,6,188,4,"DEPRECATED_KEYS"],[217,21,188,19],[217,22,188,20,"opts"],[217,26,188,24],[217,27,188,25,"deprecatedAlias"],[217,42,188,19],[217,43,188,4],[217,46,188,44,"type"],[217,50,188,4],[218,0,189,3],[220,0,191,2],[220,25,191,20,"visitor"],[220,32,191,27],[220,33,191,28,"concat"],[220,39,191,20],[220,40,191,35,"builder"],[220,47,191,20],[220,48,191,2],[220,209,191,45],[221,0,191,45],[223,0,191,45],[224,0,191,45],[225,0,191,45],[226,0,191,45],[227,0,191,45],[228,0,191,45],[229,0,191,45],[230,0,191,45],[232,0,191,45],[232,10,191,13,"key"],[232,15,191,45],[233,0,192,4,"fields"],[233,6,192,4,"fields"],[233,12,192,10],[233,13,192,11,"key"],[233,18,192,10],[233,19,192,4],[233,22,192,18,"fields"],[233,28,192,24],[233,29,192,25,"key"],[233,34,192,24],[233,35,192,18],[233,39,192,33],[233,41,192,4],[234,0,193,3],[236,0,195,2],[236,37,195,20,"Object"],[236,43,195,26],[236,44,195,27,"keys"],[236,48,195,20],[236,49,195,32,"fields"],[236,55,195,20],[236,56,195,2],[236,92,195,41],[237,0,195,7],[237,10,195,13,"key"],[237,15,195,16],[237,35,195,7],[238,0,196,4],[238,10,196,10,"field"],[238,15,196,15],[238,18,196,18,"fields"],[238,24,196,24],[238,25,196,25,"key"],[238,30,196,24],[238,31,196,4],[240,0,198,4],[240,10,198,8,"builder"],[240,17,198,15],[240,18,198,16,"indexOf"],[240,25,198,8],[240,26,198,24,"key"],[240,31,198,8],[240,37,198,33],[240,38,198,34],[240,39,198,4],[240,41,198,37],[241,0,199,6,"field"],[241,8,199,6,"field"],[241,13,199,11],[241,14,199,12,"optional"],[241,22,199,6],[241,25,199,23],[241,29,199,6],[242,0,200,5],[244,0,202,4],[244,10,202,8,"field"],[244,15,202,13],[244,16,202,14,"default"],[244,23,202,8],[244,28,202,26,"undefined"],[244,37,202,4],[244,39,202,37],[245,0,203,6,"field"],[245,8,203,6,"field"],[245,13,203,11],[245,14,203,12,"default"],[245,21,203,6],[245,24,203,22],[245,28,203,6],[246,0,204,5],[246,7,202,4],[246,13,204,11],[246,17,204,15],[246,18,204,16,"field"],[246,23,204,21],[246,24,204,22,"validate"],[246,32,204,11],[246,34,204,32],[247,0,205,6,"field"],[247,8,205,6,"field"],[247,13,205,11],[247,14,205,12,"validate"],[247,22,205,6],[247,25,205,23,"assertValueType"],[247,40,205,38],[247,41,205,39,"getType"],[247,48,205,46],[247,49,205,47,"field"],[247,54,205,52],[247,55,205,53,"default"],[247,62,205,46],[247,63,205,38],[247,64,205,6],[248,0,206,5],[249,0,207,3],[251,0,209,2,"VISITOR_KEYS"],[251,4,209,2,"VISITOR_KEYS"],[251,16,209,14],[251,17,209,15,"type"],[251,21,209,14],[251,22,209,2],[251,25,209,23,"opts"],[251,29,209,27],[251,30,209,28,"visitor"],[251,37,209,23],[251,40,209,38,"visitor"],[251,47,209,2],[252,0,210,2,"BUILDER_KEYS"],[252,4,210,2,"BUILDER_KEYS"],[252,16,210,14],[252,17,210,15,"type"],[252,21,210,14],[252,22,210,2],[252,25,210,23,"opts"],[252,29,210,27],[252,30,210,28,"builder"],[252,37,210,23],[252,40,210,38,"builder"],[252,47,210,2],[253,0,211,2,"NODE_FIELDS"],[253,4,211,2,"NODE_FIELDS"],[253,15,211,13],[253,16,211,14,"type"],[253,20,211,13],[253,21,211,2],[253,24,211,22,"opts"],[253,28,211,26],[253,29,211,27,"fields"],[253,35,211,22],[253,38,211,36,"fields"],[253,44,211,2],[254,0,212,2,"ALIAS_KEYS"],[254,4,212,2,"ALIAS_KEYS"],[254,14,212,12],[254,15,212,13,"type"],[254,19,212,12],[254,20,212,2],[254,23,212,21,"opts"],[254,27,212,25],[254,28,212,26,"aliases"],[254,35,212,21],[254,38,212,36,"aliases"],[254,45,212,2],[255,0,213,2,"aliases"],[255,4,213,2,"aliases"],[255,11,213,9],[255,12,213,10,"forEach"],[255,19,213,2],[255,20,213,18],[255,30,213,18,"alias"],[255,35,213,23],[255,37,213,27],[256,0,214,4,"FLIPPED_ALIAS_KEYS"],[256,6,214,4,"FLIPPED_ALIAS_KEYS"],[256,24,214,22],[256,25,214,23,"alias"],[256,30,214,22],[256,31,214,4],[256,34,214,32,"FLIPPED_ALIAS_KEYS"],[256,52,214,50],[256,53,214,51,"alias"],[256,58,214,50],[256,59,214,32],[256,63,214,61],[256,65,214,4],[257,0,215,4,"FLIPPED_ALIAS_KEYS"],[257,6,215,4,"FLIPPED_ALIAS_KEYS"],[257,24,215,22],[257,25,215,23,"alias"],[257,30,215,22],[257,31,215,4],[257,32,215,30,"push"],[257,36,215,4],[257,37,215,35,"type"],[257,41,215,4],[258,0,216,3],[258,5,213,2],[259,0,217,2,"store"],[259,4,217,2,"store"],[259,9,217,7],[259,10,217,8,"type"],[259,14,217,7],[259,15,217,2],[259,18,217,16,"opts"],[259,22,217,2],[260,0,218,1],[262,0,220,0],[262,6,220,6,"store"],[262,11,220,11],[262,14,220,14],[262,16,220,0]]},"type":"js/module"}]}