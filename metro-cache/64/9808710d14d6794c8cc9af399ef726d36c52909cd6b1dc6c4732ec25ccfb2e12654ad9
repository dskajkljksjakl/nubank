{"dependencies":[{"name":"../retrievers/getBindingIdentifiers","data":{"isAsync":false}},{"name":"../validators/generated","data":{"isAsync":false}},{"name":"../builders/generated","data":{"isAsync":false}},{"name":"../clone/cloneNode","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = gatherSequenceExpressions;\n\n  var _getBindingIdentifiers = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"../retrievers/getBindingIdentifiers\"));\n\n  var _generated = _$$_REQUIRE(_dependencyMap[1], \"../validators/generated\");\n\n  var _generated2 = _$$_REQUIRE(_dependencyMap[2], \"../builders/generated\");\n\n  var _cloneNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../clone/cloneNode\"));\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function gatherSequenceExpressions(nodes, scope, declars) {\n    var exprs = [];\n    var ensureLastUndefined = true;\n\n    for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _node = _ref;\n      ensureLastUndefined = false;\n\n      if ((0, _generated.isExpression)(_node)) {\n        exprs.push(_node);\n      } else if ((0, _generated.isExpressionStatement)(_node)) {\n        exprs.push(_node.expression);\n      } else if ((0, _generated.isVariableDeclaration)(_node)) {\n        if (_node.kind !== \"var\") return;\n\n        for (var _iterator2 = _node.declarations, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref2;\n\n          if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            _ref2 = _iterator2[_i2++];\n          } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            _ref2 = _i2.value;\n          }\n\n          var _declar = _ref2;\n          var bindings = (0, _getBindingIdentifiers.default)(_declar);\n\n          for (var _i3 = 0, _Object$keys = Object.keys(bindings); _i3 < _Object$keys.length; _i3++) {\n            var key = _Object$keys[_i3];\n            declars.push({\n              kind: _node.kind,\n              id: (0, _cloneNode.default)(bindings[key])\n            });\n          }\n\n          if (_declar.init) {\n            exprs.push((0, _generated2.assignmentExpression)(\"=\", _declar.id, _declar.init));\n          }\n        }\n\n        ensureLastUndefined = true;\n      } else if ((0, _generated.isIfStatement)(_node)) {\n        var consequent = _node.consequent ? gatherSequenceExpressions([_node.consequent], scope, declars) : scope.buildUndefinedNode();\n        var alternate = _node.alternate ? gatherSequenceExpressions([_node.alternate], scope, declars) : scope.buildUndefinedNode();\n        if (!consequent || !alternate) return;\n        exprs.push((0, _generated2.conditionalExpression)(_node.test, consequent, alternate));\n      } else if ((0, _generated.isBlockStatement)(_node)) {\n        var body = gatherSequenceExpressions(_node.body, scope, declars);\n        if (!body) return;\n        exprs.push(body);\n      } else if ((0, _generated.isEmptyStatement)(_node)) {\n        ensureLastUndefined = true;\n      } else {\n        return;\n      }\n    }\n\n    if (ensureLastUndefined) {\n      exprs.push(scope.buildUndefinedNode());\n    }\n\n    if (exprs.length === 1) {\n      return exprs[0];\n    } else {\n      return (0, _generated2.sequenceExpression)(exprs);\n    }\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,0],[7,20,6,18,"gatherSequenceExpressions"],[7,45,6,0],[9,0,8,0],[9,6,8,4,"_getBindingIdentifiers"],[9,28,8,26],[9,31,8,29,"_interopRequireDefault"],[9,53,8,51],[9,54,8,52,"require"],[9,65,8,59],[9,123,8,51],[9,124,8,0],[11,0,10,0],[11,6,10,4,"_generated"],[11,16,10,14],[11,19,10,17,"require"],[11,30,10,24],[11,76,10,0],[13,0,12,0],[13,6,12,4,"_generated2"],[13,17,12,15],[13,20,12,18,"require"],[13,31,12,25],[13,75,12,0],[15,0,14,0],[15,6,14,4,"_cloneNode"],[15,16,14,14],[15,19,14,17,"_interopRequireDefault"],[15,41,14,39],[15,42,14,40,"require"],[15,53,14,47],[15,94,14,39],[15,95,14,0],[17,0,16,0],[17,11,16,9,"_interopRequireDefault"],[17,33,16,0],[17,34,16,32,"obj"],[17,37,16,0],[17,39,16,37],[18,0,16,39],[18,11,16,46,"obj"],[18,14,16,49],[18,18,16,53,"obj"],[18,21,16,56],[18,22,16,57,"__esModule"],[18,32,16,46],[18,35,16,70,"obj"],[18,38,16,46],[18,41,16,76],[19,0,16,78,"default"],[19,6,16,78,"default"],[19,13,16,85],[19,15,16,87,"obj"],[20,0,16,76],[20,5,16,39],[21,0,16,95],[23,0,18,0],[23,11,18,9,"gatherSequenceExpressions"],[23,36,18,0],[23,37,18,35,"nodes"],[23,42,18,0],[23,44,18,42,"scope"],[23,49,18,0],[23,51,18,49,"declars"],[23,58,18,0],[23,60,18,58],[24,0,19,2],[24,8,19,8,"exprs"],[24,13,19,13],[24,16,19,16],[24,18,19,2],[25,0,20,2],[25,8,20,6,"ensureLastUndefined"],[25,27,20,25],[25,30,20,28],[25,34,20,2],[27,0,22,2],[27,25,22,21,"nodes"],[27,30,22,2],[27,190,22,28],[28,0,22,28],[30,0,22,28],[31,0,22,28],[32,0,22,28],[33,0,22,28],[34,0,22,28],[35,0,22,28],[36,0,22,28],[37,0,22,28],[39,0,22,28],[39,10,22,13,"node"],[39,15,22,28],[40,0,23,4,"ensureLastUndefined"],[40,6,23,4,"ensureLastUndefined"],[40,25,23,23],[40,28,23,26],[40,33,23,4],[42,0,25,4],[42,10,25,8],[42,11,25,9],[42,14,25,12,"_generated"],[42,24,25,22],[42,25,25,23,"isExpression"],[42,37,25,8],[42,39,25,37,"node"],[42,44,25,8],[42,45,25,4],[42,47,25,44],[43,0,26,6,"exprs"],[43,8,26,6,"exprs"],[43,13,26,11],[43,14,26,12,"push"],[43,18,26,6],[43,19,26,17,"node"],[43,24,26,6],[44,0,27,5],[44,7,25,4],[44,13,27,11],[44,17,27,15],[44,18,27,16],[44,21,27,19,"_generated"],[44,31,27,29],[44,32,27,30,"isExpressionStatement"],[44,53,27,15],[44,55,27,53,"node"],[44,60,27,15],[44,61,27,11],[44,63,27,60],[45,0,28,6,"exprs"],[45,8,28,6,"exprs"],[45,13,28,11],[45,14,28,12,"push"],[45,18,28,6],[45,19,28,17,"node"],[45,24,28,21],[45,25,28,22,"expression"],[45,35,28,6],[46,0,29,5],[46,7,27,11],[46,13,29,11],[46,17,29,15],[46,18,29,16],[46,21,29,19,"_generated"],[46,31,29,29],[46,32,29,30,"isVariableDeclaration"],[46,53,29,15],[46,55,29,53,"node"],[46,60,29,15],[46,61,29,11],[46,63,29,60],[47,0,30,6],[47,12,30,10,"node"],[47,17,30,14],[47,18,30,15,"kind"],[47,22,30,10],[47,27,30,24],[47,32,30,6],[47,34,30,31],[49,0,32,6],[49,30,32,27,"node"],[49,35,32,31],[49,36,32,32,"declarations"],[49,48,32,6],[49,215,32,46],[50,0,32,46],[52,0,32,46],[53,0,32,46],[54,0,32,46],[55,0,32,46],[56,0,32,46],[57,0,32,46],[58,0,32,46],[59,0,32,46],[61,0,32,46],[61,14,32,17,"declar"],[61,21,32,46],[62,0,33,8],[62,14,33,14,"bindings"],[62,22,33,22],[62,25,33,25],[62,26,33,26],[62,29,33,29,"_getBindingIdentifiers"],[62,51,33,51],[62,52,33,52,"default"],[62,59,33,25],[62,61,33,61,"declar"],[62,68,33,25],[62,69,33,8],[64,0,35,8],[64,43,35,26,"Object"],[64,49,35,32],[64,50,35,33,"keys"],[64,54,35,26],[64,55,35,38,"bindings"],[64,63,35,26],[64,64,35,8],[64,100,35,49],[65,0,35,13],[65,16,35,19,"key"],[65,19,35,22],[65,39,35,13],[66,0,36,10,"declars"],[66,12,36,10,"declars"],[66,19,36,17],[66,20,36,18,"push"],[66,24,36,10],[66,25,36,23],[67,0,37,12,"kind"],[67,14,37,12,"kind"],[67,18,37,16],[67,20,37,18,"node"],[67,25,37,22],[67,26,37,23,"kind"],[67,30,36,23],[68,0,38,12,"id"],[68,14,38,12,"id"],[68,16,38,14],[68,18,38,16],[68,19,38,17],[68,22,38,20,"_cloneNode"],[68,32,38,30],[68,33,38,31,"default"],[68,40,38,16],[68,42,38,40,"bindings"],[68,50,38,48],[68,51,38,49,"key"],[68,54,38,48],[68,55,38,16],[69,0,36,23],[69,13,36,10],[70,0,40,9],[72,0,42,8],[72,14,42,12,"declar"],[72,21,42,18],[72,22,42,19,"init"],[72,26,42,8],[72,28,42,25],[73,0,43,10,"exprs"],[73,12,43,10,"exprs"],[73,17,43,15],[73,18,43,16,"push"],[73,22,43,10],[73,23,43,21],[73,24,43,22],[73,27,43,25,"_generated2"],[73,38,43,36],[73,39,43,37,"assignmentExpression"],[73,59,43,21],[73,61,43,59],[73,64,43,21],[73,66,43,64,"declar"],[73,73,43,70],[73,74,43,71,"id"],[73,76,43,21],[73,78,43,75,"declar"],[73,85,43,81],[73,86,43,82,"init"],[73,90,43,21],[73,91,43,10],[74,0,44,9],[75,0,45,7],[77,0,47,6,"ensureLastUndefined"],[77,8,47,6,"ensureLastUndefined"],[77,27,47,25],[77,30,47,28],[77,34,47,6],[78,0,48,5],[78,7,29,11],[78,13,48,11],[78,17,48,15],[78,18,48,16],[78,21,48,19,"_generated"],[78,31,48,29],[78,32,48,30,"isIfStatement"],[78,45,48,15],[78,47,48,45,"node"],[78,52,48,15],[78,53,48,11],[78,55,48,52],[79,0,49,6],[79,12,49,12,"consequent"],[79,22,49,22],[79,25,49,25,"node"],[79,30,49,29],[79,31,49,30,"consequent"],[79,41,49,25],[79,44,49,43,"gatherSequenceExpressions"],[79,69,49,68],[79,70,49,69],[79,71,49,70,"node"],[79,76,49,74],[79,77,49,75,"consequent"],[79,87,49,69],[79,88,49,68],[79,90,49,88,"scope"],[79,95,49,68],[79,97,49,95,"declars"],[79,104,49,68],[79,105,49,25],[79,108,49,106,"scope"],[79,113,49,111],[79,114,49,112,"buildUndefinedNode"],[79,132,49,106],[79,134,49,6],[80,0,50,6],[80,12,50,12,"alternate"],[80,21,50,21],[80,24,50,24,"node"],[80,29,50,28],[80,30,50,29,"alternate"],[80,39,50,24],[80,42,50,41,"gatherSequenceExpressions"],[80,67,50,66],[80,68,50,67],[80,69,50,68,"node"],[80,74,50,72],[80,75,50,73,"alternate"],[80,84,50,67],[80,85,50,66],[80,87,50,85,"scope"],[80,92,50,66],[80,94,50,92,"declars"],[80,101,50,66],[80,102,50,24],[80,105,50,103,"scope"],[80,110,50,108],[80,111,50,109,"buildUndefinedNode"],[80,129,50,103],[80,131,50,6],[81,0,51,6],[81,12,51,10],[81,13,51,11,"consequent"],[81,23,51,10],[81,27,51,25],[81,28,51,26,"alternate"],[81,37,51,6],[81,39,51,37],[82,0,52,6,"exprs"],[82,8,52,6,"exprs"],[82,13,52,11],[82,14,52,12,"push"],[82,18,52,6],[82,19,52,17],[82,20,52,18],[82,23,52,21,"_generated2"],[82,34,52,32],[82,35,52,33,"conditionalExpression"],[82,56,52,17],[82,58,52,56,"node"],[82,63,52,60],[82,64,52,61,"test"],[82,68,52,17],[82,70,52,67,"consequent"],[82,80,52,17],[82,82,52,79,"alternate"],[82,91,52,17],[82,92,52,6],[83,0,53,5],[83,7,48,11],[83,13,53,11],[83,17,53,15],[83,18,53,16],[83,21,53,19,"_generated"],[83,31,53,29],[83,32,53,30,"isBlockStatement"],[83,48,53,15],[83,50,53,48,"node"],[83,55,53,15],[83,56,53,11],[83,58,53,55],[84,0,54,6],[84,12,54,12,"body"],[84,16,54,16],[84,19,54,19,"gatherSequenceExpressions"],[84,44,54,44],[84,45,54,45,"node"],[84,50,54,49],[84,51,54,50,"body"],[84,55,54,44],[84,57,54,56,"scope"],[84,62,54,44],[84,64,54,63,"declars"],[84,71,54,44],[84,72,54,6],[85,0,55,6],[85,12,55,10],[85,13,55,11,"body"],[85,17,55,6],[85,19,55,17],[86,0,56,6,"exprs"],[86,8,56,6,"exprs"],[86,13,56,11],[86,14,56,12,"push"],[86,18,56,6],[86,19,56,17,"body"],[86,23,56,6],[87,0,57,5],[87,7,53,11],[87,13,57,11],[87,17,57,15],[87,18,57,16],[87,21,57,19,"_generated"],[87,31,57,29],[87,32,57,30,"isEmptyStatement"],[87,48,57,15],[87,50,57,48,"node"],[87,55,57,15],[87,56,57,11],[87,58,57,55],[88,0,58,6,"ensureLastUndefined"],[88,8,58,6,"ensureLastUndefined"],[88,27,58,25],[88,30,58,28],[88,34,58,6],[89,0,59,5],[89,7,57,11],[89,13,59,11],[90,0,60,6],[91,0,61,5],[92,0,62,3],[94,0,64,2],[94,8,64,6,"ensureLastUndefined"],[94,27,64,2],[94,29,64,27],[95,0,65,4,"exprs"],[95,6,65,4,"exprs"],[95,11,65,9],[95,12,65,10,"push"],[95,16,65,4],[95,17,65,15,"scope"],[95,22,65,20],[95,23,65,21,"buildUndefinedNode"],[95,41,65,15],[95,43,65,4],[96,0,66,3],[98,0,68,2],[98,8,68,6,"exprs"],[98,13,68,11],[98,14,68,12,"length"],[98,20,68,6],[98,25,68,23],[98,26,68,2],[98,28,68,26],[99,0,69,4],[99,13,69,11,"exprs"],[99,18,69,16],[99,19,69,17],[99,20,69,16],[99,21,69,4],[100,0,70,3],[100,5,68,2],[100,11,70,9],[101,0,71,4],[101,13,71,11],[101,14,71,12],[101,17,71,15,"_generated2"],[101,28,71,26],[101,29,71,27,"sequenceExpression"],[101,47,71,11],[101,49,71,47,"exprs"],[101,54,71,11],[101,55,71,4],[102,0,72,3],[103,0,73,1]]},"type":"js/module"}]}