{"dependencies":[{"name":"lodash/isPlainObject","data":{"isAsync":false}},{"name":"lodash/isRegExp","data":{"isAsync":false}},{"name":"../validators/isValidIdentifier","data":{"isAsync":false}},{"name":"../builders/generated","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = valueToNode;\n\n  function _isPlainObject() {\n    var data = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"lodash/isPlainObject\"));\n\n    _isPlainObject = function _isPlainObject() {\n      return data;\n    };\n\n    return data;\n  }\n\n  function _isRegExp() {\n    var data = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"lodash/isRegExp\"));\n\n    _isRegExp = function _isRegExp() {\n      return data;\n    };\n\n    return data;\n  }\n\n  var _isValidIdentifier = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"../validators/isValidIdentifier\"));\n\n  var _generated = _$$_REQUIRE(_dependencyMap[3], \"../builders/generated\");\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function valueToNode(value) {\n    if (value === undefined) {\n      return (0, _generated.identifier)(\"undefined\");\n    }\n\n    if (value === true || value === false) {\n      return (0, _generated.booleanLiteral)(value);\n    }\n\n    if (value === null) {\n      return (0, _generated.nullLiteral)();\n    }\n\n    if (typeof value === \"string\") {\n      return (0, _generated.stringLiteral)(value);\n    }\n\n    if (typeof value === \"number\") {\n      var result;\n\n      if (Number.isFinite(value)) {\n        result = (0, _generated.numericLiteral)(Math.abs(value));\n      } else {\n        var numerator;\n\n        if (Number.isNaN(value)) {\n          numerator = (0, _generated.numericLiteral)(0);\n        } else {\n          numerator = (0, _generated.numericLiteral)(1);\n        }\n\n        result = (0, _generated.binaryExpression)(\"/\", numerator, (0, _generated.numericLiteral)(0));\n      }\n\n      if (value < 0 || Object.is(value, -0)) {\n        result = (0, _generated.unaryExpression)(\"-\", result);\n      }\n\n      return result;\n    }\n\n    if ((0, _isRegExp().default)(value)) {\n      var pattern = value.source;\n      var flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n      return (0, _generated.regExpLiteral)(pattern, flags);\n    }\n\n    if (Array.isArray(value)) {\n      return (0, _generated.arrayExpression)(value.map(valueToNode));\n    }\n\n    if ((0, _isPlainObject().default)(value)) {\n      var props = [];\n\n      for (var _i = 0, _Object$keys = Object.keys(value); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        var nodeKey = void 0;\n\n        if ((0, _isValidIdentifier.default)(key)) {\n          nodeKey = (0, _generated.identifier)(key);\n        } else {\n          nodeKey = (0, _generated.stringLiteral)(key);\n        }\n\n        props.push((0, _generated.objectProperty)(nodeKey, valueToNode(value[key])));\n      }\n\n      return (0, _generated.objectExpression)(props);\n    }\n\n    throw new Error(\"don't know how to turn this value into a node\");\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,0],[7,20,6,18,"valueToNode"],[7,31,6,0],[9,0,8,0],[9,11,8,9,"_isPlainObject"],[9,25,8,0],[9,28,8,26],[10,0,9,2],[10,8,9,8,"data"],[10,12,9,12],[10,15,9,15,"_interopRequireDefault"],[10,37,9,37],[10,38,9,38,"require"],[10,49,9,45],[10,92,9,37],[10,93,9,2],[12,0,11,2,"_isPlainObject"],[12,4,11,2,"_isPlainObject"],[12,18,11,16],[12,21,11,19],[12,47,11,31],[13,0,12,4],[13,13,12,11,"data"],[13,17,12,4],[14,0,13,3],[14,5,11,2],[16,0,15,2],[16,11,15,9,"data"],[16,15,15,2],[17,0,16,1],[19,0,18,0],[19,11,18,9,"_isRegExp"],[19,20,18,0],[19,23,18,21],[20,0,19,2],[20,8,19,8,"data"],[20,12,19,12],[20,15,19,15,"_interopRequireDefault"],[20,37,19,37],[20,38,19,38,"require"],[20,49,19,45],[20,87,19,37],[20,88,19,2],[22,0,21,2,"_isRegExp"],[22,4,21,2,"_isRegExp"],[22,13,21,11],[22,16,21,14],[22,37,21,26],[23,0,22,4],[23,13,22,11,"data"],[23,17,22,4],[24,0,23,3],[24,5,21,2],[26,0,25,2],[26,11,25,9,"data"],[26,15,25,2],[27,0,26,1],[29,0,28,0],[29,6,28,4,"_isValidIdentifier"],[29,24,28,22],[29,27,28,25,"_interopRequireDefault"],[29,49,28,47],[29,50,28,48,"require"],[29,61,28,55],[29,115,28,47],[29,116,28,0],[31,0,30,0],[31,6,30,4,"_generated"],[31,16,30,14],[31,19,30,17,"require"],[31,30,30,24],[31,74,30,0],[33,0,32,0],[33,11,32,9,"_interopRequireDefault"],[33,33,32,0],[33,34,32,32,"obj"],[33,37,32,0],[33,39,32,37],[34,0,32,39],[34,11,32,46,"obj"],[34,14,32,49],[34,18,32,53,"obj"],[34,21,32,56],[34,22,32,57,"__esModule"],[34,32,32,46],[34,35,32,70,"obj"],[34,38,32,46],[34,41,32,76],[35,0,32,78,"default"],[35,6,32,78,"default"],[35,13,32,85],[35,15,32,87,"obj"],[36,0,32,76],[36,5,32,39],[37,0,32,95],[39,0,34,0],[39,11,34,9,"valueToNode"],[39,22,34,0],[39,23,34,21,"value"],[39,28,34,0],[39,30,34,28],[40,0,35,2],[40,8,35,6,"value"],[40,13,35,11],[40,18,35,16,"undefined"],[40,27,35,2],[40,29,35,27],[41,0,36,4],[41,13,36,11],[41,14,36,12],[41,17,36,15,"_generated"],[41,27,36,25],[41,28,36,26,"identifier"],[41,38,36,11],[41,40,36,38],[41,51,36,11],[41,52,36,4],[42,0,37,3],[44,0,39,2],[44,8,39,6,"value"],[44,13,39,11],[44,18,39,16],[44,22,39,6],[44,26,39,24,"value"],[44,31,39,29],[44,36,39,34],[44,41,39,2],[44,43,39,41],[45,0,40,4],[45,13,40,11],[45,14,40,12],[45,17,40,15,"_generated"],[45,27,40,25],[45,28,40,26,"booleanLiteral"],[45,42,40,11],[45,44,40,42,"value"],[45,49,40,11],[45,50,40,4],[46,0,41,3],[48,0,43,2],[48,8,43,6,"value"],[48,13,43,11],[48,18,43,16],[48,22,43,2],[48,24,43,22],[49,0,44,4],[49,13,44,11],[49,14,44,12],[49,17,44,15,"_generated"],[49,27,44,25],[49,28,44,26,"nullLiteral"],[49,39,44,11],[49,42,44,4],[50,0,45,3],[52,0,47,2],[52,8,47,6],[52,15,47,13,"value"],[52,20,47,6],[52,25,47,23],[52,33,47,2],[52,35,47,33],[53,0,48,4],[53,13,48,11],[53,14,48,12],[53,17,48,15,"_generated"],[53,27,48,25],[53,28,48,26,"stringLiteral"],[53,41,48,11],[53,43,48,41,"value"],[53,48,48,11],[53,49,48,4],[54,0,49,3],[56,0,51,2],[56,8,51,6],[56,15,51,13,"value"],[56,20,51,6],[56,25,51,23],[56,33,51,2],[56,35,51,33],[57,0,52,4],[57,10,52,8,"result"],[57,16,52,4],[59,0,54,4],[59,10,54,8,"Number"],[59,16,54,14],[59,17,54,15,"isFinite"],[59,25,54,8],[59,26,54,24,"value"],[59,31,54,8],[59,32,54,4],[59,34,54,32],[60,0,55,6,"result"],[60,8,55,6,"result"],[60,14,55,12],[60,17,55,15],[60,18,55,16],[60,21,55,19,"_generated"],[60,31,55,29],[60,32,55,30,"numericLiteral"],[60,46,55,15],[60,48,55,46,"Math"],[60,52,55,50],[60,53,55,51,"abs"],[60,56,55,46],[60,57,55,55,"value"],[60,62,55,46],[60,63,55,15],[60,64,55,6],[61,0,56,5],[61,7,54,4],[61,13,56,11],[62,0,57,6],[62,12,57,10,"numerator"],[62,21,57,6],[64,0,59,6],[64,12,59,10,"Number"],[64,18,59,16],[64,19,59,17,"isNaN"],[64,24,59,10],[64,25,59,23,"value"],[64,30,59,10],[64,31,59,6],[64,33,59,31],[65,0,60,8,"numerator"],[65,10,60,8,"numerator"],[65,19,60,17],[65,22,60,20],[65,23,60,21],[65,26,60,24,"_generated"],[65,36,60,34],[65,37,60,35,"numericLiteral"],[65,51,60,20],[65,53,60,51],[65,54,60,20],[65,55,60,8],[66,0,61,7],[66,9,59,6],[66,15,61,13],[67,0,62,8,"numerator"],[67,10,62,8,"numerator"],[67,19,62,17],[67,22,62,20],[67,23,62,21],[67,26,62,24,"_generated"],[67,36,62,34],[67,37,62,35,"numericLiteral"],[67,51,62,20],[67,53,62,51],[67,54,62,20],[67,55,62,8],[68,0,63,7],[70,0,65,6,"result"],[70,8,65,6,"result"],[70,14,65,12],[70,17,65,15],[70,18,65,16],[70,21,65,19,"_generated"],[70,31,65,29],[70,32,65,30,"binaryExpression"],[70,48,65,15],[70,50,65,48],[70,53,65,15],[70,55,65,53,"numerator"],[70,64,65,15],[70,66,65,64],[70,67,65,65],[70,70,65,68,"_generated"],[70,80,65,78],[70,81,65,79,"numericLiteral"],[70,95,65,64],[70,97,65,95],[70,98,65,64],[70,99,65,15],[70,100,65,6],[71,0,66,5],[73,0,68,4],[73,10,68,8,"value"],[73,15,68,13],[73,18,68,16],[73,19,68,8],[73,23,68,21,"Object"],[73,29,68,27],[73,30,68,28,"is"],[73,32,68,21],[73,33,68,31,"value"],[73,38,68,21],[73,40,68,38],[73,41,68,39],[73,42,68,21],[73,43,68,4],[73,45,68,43],[74,0,69,6,"result"],[74,8,69,6,"result"],[74,14,69,12],[74,17,69,15],[74,18,69,16],[74,21,69,19,"_generated"],[74,31,69,29],[74,32,69,30,"unaryExpression"],[74,47,69,15],[74,49,69,47],[74,52,69,15],[74,54,69,52,"result"],[74,60,69,15],[74,61,69,6],[75,0,70,5],[77,0,72,4],[77,13,72,11,"result"],[77,19,72,4],[78,0,73,3],[80,0,75,2],[80,8,75,6],[80,9,75,7],[80,12,75,10,"_isRegExp"],[80,21,75,19],[80,24,75,22,"default"],[80,31,75,6],[80,33,75,31,"value"],[80,38,75,6],[80,39,75,2],[80,41,75,39],[81,0,76,4],[81,10,76,10,"pattern"],[81,17,76,17],[81,20,76,20,"value"],[81,25,76,25],[81,26,76,26,"source"],[81,32,76,4],[82,0,77,4],[82,10,77,10,"flags"],[82,15,77,15],[82,18,77,18,"value"],[82,23,77,23],[82,24,77,24,"toString"],[82,32,77,18],[82,35,77,35,"match"],[82,40,77,18],[82,41,77,41],[82,55,77,18],[82,57,77,57],[82,58,77,18],[82,59,77,4],[83,0,78,4],[83,13,78,11],[83,14,78,12],[83,17,78,15,"_generated"],[83,27,78,25],[83,28,78,26,"regExpLiteral"],[83,41,78,11],[83,43,78,41,"pattern"],[83,50,78,11],[83,52,78,50,"flags"],[83,57,78,11],[83,58,78,4],[84,0,79,3],[86,0,81,2],[86,8,81,6,"Array"],[86,13,81,11],[86,14,81,12,"isArray"],[86,21,81,6],[86,22,81,20,"value"],[86,27,81,6],[86,28,81,2],[86,30,81,28],[87,0,82,4],[87,13,82,11],[87,14,82,12],[87,17,82,15,"_generated"],[87,27,82,25],[87,28,82,26,"arrayExpression"],[87,43,82,11],[87,45,82,43,"value"],[87,50,82,48],[87,51,82,49,"map"],[87,54,82,43],[87,55,82,53,"valueToNode"],[87,66,82,43],[87,67,82,11],[87,68,82,4],[88,0,83,3],[90,0,85,2],[90,8,85,6],[90,9,85,7],[90,12,85,10,"_isPlainObject"],[90,26,85,24],[90,29,85,27,"default"],[90,36,85,6],[90,38,85,36,"value"],[90,43,85,6],[90,44,85,2],[90,46,85,44],[91,0,86,4],[91,10,86,10,"props"],[91,15,86,15],[91,18,86,18],[91,20,86,4],[93,0,88,4],[93,38,88,22,"Object"],[93,44,88,28],[93,45,88,29,"keys"],[93,49,88,22],[93,50,88,34,"value"],[93,55,88,22],[93,56,88,4],[93,90,88,42],[94,0,88,9],[94,12,88,15,"key"],[94,15,88,18],[94,34,88,9],[95,0,89,6],[95,12,89,10,"nodeKey"],[95,19,89,17],[95,28,89,6],[97,0,91,6],[97,12,91,10],[97,13,91,11],[97,16,91,14,"_isValidIdentifier"],[97,34,91,32],[97,35,91,33,"default"],[97,42,91,10],[97,44,91,42,"key"],[97,47,91,10],[97,48,91,6],[97,50,91,48],[98,0,92,8,"nodeKey"],[98,10,92,8,"nodeKey"],[98,17,92,15],[98,20,92,18],[98,21,92,19],[98,24,92,22,"_generated"],[98,34,92,32],[98,35,92,33,"identifier"],[98,45,92,18],[98,47,92,45,"key"],[98,50,92,18],[98,51,92,8],[99,0,93,7],[99,9,91,6],[99,15,93,13],[100,0,94,8,"nodeKey"],[100,10,94,8,"nodeKey"],[100,17,94,15],[100,20,94,18],[100,21,94,19],[100,24,94,22,"_generated"],[100,34,94,32],[100,35,94,33,"stringLiteral"],[100,48,94,18],[100,50,94,48,"key"],[100,53,94,18],[100,54,94,8],[101,0,95,7],[103,0,97,6,"props"],[103,8,97,6,"props"],[103,13,97,11],[103,14,97,12,"push"],[103,18,97,6],[103,19,97,17],[103,20,97,18],[103,23,97,21,"_generated"],[103,33,97,31],[103,34,97,32,"objectProperty"],[103,48,97,17],[103,50,97,48,"nodeKey"],[103,57,97,17],[103,59,97,57,"valueToNode"],[103,70,97,68],[103,71,97,69,"value"],[103,76,97,74],[103,77,97,75,"key"],[103,80,97,74],[103,81,97,68],[103,82,97,17],[103,83,97,6],[104,0,98,5],[106,0,100,4],[106,13,100,11],[106,14,100,12],[106,17,100,15,"_generated"],[106,27,100,25],[106,28,100,26,"objectExpression"],[106,44,100,11],[106,46,100,44,"props"],[106,51,100,11],[106,52,100,4],[107,0,101,3],[109,0,103,2],[109,10,103,8],[109,14,103,12,"Error"],[109,19,103,8],[109,20,103,18],[109,67,103,8],[109,68,103,2],[110,0,104,1]]},"type":"js/module"}]}