{"dependencies":[{"name":"../../validators/is","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.assertArrayExpression = assertArrayExpression;\n  exports.assertAssignmentExpression = assertAssignmentExpression;\n  exports.assertBinaryExpression = assertBinaryExpression;\n  exports.assertInterpreterDirective = assertInterpreterDirective;\n  exports.assertDirective = assertDirective;\n  exports.assertDirectiveLiteral = assertDirectiveLiteral;\n  exports.assertBlockStatement = assertBlockStatement;\n  exports.assertBreakStatement = assertBreakStatement;\n  exports.assertCallExpression = assertCallExpression;\n  exports.assertCatchClause = assertCatchClause;\n  exports.assertConditionalExpression = assertConditionalExpression;\n  exports.assertContinueStatement = assertContinueStatement;\n  exports.assertDebuggerStatement = assertDebuggerStatement;\n  exports.assertDoWhileStatement = assertDoWhileStatement;\n  exports.assertEmptyStatement = assertEmptyStatement;\n  exports.assertExpressionStatement = assertExpressionStatement;\n  exports.assertFile = assertFile;\n  exports.assertForInStatement = assertForInStatement;\n  exports.assertForStatement = assertForStatement;\n  exports.assertFunctionDeclaration = assertFunctionDeclaration;\n  exports.assertFunctionExpression = assertFunctionExpression;\n  exports.assertIdentifier = assertIdentifier;\n  exports.assertIfStatement = assertIfStatement;\n  exports.assertLabeledStatement = assertLabeledStatement;\n  exports.assertStringLiteral = assertStringLiteral;\n  exports.assertNumericLiteral = assertNumericLiteral;\n  exports.assertNullLiteral = assertNullLiteral;\n  exports.assertBooleanLiteral = assertBooleanLiteral;\n  exports.assertRegExpLiteral = assertRegExpLiteral;\n  exports.assertLogicalExpression = assertLogicalExpression;\n  exports.assertMemberExpression = assertMemberExpression;\n  exports.assertNewExpression = assertNewExpression;\n  exports.assertProgram = assertProgram;\n  exports.assertObjectExpression = assertObjectExpression;\n  exports.assertObjectMethod = assertObjectMethod;\n  exports.assertObjectProperty = assertObjectProperty;\n  exports.assertRestElement = assertRestElement;\n  exports.assertReturnStatement = assertReturnStatement;\n  exports.assertSequenceExpression = assertSequenceExpression;\n  exports.assertParenthesizedExpression = assertParenthesizedExpression;\n  exports.assertSwitchCase = assertSwitchCase;\n  exports.assertSwitchStatement = assertSwitchStatement;\n  exports.assertThisExpression = assertThisExpression;\n  exports.assertThrowStatement = assertThrowStatement;\n  exports.assertTryStatement = assertTryStatement;\n  exports.assertUnaryExpression = assertUnaryExpression;\n  exports.assertUpdateExpression = assertUpdateExpression;\n  exports.assertVariableDeclaration = assertVariableDeclaration;\n  exports.assertVariableDeclarator = assertVariableDeclarator;\n  exports.assertWhileStatement = assertWhileStatement;\n  exports.assertWithStatement = assertWithStatement;\n  exports.assertAssignmentPattern = assertAssignmentPattern;\n  exports.assertArrayPattern = assertArrayPattern;\n  exports.assertArrowFunctionExpression = assertArrowFunctionExpression;\n  exports.assertClassBody = assertClassBody;\n  exports.assertClassDeclaration = assertClassDeclaration;\n  exports.assertClassExpression = assertClassExpression;\n  exports.assertExportAllDeclaration = assertExportAllDeclaration;\n  exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;\n  exports.assertExportNamedDeclaration = assertExportNamedDeclaration;\n  exports.assertExportSpecifier = assertExportSpecifier;\n  exports.assertForOfStatement = assertForOfStatement;\n  exports.assertImportDeclaration = assertImportDeclaration;\n  exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;\n  exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;\n  exports.assertImportSpecifier = assertImportSpecifier;\n  exports.assertMetaProperty = assertMetaProperty;\n  exports.assertClassMethod = assertClassMethod;\n  exports.assertObjectPattern = assertObjectPattern;\n  exports.assertSpreadElement = assertSpreadElement;\n  exports.assertSuper = assertSuper;\n  exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;\n  exports.assertTemplateElement = assertTemplateElement;\n  exports.assertTemplateLiteral = assertTemplateLiteral;\n  exports.assertYieldExpression = assertYieldExpression;\n  exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;\n  exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;\n  exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;\n  exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;\n  exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;\n  exports.assertClassImplements = assertClassImplements;\n  exports.assertDeclareClass = assertDeclareClass;\n  exports.assertDeclareFunction = assertDeclareFunction;\n  exports.assertDeclareInterface = assertDeclareInterface;\n  exports.assertDeclareModule = assertDeclareModule;\n  exports.assertDeclareModuleExports = assertDeclareModuleExports;\n  exports.assertDeclareTypeAlias = assertDeclareTypeAlias;\n  exports.assertDeclareOpaqueType = assertDeclareOpaqueType;\n  exports.assertDeclareVariable = assertDeclareVariable;\n  exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;\n  exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;\n  exports.assertDeclaredPredicate = assertDeclaredPredicate;\n  exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;\n  exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;\n  exports.assertFunctionTypeParam = assertFunctionTypeParam;\n  exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;\n  exports.assertInferredPredicate = assertInferredPredicate;\n  exports.assertInterfaceExtends = assertInterfaceExtends;\n  exports.assertInterfaceDeclaration = assertInterfaceDeclaration;\n  exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;\n  exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;\n  exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;\n  exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;\n  exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;\n  exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;\n  exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;\n  exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;\n  exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;\n  exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;\n  exports.assertObjectTypeIndexer = assertObjectTypeIndexer;\n  exports.assertObjectTypeProperty = assertObjectTypeProperty;\n  exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;\n  exports.assertOpaqueType = assertOpaqueType;\n  exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;\n  exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;\n  exports.assertStringTypeAnnotation = assertStringTypeAnnotation;\n  exports.assertThisTypeAnnotation = assertThisTypeAnnotation;\n  exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;\n  exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;\n  exports.assertTypeAlias = assertTypeAlias;\n  exports.assertTypeAnnotation = assertTypeAnnotation;\n  exports.assertTypeCastExpression = assertTypeCastExpression;\n  exports.assertTypeParameter = assertTypeParameter;\n  exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;\n  exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;\n  exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;\n  exports.assertVariance = assertVariance;\n  exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;\n  exports.assertJSXAttribute = assertJSXAttribute;\n  exports.assertJSXClosingElement = assertJSXClosingElement;\n  exports.assertJSXElement = assertJSXElement;\n  exports.assertJSXEmptyExpression = assertJSXEmptyExpression;\n  exports.assertJSXExpressionContainer = assertJSXExpressionContainer;\n  exports.assertJSXSpreadChild = assertJSXSpreadChild;\n  exports.assertJSXIdentifier = assertJSXIdentifier;\n  exports.assertJSXMemberExpression = assertJSXMemberExpression;\n  exports.assertJSXNamespacedName = assertJSXNamespacedName;\n  exports.assertJSXOpeningElement = assertJSXOpeningElement;\n  exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;\n  exports.assertJSXText = assertJSXText;\n  exports.assertJSXFragment = assertJSXFragment;\n  exports.assertJSXOpeningFragment = assertJSXOpeningFragment;\n  exports.assertJSXClosingFragment = assertJSXClosingFragment;\n  exports.assertNoop = assertNoop;\n  exports.assertPlaceholder = assertPlaceholder;\n  exports.assertArgumentPlaceholder = assertArgumentPlaceholder;\n  exports.assertAwaitExpression = assertAwaitExpression;\n  exports.assertBindExpression = assertBindExpression;\n  exports.assertClassProperty = assertClassProperty;\n  exports.assertOptionalMemberExpression = assertOptionalMemberExpression;\n  exports.assertPipelineTopicExpression = assertPipelineTopicExpression;\n  exports.assertPipelineBareFunction = assertPipelineBareFunction;\n  exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;\n  exports.assertOptionalCallExpression = assertOptionalCallExpression;\n  exports.assertClassPrivateProperty = assertClassPrivateProperty;\n  exports.assertClassPrivateMethod = assertClassPrivateMethod;\n  exports.assertImport = assertImport;\n  exports.assertDecorator = assertDecorator;\n  exports.assertDoExpression = assertDoExpression;\n  exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;\n  exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;\n  exports.assertPrivateName = assertPrivateName;\n  exports.assertBigIntLiteral = assertBigIntLiteral;\n  exports.assertTSParameterProperty = assertTSParameterProperty;\n  exports.assertTSDeclareFunction = assertTSDeclareFunction;\n  exports.assertTSDeclareMethod = assertTSDeclareMethod;\n  exports.assertTSQualifiedName = assertTSQualifiedName;\n  exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;\n  exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;\n  exports.assertTSPropertySignature = assertTSPropertySignature;\n  exports.assertTSMethodSignature = assertTSMethodSignature;\n  exports.assertTSIndexSignature = assertTSIndexSignature;\n  exports.assertTSAnyKeyword = assertTSAnyKeyword;\n  exports.assertTSUnknownKeyword = assertTSUnknownKeyword;\n  exports.assertTSNumberKeyword = assertTSNumberKeyword;\n  exports.assertTSObjectKeyword = assertTSObjectKeyword;\n  exports.assertTSBooleanKeyword = assertTSBooleanKeyword;\n  exports.assertTSStringKeyword = assertTSStringKeyword;\n  exports.assertTSSymbolKeyword = assertTSSymbolKeyword;\n  exports.assertTSVoidKeyword = assertTSVoidKeyword;\n  exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;\n  exports.assertTSNullKeyword = assertTSNullKeyword;\n  exports.assertTSNeverKeyword = assertTSNeverKeyword;\n  exports.assertTSThisType = assertTSThisType;\n  exports.assertTSFunctionType = assertTSFunctionType;\n  exports.assertTSConstructorType = assertTSConstructorType;\n  exports.assertTSTypeReference = assertTSTypeReference;\n  exports.assertTSTypePredicate = assertTSTypePredicate;\n  exports.assertTSTypeQuery = assertTSTypeQuery;\n  exports.assertTSTypeLiteral = assertTSTypeLiteral;\n  exports.assertTSArrayType = assertTSArrayType;\n  exports.assertTSTupleType = assertTSTupleType;\n  exports.assertTSOptionalType = assertTSOptionalType;\n  exports.assertTSRestType = assertTSRestType;\n  exports.assertTSUnionType = assertTSUnionType;\n  exports.assertTSIntersectionType = assertTSIntersectionType;\n  exports.assertTSConditionalType = assertTSConditionalType;\n  exports.assertTSInferType = assertTSInferType;\n  exports.assertTSParenthesizedType = assertTSParenthesizedType;\n  exports.assertTSTypeOperator = assertTSTypeOperator;\n  exports.assertTSIndexedAccessType = assertTSIndexedAccessType;\n  exports.assertTSMappedType = assertTSMappedType;\n  exports.assertTSLiteralType = assertTSLiteralType;\n  exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;\n  exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;\n  exports.assertTSInterfaceBody = assertTSInterfaceBody;\n  exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;\n  exports.assertTSAsExpression = assertTSAsExpression;\n  exports.assertTSTypeAssertion = assertTSTypeAssertion;\n  exports.assertTSEnumDeclaration = assertTSEnumDeclaration;\n  exports.assertTSEnumMember = assertTSEnumMember;\n  exports.assertTSModuleDeclaration = assertTSModuleDeclaration;\n  exports.assertTSModuleBlock = assertTSModuleBlock;\n  exports.assertTSImportType = assertTSImportType;\n  exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;\n  exports.assertTSExternalModuleReference = assertTSExternalModuleReference;\n  exports.assertTSNonNullExpression = assertTSNonNullExpression;\n  exports.assertTSExportAssignment = assertTSExportAssignment;\n  exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;\n  exports.assertTSTypeAnnotation = assertTSTypeAnnotation;\n  exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;\n  exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;\n  exports.assertTSTypeParameter = assertTSTypeParameter;\n  exports.assertExpression = assertExpression;\n  exports.assertBinary = assertBinary;\n  exports.assertScopable = assertScopable;\n  exports.assertBlockParent = assertBlockParent;\n  exports.assertBlock = assertBlock;\n  exports.assertStatement = assertStatement;\n  exports.assertTerminatorless = assertTerminatorless;\n  exports.assertCompletionStatement = assertCompletionStatement;\n  exports.assertConditional = assertConditional;\n  exports.assertLoop = assertLoop;\n  exports.assertWhile = assertWhile;\n  exports.assertExpressionWrapper = assertExpressionWrapper;\n  exports.assertFor = assertFor;\n  exports.assertForXStatement = assertForXStatement;\n  exports.assertFunction = assertFunction;\n  exports.assertFunctionParent = assertFunctionParent;\n  exports.assertPureish = assertPureish;\n  exports.assertDeclaration = assertDeclaration;\n  exports.assertPatternLike = assertPatternLike;\n  exports.assertLVal = assertLVal;\n  exports.assertTSEntityName = assertTSEntityName;\n  exports.assertLiteral = assertLiteral;\n  exports.assertImmutable = assertImmutable;\n  exports.assertUserWhitespacable = assertUserWhitespacable;\n  exports.assertMethod = assertMethod;\n  exports.assertObjectMember = assertObjectMember;\n  exports.assertProperty = assertProperty;\n  exports.assertUnaryLike = assertUnaryLike;\n  exports.assertPattern = assertPattern;\n  exports.assertClass = assertClass;\n  exports.assertModuleDeclaration = assertModuleDeclaration;\n  exports.assertExportDeclaration = assertExportDeclaration;\n  exports.assertModuleSpecifier = assertModuleSpecifier;\n  exports.assertFlow = assertFlow;\n  exports.assertFlowType = assertFlowType;\n  exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;\n  exports.assertFlowDeclaration = assertFlowDeclaration;\n  exports.assertFlowPredicate = assertFlowPredicate;\n  exports.assertJSX = assertJSX;\n  exports.assertPrivate = assertPrivate;\n  exports.assertTSTypeElement = assertTSTypeElement;\n  exports.assertTSType = assertTSType;\n  exports.assertNumberLiteral = assertNumberLiteral;\n  exports.assertRegexLiteral = assertRegexLiteral;\n  exports.assertRestProperty = assertRestProperty;\n  exports.assertSpreadProperty = assertSpreadProperty;\n\n  var _is = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"../../validators/is\"));\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function assert(type, node, opts) {\n    if (!(0, _is.default)(type, node, opts)) {\n      throw new Error(\"Expected type \\\"\" + type + \"\\\" with option \" + JSON.stringify(opts) + \", but instead got \\\"\" + node.type + \"\\\".\");\n    }\n  }\n\n  function assertArrayExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayExpression\", node, opts);\n  }\n\n  function assertAssignmentExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AssignmentExpression\", node, opts);\n  }\n\n  function assertBinaryExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BinaryExpression\", node, opts);\n  }\n\n  function assertInterpreterDirective(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterpreterDirective\", node, opts);\n  }\n\n  function assertDirective(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Directive\", node, opts);\n  }\n\n  function assertDirectiveLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DirectiveLiteral\", node, opts);\n  }\n\n  function assertBlockStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BlockStatement\", node, opts);\n  }\n\n  function assertBreakStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BreakStatement\", node, opts);\n  }\n\n  function assertCallExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CallExpression\", node, opts);\n  }\n\n  function assertCatchClause(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CatchClause\", node, opts);\n  }\n\n  function assertConditionalExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ConditionalExpression\", node, opts);\n  }\n\n  function assertContinueStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ContinueStatement\", node, opts);\n  }\n\n  function assertDebuggerStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DebuggerStatement\", node, opts);\n  }\n\n  function assertDoWhileStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DoWhileStatement\", node, opts);\n  }\n\n  function assertEmptyStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EmptyStatement\", node, opts);\n  }\n\n  function assertExpressionStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExpressionStatement\", node, opts);\n  }\n\n  function assertFile(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"File\", node, opts);\n  }\n\n  function assertForInStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForInStatement\", node, opts);\n  }\n\n  function assertForStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForStatement\", node, opts);\n  }\n\n  function assertFunctionDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionDeclaration\", node, opts);\n  }\n\n  function assertFunctionExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionExpression\", node, opts);\n  }\n\n  function assertIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Identifier\", node, opts);\n  }\n\n  function assertIfStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"IfStatement\", node, opts);\n  }\n\n  function assertLabeledStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LabeledStatement\", node, opts);\n  }\n\n  function assertStringLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringLiteral\", node, opts);\n  }\n\n  function assertNumericLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumericLiteral\", node, opts);\n  }\n\n  function assertNullLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullLiteral\", node, opts);\n  }\n\n  function assertBooleanLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanLiteral\", node, opts);\n  }\n\n  function assertRegExpLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"RegExpLiteral\", node, opts);\n  }\n\n  function assertLogicalExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LogicalExpression\", node, opts);\n  }\n\n  function assertMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MemberExpression\", node, opts);\n  }\n\n  function assertNewExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NewExpression\", node, opts);\n  }\n\n  function assertProgram(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Program\", node, opts);\n  }\n\n  function assertObjectExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectExpression\", node, opts);\n  }\n\n  function assertObjectMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectMethod\", node, opts);\n  }\n\n  function assertObjectProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectProperty\", node, opts);\n  }\n\n  function assertRestElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"RestElement\", node, opts);\n  }\n\n  function assertReturnStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ReturnStatement\", node, opts);\n  }\n\n  function assertSequenceExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SequenceExpression\", node, opts);\n  }\n\n  function assertParenthesizedExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ParenthesizedExpression\", node, opts);\n  }\n\n  function assertSwitchCase(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SwitchCase\", node, opts);\n  }\n\n  function assertSwitchStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SwitchStatement\", node, opts);\n  }\n\n  function assertThisExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThisExpression\", node, opts);\n  }\n\n  function assertThrowStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThrowStatement\", node, opts);\n  }\n\n  function assertTryStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TryStatement\", node, opts);\n  }\n\n  function assertUnaryExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnaryExpression\", node, opts);\n  }\n\n  function assertUpdateExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UpdateExpression\", node, opts);\n  }\n\n  function assertVariableDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VariableDeclaration\", node, opts);\n  }\n\n  function assertVariableDeclarator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VariableDeclarator\", node, opts);\n  }\n\n  function assertWhileStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"WhileStatement\", node, opts);\n  }\n\n  function assertWithStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"WithStatement\", node, opts);\n  }\n\n  function assertAssignmentPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AssignmentPattern\", node, opts);\n  }\n\n  function assertArrayPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayPattern\", node, opts);\n  }\n\n  function assertArrowFunctionExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrowFunctionExpression\", node, opts);\n  }\n\n  function assertClassBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassBody\", node, opts);\n  }\n\n  function assertClassDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassDeclaration\", node, opts);\n  }\n\n  function assertClassExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassExpression\", node, opts);\n  }\n\n  function assertExportAllDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportAllDeclaration\", node, opts);\n  }\n\n  function assertExportDefaultDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDefaultDeclaration\", node, opts);\n  }\n\n  function assertExportNamedDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportNamedDeclaration\", node, opts);\n  }\n\n  function assertExportSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportSpecifier\", node, opts);\n  }\n\n  function assertForOfStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForOfStatement\", node, opts);\n  }\n\n  function assertImportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportDeclaration\", node, opts);\n  }\n\n  function assertImportDefaultSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportDefaultSpecifier\", node, opts);\n  }\n\n  function assertImportNamespaceSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportNamespaceSpecifier\", node, opts);\n  }\n\n  function assertImportSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportSpecifier\", node, opts);\n  }\n\n  function assertMetaProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MetaProperty\", node, opts);\n  }\n\n  function assertClassMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassMethod\", node, opts);\n  }\n\n  function assertObjectPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectPattern\", node, opts);\n  }\n\n  function assertSpreadElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SpreadElement\", node, opts);\n  }\n\n  function assertSuper(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Super\", node, opts);\n  }\n\n  function assertTaggedTemplateExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TaggedTemplateExpression\", node, opts);\n  }\n\n  function assertTemplateElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TemplateElement\", node, opts);\n  }\n\n  function assertTemplateLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TemplateLiteral\", node, opts);\n  }\n\n  function assertYieldExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"YieldExpression\", node, opts);\n  }\n\n  function assertAnyTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AnyTypeAnnotation\", node, opts);\n  }\n\n  function assertArrayTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayTypeAnnotation\", node, opts);\n  }\n\n  function assertBooleanTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanTypeAnnotation\", node, opts);\n  }\n\n  function assertBooleanLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertNullLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertClassImplements(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassImplements\", node, opts);\n  }\n\n  function assertDeclareClass(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareClass\", node, opts);\n  }\n\n  function assertDeclareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareFunction\", node, opts);\n  }\n\n  function assertDeclareInterface(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareInterface\", node, opts);\n  }\n\n  function assertDeclareModule(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareModule\", node, opts);\n  }\n\n  function assertDeclareModuleExports(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareModuleExports\", node, opts);\n  }\n\n  function assertDeclareTypeAlias(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareTypeAlias\", node, opts);\n  }\n\n  function assertDeclareOpaqueType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareOpaqueType\", node, opts);\n  }\n\n  function assertDeclareVariable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareVariable\", node, opts);\n  }\n\n  function assertDeclareExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareExportDeclaration\", node, opts);\n  }\n\n  function assertDeclareExportAllDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareExportAllDeclaration\", node, opts);\n  }\n\n  function assertDeclaredPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclaredPredicate\", node, opts);\n  }\n\n  function assertExistsTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExistsTypeAnnotation\", node, opts);\n  }\n\n  function assertFunctionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionTypeAnnotation\", node, opts);\n  }\n\n  function assertFunctionTypeParam(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionTypeParam\", node, opts);\n  }\n\n  function assertGenericTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"GenericTypeAnnotation\", node, opts);\n  }\n\n  function assertInferredPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InferredPredicate\", node, opts);\n  }\n\n  function assertInterfaceExtends(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceExtends\", node, opts);\n  }\n\n  function assertInterfaceDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceDeclaration\", node, opts);\n  }\n\n  function assertInterfaceTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceTypeAnnotation\", node, opts);\n  }\n\n  function assertIntersectionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"IntersectionTypeAnnotation\", node, opts);\n  }\n\n  function assertMixedTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MixedTypeAnnotation\", node, opts);\n  }\n\n  function assertEmptyTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EmptyTypeAnnotation\", node, opts);\n  }\n\n  function assertNullableTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullableTypeAnnotation\", node, opts);\n  }\n\n  function assertNumberLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumberLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertNumberTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumberTypeAnnotation\", node, opts);\n  }\n\n  function assertObjectTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeAnnotation\", node, opts);\n  }\n\n  function assertObjectTypeInternalSlot(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeInternalSlot\", node, opts);\n  }\n\n  function assertObjectTypeCallProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeCallProperty\", node, opts);\n  }\n\n  function assertObjectTypeIndexer(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeIndexer\", node, opts);\n  }\n\n  function assertObjectTypeProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeProperty\", node, opts);\n  }\n\n  function assertObjectTypeSpreadProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeSpreadProperty\", node, opts);\n  }\n\n  function assertOpaqueType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OpaqueType\", node, opts);\n  }\n\n  function assertQualifiedTypeIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"QualifiedTypeIdentifier\", node, opts);\n  }\n\n  function assertStringLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertStringTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringTypeAnnotation\", node, opts);\n  }\n\n  function assertThisTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThisTypeAnnotation\", node, opts);\n  }\n\n  function assertTupleTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TupleTypeAnnotation\", node, opts);\n  }\n\n  function assertTypeofTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeofTypeAnnotation\", node, opts);\n  }\n\n  function assertTypeAlias(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeAlias\", node, opts);\n  }\n\n  function assertTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeAnnotation\", node, opts);\n  }\n\n  function assertTypeCastExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeCastExpression\", node, opts);\n  }\n\n  function assertTypeParameter(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameter\", node, opts);\n  }\n\n  function assertTypeParameterDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameterDeclaration\", node, opts);\n  }\n\n  function assertTypeParameterInstantiation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameterInstantiation\", node, opts);\n  }\n\n  function assertUnionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnionTypeAnnotation\", node, opts);\n  }\n\n  function assertVariance(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Variance\", node, opts);\n  }\n\n  function assertVoidTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VoidTypeAnnotation\", node, opts);\n  }\n\n  function assertJSXAttribute(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXAttribute\", node, opts);\n  }\n\n  function assertJSXClosingElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXClosingElement\", node, opts);\n  }\n\n  function assertJSXElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXElement\", node, opts);\n  }\n\n  function assertJSXEmptyExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXEmptyExpression\", node, opts);\n  }\n\n  function assertJSXExpressionContainer(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXExpressionContainer\", node, opts);\n  }\n\n  function assertJSXSpreadChild(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXSpreadChild\", node, opts);\n  }\n\n  function assertJSXIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXIdentifier\", node, opts);\n  }\n\n  function assertJSXMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXMemberExpression\", node, opts);\n  }\n\n  function assertJSXNamespacedName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXNamespacedName\", node, opts);\n  }\n\n  function assertJSXOpeningElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXOpeningElement\", node, opts);\n  }\n\n  function assertJSXSpreadAttribute(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXSpreadAttribute\", node, opts);\n  }\n\n  function assertJSXText(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXText\", node, opts);\n  }\n\n  function assertJSXFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXFragment\", node, opts);\n  }\n\n  function assertJSXOpeningFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXOpeningFragment\", node, opts);\n  }\n\n  function assertJSXClosingFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXClosingFragment\", node, opts);\n  }\n\n  function assertNoop(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Noop\", node, opts);\n  }\n\n  function assertPlaceholder(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Placeholder\", node, opts);\n  }\n\n  function assertArgumentPlaceholder(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArgumentPlaceholder\", node, opts);\n  }\n\n  function assertAwaitExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AwaitExpression\", node, opts);\n  }\n\n  function assertBindExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BindExpression\", node, opts);\n  }\n\n  function assertClassProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassProperty\", node, opts);\n  }\n\n  function assertOptionalMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OptionalMemberExpression\", node, opts);\n  }\n\n  function assertPipelineTopicExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelineTopicExpression\", node, opts);\n  }\n\n  function assertPipelineBareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelineBareFunction\", node, opts);\n  }\n\n  function assertPipelinePrimaryTopicReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelinePrimaryTopicReference\", node, opts);\n  }\n\n  function assertOptionalCallExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OptionalCallExpression\", node, opts);\n  }\n\n  function assertClassPrivateProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassPrivateProperty\", node, opts);\n  }\n\n  function assertClassPrivateMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassPrivateMethod\", node, opts);\n  }\n\n  function assertImport(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Import\", node, opts);\n  }\n\n  function assertDecorator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Decorator\", node, opts);\n  }\n\n  function assertDoExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DoExpression\", node, opts);\n  }\n\n  function assertExportDefaultSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDefaultSpecifier\", node, opts);\n  }\n\n  function assertExportNamespaceSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportNamespaceSpecifier\", node, opts);\n  }\n\n  function assertPrivateName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PrivateName\", node, opts);\n  }\n\n  function assertBigIntLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BigIntLiteral\", node, opts);\n  }\n\n  function assertTSParameterProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSParameterProperty\", node, opts);\n  }\n\n  function assertTSDeclareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSDeclareFunction\", node, opts);\n  }\n\n  function assertTSDeclareMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSDeclareMethod\", node, opts);\n  }\n\n  function assertTSQualifiedName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSQualifiedName\", node, opts);\n  }\n\n  function assertTSCallSignatureDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSCallSignatureDeclaration\", node, opts);\n  }\n\n  function assertTSConstructSignatureDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConstructSignatureDeclaration\", node, opts);\n  }\n\n  function assertTSPropertySignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSPropertySignature\", node, opts);\n  }\n\n  function assertTSMethodSignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSMethodSignature\", node, opts);\n  }\n\n  function assertTSIndexSignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIndexSignature\", node, opts);\n  }\n\n  function assertTSAnyKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSAnyKeyword\", node, opts);\n  }\n\n  function assertTSUnknownKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUnknownKeyword\", node, opts);\n  }\n\n  function assertTSNumberKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNumberKeyword\", node, opts);\n  }\n\n  function assertTSObjectKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSObjectKeyword\", node, opts);\n  }\n\n  function assertTSBooleanKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSBooleanKeyword\", node, opts);\n  }\n\n  function assertTSStringKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSStringKeyword\", node, opts);\n  }\n\n  function assertTSSymbolKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSSymbolKeyword\", node, opts);\n  }\n\n  function assertTSVoidKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSVoidKeyword\", node, opts);\n  }\n\n  function assertTSUndefinedKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUndefinedKeyword\", node, opts);\n  }\n\n  function assertTSNullKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNullKeyword\", node, opts);\n  }\n\n  function assertTSNeverKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNeverKeyword\", node, opts);\n  }\n\n  function assertTSThisType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSThisType\", node, opts);\n  }\n\n  function assertTSFunctionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSFunctionType\", node, opts);\n  }\n\n  function assertTSConstructorType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConstructorType\", node, opts);\n  }\n\n  function assertTSTypeReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeReference\", node, opts);\n  }\n\n  function assertTSTypePredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypePredicate\", node, opts);\n  }\n\n  function assertTSTypeQuery(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeQuery\", node, opts);\n  }\n\n  function assertTSTypeLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeLiteral\", node, opts);\n  }\n\n  function assertTSArrayType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSArrayType\", node, opts);\n  }\n\n  function assertTSTupleType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTupleType\", node, opts);\n  }\n\n  function assertTSOptionalType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSOptionalType\", node, opts);\n  }\n\n  function assertTSRestType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSRestType\", node, opts);\n  }\n\n  function assertTSUnionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUnionType\", node, opts);\n  }\n\n  function assertTSIntersectionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIntersectionType\", node, opts);\n  }\n\n  function assertTSConditionalType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConditionalType\", node, opts);\n  }\n\n  function assertTSInferType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInferType\", node, opts);\n  }\n\n  function assertTSParenthesizedType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSParenthesizedType\", node, opts);\n  }\n\n  function assertTSTypeOperator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeOperator\", node, opts);\n  }\n\n  function assertTSIndexedAccessType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIndexedAccessType\", node, opts);\n  }\n\n  function assertTSMappedType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSMappedType\", node, opts);\n  }\n\n  function assertTSLiteralType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSLiteralType\", node, opts);\n  }\n\n  function assertTSExpressionWithTypeArguments(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExpressionWithTypeArguments\", node, opts);\n  }\n\n  function assertTSInterfaceDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInterfaceDeclaration\", node, opts);\n  }\n\n  function assertTSInterfaceBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInterfaceBody\", node, opts);\n  }\n\n  function assertTSTypeAliasDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAliasDeclaration\", node, opts);\n  }\n\n  function assertTSAsExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSAsExpression\", node, opts);\n  }\n\n  function assertTSTypeAssertion(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAssertion\", node, opts);\n  }\n\n  function assertTSEnumDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEnumDeclaration\", node, opts);\n  }\n\n  function assertTSEnumMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEnumMember\", node, opts);\n  }\n\n  function assertTSModuleDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSModuleDeclaration\", node, opts);\n  }\n\n  function assertTSModuleBlock(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSModuleBlock\", node, opts);\n  }\n\n  function assertTSImportType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSImportType\", node, opts);\n  }\n\n  function assertTSImportEqualsDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSImportEqualsDeclaration\", node, opts);\n  }\n\n  function assertTSExternalModuleReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExternalModuleReference\", node, opts);\n  }\n\n  function assertTSNonNullExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNonNullExpression\", node, opts);\n  }\n\n  function assertTSExportAssignment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExportAssignment\", node, opts);\n  }\n\n  function assertTSNamespaceExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNamespaceExportDeclaration\", node, opts);\n  }\n\n  function assertTSTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAnnotation\", node, opts);\n  }\n\n  function assertTSTypeParameterInstantiation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameterInstantiation\", node, opts);\n  }\n\n  function assertTSTypeParameterDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameterDeclaration\", node, opts);\n  }\n\n  function assertTSTypeParameter(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameter\", node, opts);\n  }\n\n  function assertExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Expression\", node, opts);\n  }\n\n  function assertBinary(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Binary\", node, opts);\n  }\n\n  function assertScopable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Scopable\", node, opts);\n  }\n\n  function assertBlockParent(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BlockParent\", node, opts);\n  }\n\n  function assertBlock(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Block\", node, opts);\n  }\n\n  function assertStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Statement\", node, opts);\n  }\n\n  function assertTerminatorless(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Terminatorless\", node, opts);\n  }\n\n  function assertCompletionStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CompletionStatement\", node, opts);\n  }\n\n  function assertConditional(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Conditional\", node, opts);\n  }\n\n  function assertLoop(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Loop\", node, opts);\n  }\n\n  function assertWhile(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"While\", node, opts);\n  }\n\n  function assertExpressionWrapper(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExpressionWrapper\", node, opts);\n  }\n\n  function assertFor(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"For\", node, opts);\n  }\n\n  function assertForXStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForXStatement\", node, opts);\n  }\n\n  function assertFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Function\", node, opts);\n  }\n\n  function assertFunctionParent(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionParent\", node, opts);\n  }\n\n  function assertPureish(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Pureish\", node, opts);\n  }\n\n  function assertDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Declaration\", node, opts);\n  }\n\n  function assertPatternLike(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PatternLike\", node, opts);\n  }\n\n  function assertLVal(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LVal\", node, opts);\n  }\n\n  function assertTSEntityName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEntityName\", node, opts);\n  }\n\n  function assertLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Literal\", node, opts);\n  }\n\n  function assertImmutable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Immutable\", node, opts);\n  }\n\n  function assertUserWhitespacable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UserWhitespacable\", node, opts);\n  }\n\n  function assertMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Method\", node, opts);\n  }\n\n  function assertObjectMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectMember\", node, opts);\n  }\n\n  function assertProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Property\", node, opts);\n  }\n\n  function assertUnaryLike(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnaryLike\", node, opts);\n  }\n\n  function assertPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Pattern\", node, opts);\n  }\n\n  function assertClass(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Class\", node, opts);\n  }\n\n  function assertModuleDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ModuleDeclaration\", node, opts);\n  }\n\n  function assertExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDeclaration\", node, opts);\n  }\n\n  function assertModuleSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ModuleSpecifier\", node, opts);\n  }\n\n  function assertFlow(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Flow\", node, opts);\n  }\n\n  function assertFlowType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowType\", node, opts);\n  }\n\n  function assertFlowBaseAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowBaseAnnotation\", node, opts);\n  }\n\n  function assertFlowDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowDeclaration\", node, opts);\n  }\n\n  function assertFlowPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowPredicate\", node, opts);\n  }\n\n  function assertJSX(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSX\", node, opts);\n  }\n\n  function assertPrivate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Private\", node, opts);\n  }\n\n  function assertTSTypeElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeElement\", node, opts);\n  }\n\n  function assertTSType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSType\", node, opts);\n  }\n\n  function assertNumberLiteral(node, opts) {\n    console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n    assert(\"NumberLiteral\", node, opts);\n  }\n\n  function assertRegexLiteral(node, opts) {\n    console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n    assert(\"RegexLiteral\", node, opts);\n  }\n\n  function assertRestProperty(node, opts) {\n    console.trace(\"The node type RestProperty has been renamed to RestElement\");\n    assert(\"RestProperty\", node, opts);\n  }\n\n  function assertSpreadProperty(node, opts) {\n    console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n    assert(\"SpreadProperty\", node, opts);\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"assertArrayExpression"],[7,31,6,0],[7,34,6,32,"assertArrayExpression"],[7,55,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"assertAssignmentExpression"],[8,36,7,0],[8,39,7,37,"assertAssignmentExpression"],[8,65,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"assertBinaryExpression"],[9,32,8,0],[9,35,8,33,"assertBinaryExpression"],[9,57,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"assertInterpreterDirective"],[10,36,9,0],[10,39,9,37,"assertInterpreterDirective"],[10,65,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"assertDirective"],[11,25,10,0],[11,28,10,26,"assertDirective"],[11,43,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"assertDirectiveLiteral"],[12,32,11,0],[12,35,11,33,"assertDirectiveLiteral"],[12,57,11,0],[13,0,12,0,"exports"],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"assertBlockStatement"],[13,30,12,0],[13,33,12,31,"assertBlockStatement"],[13,53,12,0],[14,0,13,0,"exports"],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"assertBreakStatement"],[14,30,13,0],[14,33,13,31,"assertBreakStatement"],[14,53,13,0],[15,0,14,0,"exports"],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"assertCallExpression"],[15,30,14,0],[15,33,14,31,"assertCallExpression"],[15,53,14,0],[16,0,15,0,"exports"],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"assertCatchClause"],[16,27,15,0],[16,30,15,28,"assertCatchClause"],[16,47,15,0],[17,0,16,0,"exports"],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"assertConditionalExpression"],[17,37,16,0],[17,40,16,38,"assertConditionalExpression"],[17,67,16,0],[18,0,17,0,"exports"],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"assertContinueStatement"],[18,33,17,0],[18,36,17,34,"assertContinueStatement"],[18,59,17,0],[19,0,18,0,"exports"],[19,2,18,0,"exports"],[19,9,18,7],[19,10,18,8,"assertDebuggerStatement"],[19,33,18,0],[19,36,18,34,"assertDebuggerStatement"],[19,59,18,0],[20,0,19,0,"exports"],[20,2,19,0,"exports"],[20,9,19,7],[20,10,19,8,"assertDoWhileStatement"],[20,32,19,0],[20,35,19,33,"assertDoWhileStatement"],[20,57,19,0],[21,0,20,0,"exports"],[21,2,20,0,"exports"],[21,9,20,7],[21,10,20,8,"assertEmptyStatement"],[21,30,20,0],[21,33,20,31,"assertEmptyStatement"],[21,53,20,0],[22,0,21,0,"exports"],[22,2,21,0,"exports"],[22,9,21,7],[22,10,21,8,"assertExpressionStatement"],[22,35,21,0],[22,38,21,36,"assertExpressionStatement"],[22,63,21,0],[23,0,22,0,"exports"],[23,2,22,0,"exports"],[23,9,22,7],[23,10,22,8,"assertFile"],[23,20,22,0],[23,23,22,21,"assertFile"],[23,33,22,0],[24,0,23,0,"exports"],[24,2,23,0,"exports"],[24,9,23,7],[24,10,23,8,"assertForInStatement"],[24,30,23,0],[24,33,23,31,"assertForInStatement"],[24,53,23,0],[25,0,24,0,"exports"],[25,2,24,0,"exports"],[25,9,24,7],[25,10,24,8,"assertForStatement"],[25,28,24,0],[25,31,24,29,"assertForStatement"],[25,49,24,0],[26,0,25,0,"exports"],[26,2,25,0,"exports"],[26,9,25,7],[26,10,25,8,"assertFunctionDeclaration"],[26,35,25,0],[26,38,25,36,"assertFunctionDeclaration"],[26,63,25,0],[27,0,26,0,"exports"],[27,2,26,0,"exports"],[27,9,26,7],[27,10,26,8,"assertFunctionExpression"],[27,34,26,0],[27,37,26,35,"assertFunctionExpression"],[27,61,26,0],[28,0,27,0,"exports"],[28,2,27,0,"exports"],[28,9,27,7],[28,10,27,8,"assertIdentifier"],[28,26,27,0],[28,29,27,27,"assertIdentifier"],[28,45,27,0],[29,0,28,0,"exports"],[29,2,28,0,"exports"],[29,9,28,7],[29,10,28,8,"assertIfStatement"],[29,27,28,0],[29,30,28,28,"assertIfStatement"],[29,47,28,0],[30,0,29,0,"exports"],[30,2,29,0,"exports"],[30,9,29,7],[30,10,29,8,"assertLabeledStatement"],[30,32,29,0],[30,35,29,33,"assertLabeledStatement"],[30,57,29,0],[31,0,30,0,"exports"],[31,2,30,0,"exports"],[31,9,30,7],[31,10,30,8,"assertStringLiteral"],[31,29,30,0],[31,32,30,30,"assertStringLiteral"],[31,51,30,0],[32,0,31,0,"exports"],[32,2,31,0,"exports"],[32,9,31,7],[32,10,31,8,"assertNumericLiteral"],[32,30,31,0],[32,33,31,31,"assertNumericLiteral"],[32,53,31,0],[33,0,32,0,"exports"],[33,2,32,0,"exports"],[33,9,32,7],[33,10,32,8,"assertNullLiteral"],[33,27,32,0],[33,30,32,28,"assertNullLiteral"],[33,47,32,0],[34,0,33,0,"exports"],[34,2,33,0,"exports"],[34,9,33,7],[34,10,33,8,"assertBooleanLiteral"],[34,30,33,0],[34,33,33,31,"assertBooleanLiteral"],[34,53,33,0],[35,0,34,0,"exports"],[35,2,34,0,"exports"],[35,9,34,7],[35,10,34,8,"assertRegExpLiteral"],[35,29,34,0],[35,32,34,30,"assertRegExpLiteral"],[35,51,34,0],[36,0,35,0,"exports"],[36,2,35,0,"exports"],[36,9,35,7],[36,10,35,8,"assertLogicalExpression"],[36,33,35,0],[36,36,35,34,"assertLogicalExpression"],[36,59,35,0],[37,0,36,0,"exports"],[37,2,36,0,"exports"],[37,9,36,7],[37,10,36,8,"assertMemberExpression"],[37,32,36,0],[37,35,36,33,"assertMemberExpression"],[37,57,36,0],[38,0,37,0,"exports"],[38,2,37,0,"exports"],[38,9,37,7],[38,10,37,8,"assertNewExpression"],[38,29,37,0],[38,32,37,30,"assertNewExpression"],[38,51,37,0],[39,0,38,0,"exports"],[39,2,38,0,"exports"],[39,9,38,7],[39,10,38,8,"assertProgram"],[39,23,38,0],[39,26,38,24,"assertProgram"],[39,39,38,0],[40,0,39,0,"exports"],[40,2,39,0,"exports"],[40,9,39,7],[40,10,39,8,"assertObjectExpression"],[40,32,39,0],[40,35,39,33,"assertObjectExpression"],[40,57,39,0],[41,0,40,0,"exports"],[41,2,40,0,"exports"],[41,9,40,7],[41,10,40,8,"assertObjectMethod"],[41,28,40,0],[41,31,40,29,"assertObjectMethod"],[41,49,40,0],[42,0,41,0,"exports"],[42,2,41,0,"exports"],[42,9,41,7],[42,10,41,8,"assertObjectProperty"],[42,30,41,0],[42,33,41,31,"assertObjectProperty"],[42,53,41,0],[43,0,42,0,"exports"],[43,2,42,0,"exports"],[43,9,42,7],[43,10,42,8,"assertRestElement"],[43,27,42,0],[43,30,42,28,"assertRestElement"],[43,47,42,0],[44,0,43,0,"exports"],[44,2,43,0,"exports"],[44,9,43,7],[44,10,43,8,"assertReturnStatement"],[44,31,43,0],[44,34,43,32,"assertReturnStatement"],[44,55,43,0],[45,0,44,0,"exports"],[45,2,44,0,"exports"],[45,9,44,7],[45,10,44,8,"assertSequenceExpression"],[45,34,44,0],[45,37,44,35,"assertSequenceExpression"],[45,61,44,0],[46,0,45,0,"exports"],[46,2,45,0,"exports"],[46,9,45,7],[46,10,45,8,"assertParenthesizedExpression"],[46,39,45,0],[46,42,45,40,"assertParenthesizedExpression"],[46,71,45,0],[47,0,46,0,"exports"],[47,2,46,0,"exports"],[47,9,46,7],[47,10,46,8,"assertSwitchCase"],[47,26,46,0],[47,29,46,27,"assertSwitchCase"],[47,45,46,0],[48,0,47,0,"exports"],[48,2,47,0,"exports"],[48,9,47,7],[48,10,47,8,"assertSwitchStatement"],[48,31,47,0],[48,34,47,32,"assertSwitchStatement"],[48,55,47,0],[49,0,48,0,"exports"],[49,2,48,0,"exports"],[49,9,48,7],[49,10,48,8,"assertThisExpression"],[49,30,48,0],[49,33,48,31,"assertThisExpression"],[49,53,48,0],[50,0,49,0,"exports"],[50,2,49,0,"exports"],[50,9,49,7],[50,10,49,8,"assertThrowStatement"],[50,30,49,0],[50,33,49,31,"assertThrowStatement"],[50,53,49,0],[51,0,50,0,"exports"],[51,2,50,0,"exports"],[51,9,50,7],[51,10,50,8,"assertTryStatement"],[51,28,50,0],[51,31,50,29,"assertTryStatement"],[51,49,50,0],[52,0,51,0,"exports"],[52,2,51,0,"exports"],[52,9,51,7],[52,10,51,8,"assertUnaryExpression"],[52,31,51,0],[52,34,51,32,"assertUnaryExpression"],[52,55,51,0],[53,0,52,0,"exports"],[53,2,52,0,"exports"],[53,9,52,7],[53,10,52,8,"assertUpdateExpression"],[53,32,52,0],[53,35,52,33,"assertUpdateExpression"],[53,57,52,0],[54,0,53,0,"exports"],[54,2,53,0,"exports"],[54,9,53,7],[54,10,53,8,"assertVariableDeclaration"],[54,35,53,0],[54,38,53,36,"assertVariableDeclaration"],[54,63,53,0],[55,0,54,0,"exports"],[55,2,54,0,"exports"],[55,9,54,7],[55,10,54,8,"assertVariableDeclarator"],[55,34,54,0],[55,37,54,35,"assertVariableDeclarator"],[55,61,54,0],[56,0,55,0,"exports"],[56,2,55,0,"exports"],[56,9,55,7],[56,10,55,8,"assertWhileStatement"],[56,30,55,0],[56,33,55,31,"assertWhileStatement"],[56,53,55,0],[57,0,56,0,"exports"],[57,2,56,0,"exports"],[57,9,56,7],[57,10,56,8,"assertWithStatement"],[57,29,56,0],[57,32,56,30,"assertWithStatement"],[57,51,56,0],[58,0,57,0,"exports"],[58,2,57,0,"exports"],[58,9,57,7],[58,10,57,8,"assertAssignmentPattern"],[58,33,57,0],[58,36,57,34,"assertAssignmentPattern"],[58,59,57,0],[59,0,58,0,"exports"],[59,2,58,0,"exports"],[59,9,58,7],[59,10,58,8,"assertArrayPattern"],[59,28,58,0],[59,31,58,29,"assertArrayPattern"],[59,49,58,0],[60,0,59,0,"exports"],[60,2,59,0,"exports"],[60,9,59,7],[60,10,59,8,"assertArrowFunctionExpression"],[60,39,59,0],[60,42,59,40,"assertArrowFunctionExpression"],[60,71,59,0],[61,0,60,0,"exports"],[61,2,60,0,"exports"],[61,9,60,7],[61,10,60,8,"assertClassBody"],[61,25,60,0],[61,28,60,26,"assertClassBody"],[61,43,60,0],[62,0,61,0,"exports"],[62,2,61,0,"exports"],[62,9,61,7],[62,10,61,8,"assertClassDeclaration"],[62,32,61,0],[62,35,61,33,"assertClassDeclaration"],[62,57,61,0],[63,0,62,0,"exports"],[63,2,62,0,"exports"],[63,9,62,7],[63,10,62,8,"assertClassExpression"],[63,31,62,0],[63,34,62,32,"assertClassExpression"],[63,55,62,0],[64,0,63,0,"exports"],[64,2,63,0,"exports"],[64,9,63,7],[64,10,63,8,"assertExportAllDeclaration"],[64,36,63,0],[64,39,63,37,"assertExportAllDeclaration"],[64,65,63,0],[65,0,64,0,"exports"],[65,2,64,0,"exports"],[65,9,64,7],[65,10,64,8,"assertExportDefaultDeclaration"],[65,40,64,0],[65,43,64,41,"assertExportDefaultDeclaration"],[65,73,64,0],[66,0,65,0,"exports"],[66,2,65,0,"exports"],[66,9,65,7],[66,10,65,8,"assertExportNamedDeclaration"],[66,38,65,0],[66,41,65,39,"assertExportNamedDeclaration"],[66,69,65,0],[67,0,66,0,"exports"],[67,2,66,0,"exports"],[67,9,66,7],[67,10,66,8,"assertExportSpecifier"],[67,31,66,0],[67,34,66,32,"assertExportSpecifier"],[67,55,66,0],[68,0,67,0,"exports"],[68,2,67,0,"exports"],[68,9,67,7],[68,10,67,8,"assertForOfStatement"],[68,30,67,0],[68,33,67,31,"assertForOfStatement"],[68,53,67,0],[69,0,68,0,"exports"],[69,2,68,0,"exports"],[69,9,68,7],[69,10,68,8,"assertImportDeclaration"],[69,33,68,0],[69,36,68,34,"assertImportDeclaration"],[69,59,68,0],[70,0,69,0,"exports"],[70,2,69,0,"exports"],[70,9,69,7],[70,10,69,8,"assertImportDefaultSpecifier"],[70,38,69,0],[70,41,69,39,"assertImportDefaultSpecifier"],[70,69,69,0],[71,0,70,0,"exports"],[71,2,70,0,"exports"],[71,9,70,7],[71,10,70,8,"assertImportNamespaceSpecifier"],[71,40,70,0],[71,43,70,41,"assertImportNamespaceSpecifier"],[71,73,70,0],[72,0,71,0,"exports"],[72,2,71,0,"exports"],[72,9,71,7],[72,10,71,8,"assertImportSpecifier"],[72,31,71,0],[72,34,71,32,"assertImportSpecifier"],[72,55,71,0],[73,0,72,0,"exports"],[73,2,72,0,"exports"],[73,9,72,7],[73,10,72,8,"assertMetaProperty"],[73,28,72,0],[73,31,72,29,"assertMetaProperty"],[73,49,72,0],[74,0,73,0,"exports"],[74,2,73,0,"exports"],[74,9,73,7],[74,10,73,8,"assertClassMethod"],[74,27,73,0],[74,30,73,28,"assertClassMethod"],[74,47,73,0],[75,0,74,0,"exports"],[75,2,74,0,"exports"],[75,9,74,7],[75,10,74,8,"assertObjectPattern"],[75,29,74,0],[75,32,74,30,"assertObjectPattern"],[75,51,74,0],[76,0,75,0,"exports"],[76,2,75,0,"exports"],[76,9,75,7],[76,10,75,8,"assertSpreadElement"],[76,29,75,0],[76,32,75,30,"assertSpreadElement"],[76,51,75,0],[77,0,76,0,"exports"],[77,2,76,0,"exports"],[77,9,76,7],[77,10,76,8,"assertSuper"],[77,21,76,0],[77,24,76,22,"assertSuper"],[77,35,76,0],[78,0,77,0,"exports"],[78,2,77,0,"exports"],[78,9,77,7],[78,10,77,8,"assertTaggedTemplateExpression"],[78,40,77,0],[78,43,77,41,"assertTaggedTemplateExpression"],[78,73,77,0],[79,0,78,0,"exports"],[79,2,78,0,"exports"],[79,9,78,7],[79,10,78,8,"assertTemplateElement"],[79,31,78,0],[79,34,78,32,"assertTemplateElement"],[79,55,78,0],[80,0,79,0,"exports"],[80,2,79,0,"exports"],[80,9,79,7],[80,10,79,8,"assertTemplateLiteral"],[80,31,79,0],[80,34,79,32,"assertTemplateLiteral"],[80,55,79,0],[81,0,80,0,"exports"],[81,2,80,0,"exports"],[81,9,80,7],[81,10,80,8,"assertYieldExpression"],[81,31,80,0],[81,34,80,32,"assertYieldExpression"],[81,55,80,0],[82,0,81,0,"exports"],[82,2,81,0,"exports"],[82,9,81,7],[82,10,81,8,"assertAnyTypeAnnotation"],[82,33,81,0],[82,36,81,34,"assertAnyTypeAnnotation"],[82,59,81,0],[83,0,82,0,"exports"],[83,2,82,0,"exports"],[83,9,82,7],[83,10,82,8,"assertArrayTypeAnnotation"],[83,35,82,0],[83,38,82,36,"assertArrayTypeAnnotation"],[83,63,82,0],[84,0,83,0,"exports"],[84,2,83,0,"exports"],[84,9,83,7],[84,10,83,8,"assertBooleanTypeAnnotation"],[84,37,83,0],[84,40,83,38,"assertBooleanTypeAnnotation"],[84,67,83,0],[85,0,84,0,"exports"],[85,2,84,0,"exports"],[85,9,84,7],[85,10,84,8,"assertBooleanLiteralTypeAnnotation"],[85,44,84,0],[85,47,84,45,"assertBooleanLiteralTypeAnnotation"],[85,81,84,0],[86,0,85,0,"exports"],[86,2,85,0,"exports"],[86,9,85,7],[86,10,85,8,"assertNullLiteralTypeAnnotation"],[86,41,85,0],[86,44,85,42,"assertNullLiteralTypeAnnotation"],[86,75,85,0],[87,0,86,0,"exports"],[87,2,86,0,"exports"],[87,9,86,7],[87,10,86,8,"assertClassImplements"],[87,31,86,0],[87,34,86,32,"assertClassImplements"],[87,55,86,0],[88,0,87,0,"exports"],[88,2,87,0,"exports"],[88,9,87,7],[88,10,87,8,"assertDeclareClass"],[88,28,87,0],[88,31,87,29,"assertDeclareClass"],[88,49,87,0],[89,0,88,0,"exports"],[89,2,88,0,"exports"],[89,9,88,7],[89,10,88,8,"assertDeclareFunction"],[89,31,88,0],[89,34,88,32,"assertDeclareFunction"],[89,55,88,0],[90,0,89,0,"exports"],[90,2,89,0,"exports"],[90,9,89,7],[90,10,89,8,"assertDeclareInterface"],[90,32,89,0],[90,35,89,33,"assertDeclareInterface"],[90,57,89,0],[91,0,90,0,"exports"],[91,2,90,0,"exports"],[91,9,90,7],[91,10,90,8,"assertDeclareModule"],[91,29,90,0],[91,32,90,30,"assertDeclareModule"],[91,51,90,0],[92,0,91,0,"exports"],[92,2,91,0,"exports"],[92,9,91,7],[92,10,91,8,"assertDeclareModuleExports"],[92,36,91,0],[92,39,91,37,"assertDeclareModuleExports"],[92,65,91,0],[93,0,92,0,"exports"],[93,2,92,0,"exports"],[93,9,92,7],[93,10,92,8,"assertDeclareTypeAlias"],[93,32,92,0],[93,35,92,33,"assertDeclareTypeAlias"],[93,57,92,0],[94,0,93,0,"exports"],[94,2,93,0,"exports"],[94,9,93,7],[94,10,93,8,"assertDeclareOpaqueType"],[94,33,93,0],[94,36,93,34,"assertDeclareOpaqueType"],[94,59,93,0],[95,0,94,0,"exports"],[95,2,94,0,"exports"],[95,9,94,7],[95,10,94,8,"assertDeclareVariable"],[95,31,94,0],[95,34,94,32,"assertDeclareVariable"],[95,55,94,0],[96,0,95,0,"exports"],[96,2,95,0,"exports"],[96,9,95,7],[96,10,95,8,"assertDeclareExportDeclaration"],[96,40,95,0],[96,43,95,41,"assertDeclareExportDeclaration"],[96,73,95,0],[97,0,96,0,"exports"],[97,2,96,0,"exports"],[97,9,96,7],[97,10,96,8,"assertDeclareExportAllDeclaration"],[97,43,96,0],[97,46,96,44,"assertDeclareExportAllDeclaration"],[97,79,96,0],[98,0,97,0,"exports"],[98,2,97,0,"exports"],[98,9,97,7],[98,10,97,8,"assertDeclaredPredicate"],[98,33,97,0],[98,36,97,34,"assertDeclaredPredicate"],[98,59,97,0],[99,0,98,0,"exports"],[99,2,98,0,"exports"],[99,9,98,7],[99,10,98,8,"assertExistsTypeAnnotation"],[99,36,98,0],[99,39,98,37,"assertExistsTypeAnnotation"],[99,65,98,0],[100,0,99,0,"exports"],[100,2,99,0,"exports"],[100,9,99,7],[100,10,99,8,"assertFunctionTypeAnnotation"],[100,38,99,0],[100,41,99,39,"assertFunctionTypeAnnotation"],[100,69,99,0],[101,0,100,0,"exports"],[101,2,100,0,"exports"],[101,9,100,7],[101,10,100,8,"assertFunctionTypeParam"],[101,33,100,0],[101,36,100,34,"assertFunctionTypeParam"],[101,59,100,0],[102,0,101,0,"exports"],[102,2,101,0,"exports"],[102,9,101,7],[102,10,101,8,"assertGenericTypeAnnotation"],[102,37,101,0],[102,40,101,38,"assertGenericTypeAnnotation"],[102,67,101,0],[103,0,102,0,"exports"],[103,2,102,0,"exports"],[103,9,102,7],[103,10,102,8,"assertInferredPredicate"],[103,33,102,0],[103,36,102,34,"assertInferredPredicate"],[103,59,102,0],[104,0,103,0,"exports"],[104,2,103,0,"exports"],[104,9,103,7],[104,10,103,8,"assertInterfaceExtends"],[104,32,103,0],[104,35,103,33,"assertInterfaceExtends"],[104,57,103,0],[105,0,104,0,"exports"],[105,2,104,0,"exports"],[105,9,104,7],[105,10,104,8,"assertInterfaceDeclaration"],[105,36,104,0],[105,39,104,37,"assertInterfaceDeclaration"],[105,65,104,0],[106,0,105,0,"exports"],[106,2,105,0,"exports"],[106,9,105,7],[106,10,105,8,"assertInterfaceTypeAnnotation"],[106,39,105,0],[106,42,105,40,"assertInterfaceTypeAnnotation"],[106,71,105,0],[107,0,106,0,"exports"],[107,2,106,0,"exports"],[107,9,106,7],[107,10,106,8,"assertIntersectionTypeAnnotation"],[107,42,106,0],[107,45,106,43,"assertIntersectionTypeAnnotation"],[107,77,106,0],[108,0,107,0,"exports"],[108,2,107,0,"exports"],[108,9,107,7],[108,10,107,8,"assertMixedTypeAnnotation"],[108,35,107,0],[108,38,107,36,"assertMixedTypeAnnotation"],[108,63,107,0],[109,0,108,0,"exports"],[109,2,108,0,"exports"],[109,9,108,7],[109,10,108,8,"assertEmptyTypeAnnotation"],[109,35,108,0],[109,38,108,36,"assertEmptyTypeAnnotation"],[109,63,108,0],[110,0,109,0,"exports"],[110,2,109,0,"exports"],[110,9,109,7],[110,10,109,8,"assertNullableTypeAnnotation"],[110,38,109,0],[110,41,109,39,"assertNullableTypeAnnotation"],[110,69,109,0],[111,0,110,0,"exports"],[111,2,110,0,"exports"],[111,9,110,7],[111,10,110,8,"assertNumberLiteralTypeAnnotation"],[111,43,110,0],[111,46,110,44,"assertNumberLiteralTypeAnnotation"],[111,79,110,0],[112,0,111,0,"exports"],[112,2,111,0,"exports"],[112,9,111,7],[112,10,111,8,"assertNumberTypeAnnotation"],[112,36,111,0],[112,39,111,37,"assertNumberTypeAnnotation"],[112,65,111,0],[113,0,112,0,"exports"],[113,2,112,0,"exports"],[113,9,112,7],[113,10,112,8,"assertObjectTypeAnnotation"],[113,36,112,0],[113,39,112,37,"assertObjectTypeAnnotation"],[113,65,112,0],[114,0,113,0,"exports"],[114,2,113,0,"exports"],[114,9,113,7],[114,10,113,8,"assertObjectTypeInternalSlot"],[114,38,113,0],[114,41,113,39,"assertObjectTypeInternalSlot"],[114,69,113,0],[115,0,114,0,"exports"],[115,2,114,0,"exports"],[115,9,114,7],[115,10,114,8,"assertObjectTypeCallProperty"],[115,38,114,0],[115,41,114,39,"assertObjectTypeCallProperty"],[115,69,114,0],[116,0,115,0,"exports"],[116,2,115,0,"exports"],[116,9,115,7],[116,10,115,8,"assertObjectTypeIndexer"],[116,33,115,0],[116,36,115,34,"assertObjectTypeIndexer"],[116,59,115,0],[117,0,116,0,"exports"],[117,2,116,0,"exports"],[117,9,116,7],[117,10,116,8,"assertObjectTypeProperty"],[117,34,116,0],[117,37,116,35,"assertObjectTypeProperty"],[117,61,116,0],[118,0,117,0,"exports"],[118,2,117,0,"exports"],[118,9,117,7],[118,10,117,8,"assertObjectTypeSpreadProperty"],[118,40,117,0],[118,43,117,41,"assertObjectTypeSpreadProperty"],[118,73,117,0],[119,0,118,0,"exports"],[119,2,118,0,"exports"],[119,9,118,7],[119,10,118,8,"assertOpaqueType"],[119,26,118,0],[119,29,118,27,"assertOpaqueType"],[119,45,118,0],[120,0,119,0,"exports"],[120,2,119,0,"exports"],[120,9,119,7],[120,10,119,8,"assertQualifiedTypeIdentifier"],[120,39,119,0],[120,42,119,40,"assertQualifiedTypeIdentifier"],[120,71,119,0],[121,0,120,0,"exports"],[121,2,120,0,"exports"],[121,9,120,7],[121,10,120,8,"assertStringLiteralTypeAnnotation"],[121,43,120,0],[121,46,120,44,"assertStringLiteralTypeAnnotation"],[121,79,120,0],[122,0,121,0,"exports"],[122,2,121,0,"exports"],[122,9,121,7],[122,10,121,8,"assertStringTypeAnnotation"],[122,36,121,0],[122,39,121,37,"assertStringTypeAnnotation"],[122,65,121,0],[123,0,122,0,"exports"],[123,2,122,0,"exports"],[123,9,122,7],[123,10,122,8,"assertThisTypeAnnotation"],[123,34,122,0],[123,37,122,35,"assertThisTypeAnnotation"],[123,61,122,0],[124,0,123,0,"exports"],[124,2,123,0,"exports"],[124,9,123,7],[124,10,123,8,"assertTupleTypeAnnotation"],[124,35,123,0],[124,38,123,36,"assertTupleTypeAnnotation"],[124,63,123,0],[125,0,124,0,"exports"],[125,2,124,0,"exports"],[125,9,124,7],[125,10,124,8,"assertTypeofTypeAnnotation"],[125,36,124,0],[125,39,124,37,"assertTypeofTypeAnnotation"],[125,65,124,0],[126,0,125,0,"exports"],[126,2,125,0,"exports"],[126,9,125,7],[126,10,125,8,"assertTypeAlias"],[126,25,125,0],[126,28,125,26,"assertTypeAlias"],[126,43,125,0],[127,0,126,0,"exports"],[127,2,126,0,"exports"],[127,9,126,7],[127,10,126,8,"assertTypeAnnotation"],[127,30,126,0],[127,33,126,31,"assertTypeAnnotation"],[127,53,126,0],[128,0,127,0,"exports"],[128,2,127,0,"exports"],[128,9,127,7],[128,10,127,8,"assertTypeCastExpression"],[128,34,127,0],[128,37,127,35,"assertTypeCastExpression"],[128,61,127,0],[129,0,128,0,"exports"],[129,2,128,0,"exports"],[129,9,128,7],[129,10,128,8,"assertTypeParameter"],[129,29,128,0],[129,32,128,30,"assertTypeParameter"],[129,51,128,0],[130,0,129,0,"exports"],[130,2,129,0,"exports"],[130,9,129,7],[130,10,129,8,"assertTypeParameterDeclaration"],[130,40,129,0],[130,43,129,41,"assertTypeParameterDeclaration"],[130,73,129,0],[131,0,130,0,"exports"],[131,2,130,0,"exports"],[131,9,130,7],[131,10,130,8,"assertTypeParameterInstantiation"],[131,42,130,0],[131,45,130,43,"assertTypeParameterInstantiation"],[131,77,130,0],[132,0,131,0,"exports"],[132,2,131,0,"exports"],[132,9,131,7],[132,10,131,8,"assertUnionTypeAnnotation"],[132,35,131,0],[132,38,131,36,"assertUnionTypeAnnotation"],[132,63,131,0],[133,0,132,0,"exports"],[133,2,132,0,"exports"],[133,9,132,7],[133,10,132,8,"assertVariance"],[133,24,132,0],[133,27,132,25,"assertVariance"],[133,41,132,0],[134,0,133,0,"exports"],[134,2,133,0,"exports"],[134,9,133,7],[134,10,133,8,"assertVoidTypeAnnotation"],[134,34,133,0],[134,37,133,35,"assertVoidTypeAnnotation"],[134,61,133,0],[135,0,134,0,"exports"],[135,2,134,0,"exports"],[135,9,134,7],[135,10,134,8,"assertJSXAttribute"],[135,28,134,0],[135,31,134,29,"assertJSXAttribute"],[135,49,134,0],[136,0,135,0,"exports"],[136,2,135,0,"exports"],[136,9,135,7],[136,10,135,8,"assertJSXClosingElement"],[136,33,135,0],[136,36,135,34,"assertJSXClosingElement"],[136,59,135,0],[137,0,136,0,"exports"],[137,2,136,0,"exports"],[137,9,136,7],[137,10,136,8,"assertJSXElement"],[137,26,136,0],[137,29,136,27,"assertJSXElement"],[137,45,136,0],[138,0,137,0,"exports"],[138,2,137,0,"exports"],[138,9,137,7],[138,10,137,8,"assertJSXEmptyExpression"],[138,34,137,0],[138,37,137,35,"assertJSXEmptyExpression"],[138,61,137,0],[139,0,138,0,"exports"],[139,2,138,0,"exports"],[139,9,138,7],[139,10,138,8,"assertJSXExpressionContainer"],[139,38,138,0],[139,41,138,39,"assertJSXExpressionContainer"],[139,69,138,0],[140,0,139,0,"exports"],[140,2,139,0,"exports"],[140,9,139,7],[140,10,139,8,"assertJSXSpreadChild"],[140,30,139,0],[140,33,139,31,"assertJSXSpreadChild"],[140,53,139,0],[141,0,140,0,"exports"],[141,2,140,0,"exports"],[141,9,140,7],[141,10,140,8,"assertJSXIdentifier"],[141,29,140,0],[141,32,140,30,"assertJSXIdentifier"],[141,51,140,0],[142,0,141,0,"exports"],[142,2,141,0,"exports"],[142,9,141,7],[142,10,141,8,"assertJSXMemberExpression"],[142,35,141,0],[142,38,141,36,"assertJSXMemberExpression"],[142,63,141,0],[143,0,142,0,"exports"],[143,2,142,0,"exports"],[143,9,142,7],[143,10,142,8,"assertJSXNamespacedName"],[143,33,142,0],[143,36,142,34,"assertJSXNamespacedName"],[143,59,142,0],[144,0,143,0,"exports"],[144,2,143,0,"exports"],[144,9,143,7],[144,10,143,8,"assertJSXOpeningElement"],[144,33,143,0],[144,36,143,34,"assertJSXOpeningElement"],[144,59,143,0],[145,0,144,0,"exports"],[145,2,144,0,"exports"],[145,9,144,7],[145,10,144,8,"assertJSXSpreadAttribute"],[145,34,144,0],[145,37,144,35,"assertJSXSpreadAttribute"],[145,61,144,0],[146,0,145,0,"exports"],[146,2,145,0,"exports"],[146,9,145,7],[146,10,145,8,"assertJSXText"],[146,23,145,0],[146,26,145,24,"assertJSXText"],[146,39,145,0],[147,0,146,0,"exports"],[147,2,146,0,"exports"],[147,9,146,7],[147,10,146,8,"assertJSXFragment"],[147,27,146,0],[147,30,146,28,"assertJSXFragment"],[147,47,146,0],[148,0,147,0,"exports"],[148,2,147,0,"exports"],[148,9,147,7],[148,10,147,8,"assertJSXOpeningFragment"],[148,34,147,0],[148,37,147,35,"assertJSXOpeningFragment"],[148,61,147,0],[149,0,148,0,"exports"],[149,2,148,0,"exports"],[149,9,148,7],[149,10,148,8,"assertJSXClosingFragment"],[149,34,148,0],[149,37,148,35,"assertJSXClosingFragment"],[149,61,148,0],[150,0,149,0,"exports"],[150,2,149,0,"exports"],[150,9,149,7],[150,10,149,8,"assertNoop"],[150,20,149,0],[150,23,149,21,"assertNoop"],[150,33,149,0],[151,0,150,0,"exports"],[151,2,150,0,"exports"],[151,9,150,7],[151,10,150,8,"assertPlaceholder"],[151,27,150,0],[151,30,150,28,"assertPlaceholder"],[151,47,150,0],[152,0,151,0,"exports"],[152,2,151,0,"exports"],[152,9,151,7],[152,10,151,8,"assertArgumentPlaceholder"],[152,35,151,0],[152,38,151,36,"assertArgumentPlaceholder"],[152,63,151,0],[153,0,152,0,"exports"],[153,2,152,0,"exports"],[153,9,152,7],[153,10,152,8,"assertAwaitExpression"],[153,31,152,0],[153,34,152,32,"assertAwaitExpression"],[153,55,152,0],[154,0,153,0,"exports"],[154,2,153,0,"exports"],[154,9,153,7],[154,10,153,8,"assertBindExpression"],[154,30,153,0],[154,33,153,31,"assertBindExpression"],[154,53,153,0],[155,0,154,0,"exports"],[155,2,154,0,"exports"],[155,9,154,7],[155,10,154,8,"assertClassProperty"],[155,29,154,0],[155,32,154,30,"assertClassProperty"],[155,51,154,0],[156,0,155,0,"exports"],[156,2,155,0,"exports"],[156,9,155,7],[156,10,155,8,"assertOptionalMemberExpression"],[156,40,155,0],[156,43,155,41,"assertOptionalMemberExpression"],[156,73,155,0],[157,0,156,0,"exports"],[157,2,156,0,"exports"],[157,9,156,7],[157,10,156,8,"assertPipelineTopicExpression"],[157,39,156,0],[157,42,156,40,"assertPipelineTopicExpression"],[157,71,156,0],[158,0,157,0,"exports"],[158,2,157,0,"exports"],[158,9,157,7],[158,10,157,8,"assertPipelineBareFunction"],[158,36,157,0],[158,39,157,37,"assertPipelineBareFunction"],[158,65,157,0],[159,0,158,0,"exports"],[159,2,158,0,"exports"],[159,9,158,7],[159,10,158,8,"assertPipelinePrimaryTopicReference"],[159,45,158,0],[159,48,158,46,"assertPipelinePrimaryTopicReference"],[159,83,158,0],[160,0,159,0,"exports"],[160,2,159,0,"exports"],[160,9,159,7],[160,10,159,8,"assertOptionalCallExpression"],[160,38,159,0],[160,41,159,39,"assertOptionalCallExpression"],[160,69,159,0],[161,0,160,0,"exports"],[161,2,160,0,"exports"],[161,9,160,7],[161,10,160,8,"assertClassPrivateProperty"],[161,36,160,0],[161,39,160,37,"assertClassPrivateProperty"],[161,65,160,0],[162,0,161,0,"exports"],[162,2,161,0,"exports"],[162,9,161,7],[162,10,161,8,"assertClassPrivateMethod"],[162,34,161,0],[162,37,161,35,"assertClassPrivateMethod"],[162,61,161,0],[163,0,162,0,"exports"],[163,2,162,0,"exports"],[163,9,162,7],[163,10,162,8,"assertImport"],[163,22,162,0],[163,25,162,23,"assertImport"],[163,37,162,0],[164,0,163,0,"exports"],[164,2,163,0,"exports"],[164,9,163,7],[164,10,163,8,"assertDecorator"],[164,25,163,0],[164,28,163,26,"assertDecorator"],[164,43,163,0],[165,0,164,0,"exports"],[165,2,164,0,"exports"],[165,9,164,7],[165,10,164,8,"assertDoExpression"],[165,28,164,0],[165,31,164,29,"assertDoExpression"],[165,49,164,0],[166,0,165,0,"exports"],[166,2,165,0,"exports"],[166,9,165,7],[166,10,165,8,"assertExportDefaultSpecifier"],[166,38,165,0],[166,41,165,39,"assertExportDefaultSpecifier"],[166,69,165,0],[167,0,166,0,"exports"],[167,2,166,0,"exports"],[167,9,166,7],[167,10,166,8,"assertExportNamespaceSpecifier"],[167,40,166,0],[167,43,166,41,"assertExportNamespaceSpecifier"],[167,73,166,0],[168,0,167,0,"exports"],[168,2,167,0,"exports"],[168,9,167,7],[168,10,167,8,"assertPrivateName"],[168,27,167,0],[168,30,167,28,"assertPrivateName"],[168,47,167,0],[169,0,168,0,"exports"],[169,2,168,0,"exports"],[169,9,168,7],[169,10,168,8,"assertBigIntLiteral"],[169,29,168,0],[169,32,168,30,"assertBigIntLiteral"],[169,51,168,0],[170,0,169,0,"exports"],[170,2,169,0,"exports"],[170,9,169,7],[170,10,169,8,"assertTSParameterProperty"],[170,35,169,0],[170,38,169,36,"assertTSParameterProperty"],[170,63,169,0],[171,0,170,0,"exports"],[171,2,170,0,"exports"],[171,9,170,7],[171,10,170,8,"assertTSDeclareFunction"],[171,33,170,0],[171,36,170,34,"assertTSDeclareFunction"],[171,59,170,0],[172,0,171,0,"exports"],[172,2,171,0,"exports"],[172,9,171,7],[172,10,171,8,"assertTSDeclareMethod"],[172,31,171,0],[172,34,171,32,"assertTSDeclareMethod"],[172,55,171,0],[173,0,172,0,"exports"],[173,2,172,0,"exports"],[173,9,172,7],[173,10,172,8,"assertTSQualifiedName"],[173,31,172,0],[173,34,172,32,"assertTSQualifiedName"],[173,55,172,0],[174,0,173,0,"exports"],[174,2,173,0,"exports"],[174,9,173,7],[174,10,173,8,"assertTSCallSignatureDeclaration"],[174,42,173,0],[174,45,173,43,"assertTSCallSignatureDeclaration"],[174,77,173,0],[175,0,174,0,"exports"],[175,2,174,0,"exports"],[175,9,174,7],[175,10,174,8,"assertTSConstructSignatureDeclaration"],[175,47,174,0],[175,50,174,48,"assertTSConstructSignatureDeclaration"],[175,87,174,0],[176,0,175,0,"exports"],[176,2,175,0,"exports"],[176,9,175,7],[176,10,175,8,"assertTSPropertySignature"],[176,35,175,0],[176,38,175,36,"assertTSPropertySignature"],[176,63,175,0],[177,0,176,0,"exports"],[177,2,176,0,"exports"],[177,9,176,7],[177,10,176,8,"assertTSMethodSignature"],[177,33,176,0],[177,36,176,34,"assertTSMethodSignature"],[177,59,176,0],[178,0,177,0,"exports"],[178,2,177,0,"exports"],[178,9,177,7],[178,10,177,8,"assertTSIndexSignature"],[178,32,177,0],[178,35,177,33,"assertTSIndexSignature"],[178,57,177,0],[179,0,178,0,"exports"],[179,2,178,0,"exports"],[179,9,178,7],[179,10,178,8,"assertTSAnyKeyword"],[179,28,178,0],[179,31,178,29,"assertTSAnyKeyword"],[179,49,178,0],[180,0,179,0,"exports"],[180,2,179,0,"exports"],[180,9,179,7],[180,10,179,8,"assertTSUnknownKeyword"],[180,32,179,0],[180,35,179,33,"assertTSUnknownKeyword"],[180,57,179,0],[181,0,180,0,"exports"],[181,2,180,0,"exports"],[181,9,180,7],[181,10,180,8,"assertTSNumberKeyword"],[181,31,180,0],[181,34,180,32,"assertTSNumberKeyword"],[181,55,180,0],[182,0,181,0,"exports"],[182,2,181,0,"exports"],[182,9,181,7],[182,10,181,8,"assertTSObjectKeyword"],[182,31,181,0],[182,34,181,32,"assertTSObjectKeyword"],[182,55,181,0],[183,0,182,0,"exports"],[183,2,182,0,"exports"],[183,9,182,7],[183,10,182,8,"assertTSBooleanKeyword"],[183,32,182,0],[183,35,182,33,"assertTSBooleanKeyword"],[183,57,182,0],[184,0,183,0,"exports"],[184,2,183,0,"exports"],[184,9,183,7],[184,10,183,8,"assertTSStringKeyword"],[184,31,183,0],[184,34,183,32,"assertTSStringKeyword"],[184,55,183,0],[185,0,184,0,"exports"],[185,2,184,0,"exports"],[185,9,184,7],[185,10,184,8,"assertTSSymbolKeyword"],[185,31,184,0],[185,34,184,32,"assertTSSymbolKeyword"],[185,55,184,0],[186,0,185,0,"exports"],[186,2,185,0,"exports"],[186,9,185,7],[186,10,185,8,"assertTSVoidKeyword"],[186,29,185,0],[186,32,185,30,"assertTSVoidKeyword"],[186,51,185,0],[187,0,186,0,"exports"],[187,2,186,0,"exports"],[187,9,186,7],[187,10,186,8,"assertTSUndefinedKeyword"],[187,34,186,0],[187,37,186,35,"assertTSUndefinedKeyword"],[187,61,186,0],[188,0,187,0,"exports"],[188,2,187,0,"exports"],[188,9,187,7],[188,10,187,8,"assertTSNullKeyword"],[188,29,187,0],[188,32,187,30,"assertTSNullKeyword"],[188,51,187,0],[189,0,188,0,"exports"],[189,2,188,0,"exports"],[189,9,188,7],[189,10,188,8,"assertTSNeverKeyword"],[189,30,188,0],[189,33,188,31,"assertTSNeverKeyword"],[189,53,188,0],[190,0,189,0,"exports"],[190,2,189,0,"exports"],[190,9,189,7],[190,10,189,8,"assertTSThisType"],[190,26,189,0],[190,29,189,27,"assertTSThisType"],[190,45,189,0],[191,0,190,0,"exports"],[191,2,190,0,"exports"],[191,9,190,7],[191,10,190,8,"assertTSFunctionType"],[191,30,190,0],[191,33,190,31,"assertTSFunctionType"],[191,53,190,0],[192,0,191,0,"exports"],[192,2,191,0,"exports"],[192,9,191,7],[192,10,191,8,"assertTSConstructorType"],[192,33,191,0],[192,36,191,34,"assertTSConstructorType"],[192,59,191,0],[193,0,192,0,"exports"],[193,2,192,0,"exports"],[193,9,192,7],[193,10,192,8,"assertTSTypeReference"],[193,31,192,0],[193,34,192,32,"assertTSTypeReference"],[193,55,192,0],[194,0,193,0,"exports"],[194,2,193,0,"exports"],[194,9,193,7],[194,10,193,8,"assertTSTypePredicate"],[194,31,193,0],[194,34,193,32,"assertTSTypePredicate"],[194,55,193,0],[195,0,194,0,"exports"],[195,2,194,0,"exports"],[195,9,194,7],[195,10,194,8,"assertTSTypeQuery"],[195,27,194,0],[195,30,194,28,"assertTSTypeQuery"],[195,47,194,0],[196,0,195,0,"exports"],[196,2,195,0,"exports"],[196,9,195,7],[196,10,195,8,"assertTSTypeLiteral"],[196,29,195,0],[196,32,195,30,"assertTSTypeLiteral"],[196,51,195,0],[197,0,196,0,"exports"],[197,2,196,0,"exports"],[197,9,196,7],[197,10,196,8,"assertTSArrayType"],[197,27,196,0],[197,30,196,28,"assertTSArrayType"],[197,47,196,0],[198,0,197,0,"exports"],[198,2,197,0,"exports"],[198,9,197,7],[198,10,197,8,"assertTSTupleType"],[198,27,197,0],[198,30,197,28,"assertTSTupleType"],[198,47,197,0],[199,0,198,0,"exports"],[199,2,198,0,"exports"],[199,9,198,7],[199,10,198,8,"assertTSOptionalType"],[199,30,198,0],[199,33,198,31,"assertTSOptionalType"],[199,53,198,0],[200,0,199,0,"exports"],[200,2,199,0,"exports"],[200,9,199,7],[200,10,199,8,"assertTSRestType"],[200,26,199,0],[200,29,199,27,"assertTSRestType"],[200,45,199,0],[201,0,200,0,"exports"],[201,2,200,0,"exports"],[201,9,200,7],[201,10,200,8,"assertTSUnionType"],[201,27,200,0],[201,30,200,28,"assertTSUnionType"],[201,47,200,0],[202,0,201,0,"exports"],[202,2,201,0,"exports"],[202,9,201,7],[202,10,201,8,"assertTSIntersectionType"],[202,34,201,0],[202,37,201,35,"assertTSIntersectionType"],[202,61,201,0],[203,0,202,0,"exports"],[203,2,202,0,"exports"],[203,9,202,7],[203,10,202,8,"assertTSConditionalType"],[203,33,202,0],[203,36,202,34,"assertTSConditionalType"],[203,59,202,0],[204,0,203,0,"exports"],[204,2,203,0,"exports"],[204,9,203,7],[204,10,203,8,"assertTSInferType"],[204,27,203,0],[204,30,203,28,"assertTSInferType"],[204,47,203,0],[205,0,204,0,"exports"],[205,2,204,0,"exports"],[205,9,204,7],[205,10,204,8,"assertTSParenthesizedType"],[205,35,204,0],[205,38,204,36,"assertTSParenthesizedType"],[205,63,204,0],[206,0,205,0,"exports"],[206,2,205,0,"exports"],[206,9,205,7],[206,10,205,8,"assertTSTypeOperator"],[206,30,205,0],[206,33,205,31,"assertTSTypeOperator"],[206,53,205,0],[207,0,206,0,"exports"],[207,2,206,0,"exports"],[207,9,206,7],[207,10,206,8,"assertTSIndexedAccessType"],[207,35,206,0],[207,38,206,36,"assertTSIndexedAccessType"],[207,63,206,0],[208,0,207,0,"exports"],[208,2,207,0,"exports"],[208,9,207,7],[208,10,207,8,"assertTSMappedType"],[208,28,207,0],[208,31,207,29,"assertTSMappedType"],[208,49,207,0],[209,0,208,0,"exports"],[209,2,208,0,"exports"],[209,9,208,7],[209,10,208,8,"assertTSLiteralType"],[209,29,208,0],[209,32,208,30,"assertTSLiteralType"],[209,51,208,0],[210,0,209,0,"exports"],[210,2,209,0,"exports"],[210,9,209,7],[210,10,209,8,"assertTSExpressionWithTypeArguments"],[210,45,209,0],[210,48,209,46,"assertTSExpressionWithTypeArguments"],[210,83,209,0],[211,0,210,0,"exports"],[211,2,210,0,"exports"],[211,9,210,7],[211,10,210,8,"assertTSInterfaceDeclaration"],[211,38,210,0],[211,41,210,39,"assertTSInterfaceDeclaration"],[211,69,210,0],[212,0,211,0,"exports"],[212,2,211,0,"exports"],[212,9,211,7],[212,10,211,8,"assertTSInterfaceBody"],[212,31,211,0],[212,34,211,32,"assertTSInterfaceBody"],[212,55,211,0],[213,0,212,0,"exports"],[213,2,212,0,"exports"],[213,9,212,7],[213,10,212,8,"assertTSTypeAliasDeclaration"],[213,38,212,0],[213,41,212,39,"assertTSTypeAliasDeclaration"],[213,69,212,0],[214,0,213,0,"exports"],[214,2,213,0,"exports"],[214,9,213,7],[214,10,213,8,"assertTSAsExpression"],[214,30,213,0],[214,33,213,31,"assertTSAsExpression"],[214,53,213,0],[215,0,214,0,"exports"],[215,2,214,0,"exports"],[215,9,214,7],[215,10,214,8,"assertTSTypeAssertion"],[215,31,214,0],[215,34,214,32,"assertTSTypeAssertion"],[215,55,214,0],[216,0,215,0,"exports"],[216,2,215,0,"exports"],[216,9,215,7],[216,10,215,8,"assertTSEnumDeclaration"],[216,33,215,0],[216,36,215,34,"assertTSEnumDeclaration"],[216,59,215,0],[217,0,216,0,"exports"],[217,2,216,0,"exports"],[217,9,216,7],[217,10,216,8,"assertTSEnumMember"],[217,28,216,0],[217,31,216,29,"assertTSEnumMember"],[217,49,216,0],[218,0,217,0,"exports"],[218,2,217,0,"exports"],[218,9,217,7],[218,10,217,8,"assertTSModuleDeclaration"],[218,35,217,0],[218,38,217,36,"assertTSModuleDeclaration"],[218,63,217,0],[219,0,218,0,"exports"],[219,2,218,0,"exports"],[219,9,218,7],[219,10,218,8,"assertTSModuleBlock"],[219,29,218,0],[219,32,218,30,"assertTSModuleBlock"],[219,51,218,0],[220,0,219,0,"exports"],[220,2,219,0,"exports"],[220,9,219,7],[220,10,219,8,"assertTSImportType"],[220,28,219,0],[220,31,219,29,"assertTSImportType"],[220,49,219,0],[221,0,220,0,"exports"],[221,2,220,0,"exports"],[221,9,220,7],[221,10,220,8,"assertTSImportEqualsDeclaration"],[221,41,220,0],[221,44,220,42,"assertTSImportEqualsDeclaration"],[221,75,220,0],[222,0,221,0,"exports"],[222,2,221,0,"exports"],[222,9,221,7],[222,10,221,8,"assertTSExternalModuleReference"],[222,41,221,0],[222,44,221,42,"assertTSExternalModuleReference"],[222,75,221,0],[223,0,222,0,"exports"],[223,2,222,0,"exports"],[223,9,222,7],[223,10,222,8,"assertTSNonNullExpression"],[223,35,222,0],[223,38,222,36,"assertTSNonNullExpression"],[223,63,222,0],[224,0,223,0,"exports"],[224,2,223,0,"exports"],[224,9,223,7],[224,10,223,8,"assertTSExportAssignment"],[224,34,223,0],[224,37,223,35,"assertTSExportAssignment"],[224,61,223,0],[225,0,224,0,"exports"],[225,2,224,0,"exports"],[225,9,224,7],[225,10,224,8,"assertTSNamespaceExportDeclaration"],[225,44,224,0],[225,47,224,45,"assertTSNamespaceExportDeclaration"],[225,81,224,0],[226,0,225,0,"exports"],[226,2,225,0,"exports"],[226,9,225,7],[226,10,225,8,"assertTSTypeAnnotation"],[226,32,225,0],[226,35,225,33,"assertTSTypeAnnotation"],[226,57,225,0],[227,0,226,0,"exports"],[227,2,226,0,"exports"],[227,9,226,7],[227,10,226,8,"assertTSTypeParameterInstantiation"],[227,44,226,0],[227,47,226,45,"assertTSTypeParameterInstantiation"],[227,81,226,0],[228,0,227,0,"exports"],[228,2,227,0,"exports"],[228,9,227,7],[228,10,227,8,"assertTSTypeParameterDeclaration"],[228,42,227,0],[228,45,227,43,"assertTSTypeParameterDeclaration"],[228,77,227,0],[229,0,228,0,"exports"],[229,2,228,0,"exports"],[229,9,228,7],[229,10,228,8,"assertTSTypeParameter"],[229,31,228,0],[229,34,228,32,"assertTSTypeParameter"],[229,55,228,0],[230,0,229,0,"exports"],[230,2,229,0,"exports"],[230,9,229,7],[230,10,229,8,"assertExpression"],[230,26,229,0],[230,29,229,27,"assertExpression"],[230,45,229,0],[231,0,230,0,"exports"],[231,2,230,0,"exports"],[231,9,230,7],[231,10,230,8,"assertBinary"],[231,22,230,0],[231,25,230,23,"assertBinary"],[231,37,230,0],[232,0,231,0,"exports"],[232,2,231,0,"exports"],[232,9,231,7],[232,10,231,8,"assertScopable"],[232,24,231,0],[232,27,231,25,"assertScopable"],[232,41,231,0],[233,0,232,0,"exports"],[233,2,232,0,"exports"],[233,9,232,7],[233,10,232,8,"assertBlockParent"],[233,27,232,0],[233,30,232,28,"assertBlockParent"],[233,47,232,0],[234,0,233,0,"exports"],[234,2,233,0,"exports"],[234,9,233,7],[234,10,233,8,"assertBlock"],[234,21,233,0],[234,24,233,22,"assertBlock"],[234,35,233,0],[235,0,234,0,"exports"],[235,2,234,0,"exports"],[235,9,234,7],[235,10,234,8,"assertStatement"],[235,25,234,0],[235,28,234,26,"assertStatement"],[235,43,234,0],[236,0,235,0,"exports"],[236,2,235,0,"exports"],[236,9,235,7],[236,10,235,8,"assertTerminatorless"],[236,30,235,0],[236,33,235,31,"assertTerminatorless"],[236,53,235,0],[237,0,236,0,"exports"],[237,2,236,0,"exports"],[237,9,236,7],[237,10,236,8,"assertCompletionStatement"],[237,35,236,0],[237,38,236,36,"assertCompletionStatement"],[237,63,236,0],[238,0,237,0,"exports"],[238,2,237,0,"exports"],[238,9,237,7],[238,10,237,8,"assertConditional"],[238,27,237,0],[238,30,237,28,"assertConditional"],[238,47,237,0],[239,0,238,0,"exports"],[239,2,238,0,"exports"],[239,9,238,7],[239,10,238,8,"assertLoop"],[239,20,238,0],[239,23,238,21,"assertLoop"],[239,33,238,0],[240,0,239,0,"exports"],[240,2,239,0,"exports"],[240,9,239,7],[240,10,239,8,"assertWhile"],[240,21,239,0],[240,24,239,22,"assertWhile"],[240,35,239,0],[241,0,240,0,"exports"],[241,2,240,0,"exports"],[241,9,240,7],[241,10,240,8,"assertExpressionWrapper"],[241,33,240,0],[241,36,240,34,"assertExpressionWrapper"],[241,59,240,0],[242,0,241,0,"exports"],[242,2,241,0,"exports"],[242,9,241,7],[242,10,241,8,"assertFor"],[242,19,241,0],[242,22,241,20,"assertFor"],[242,31,241,0],[243,0,242,0,"exports"],[243,2,242,0,"exports"],[243,9,242,7],[243,10,242,8,"assertForXStatement"],[243,29,242,0],[243,32,242,30,"assertForXStatement"],[243,51,242,0],[244,0,243,0,"exports"],[244,2,243,0,"exports"],[244,9,243,7],[244,10,243,8,"assertFunction"],[244,24,243,0],[244,27,243,25,"assertFunction"],[244,41,243,0],[245,0,244,0,"exports"],[245,2,244,0,"exports"],[245,9,244,7],[245,10,244,8,"assertFunctionParent"],[245,30,244,0],[245,33,244,31,"assertFunctionParent"],[245,53,244,0],[246,0,245,0,"exports"],[246,2,245,0,"exports"],[246,9,245,7],[246,10,245,8,"assertPureish"],[246,23,245,0],[246,26,245,24,"assertPureish"],[246,39,245,0],[247,0,246,0,"exports"],[247,2,246,0,"exports"],[247,9,246,7],[247,10,246,8,"assertDeclaration"],[247,27,246,0],[247,30,246,28,"assertDeclaration"],[247,47,246,0],[248,0,247,0,"exports"],[248,2,247,0,"exports"],[248,9,247,7],[248,10,247,8,"assertPatternLike"],[248,27,247,0],[248,30,247,28,"assertPatternLike"],[248,47,247,0],[249,0,248,0,"exports"],[249,2,248,0,"exports"],[249,9,248,7],[249,10,248,8,"assertLVal"],[249,20,248,0],[249,23,248,21,"assertLVal"],[249,33,248,0],[250,0,249,0,"exports"],[250,2,249,0,"exports"],[250,9,249,7],[250,10,249,8,"assertTSEntityName"],[250,28,249,0],[250,31,249,29,"assertTSEntityName"],[250,49,249,0],[251,0,250,0,"exports"],[251,2,250,0,"exports"],[251,9,250,7],[251,10,250,8,"assertLiteral"],[251,23,250,0],[251,26,250,24,"assertLiteral"],[251,39,250,0],[252,0,251,0,"exports"],[252,2,251,0,"exports"],[252,9,251,7],[252,10,251,8,"assertImmutable"],[252,25,251,0],[252,28,251,26,"assertImmutable"],[252,43,251,0],[253,0,252,0,"exports"],[253,2,252,0,"exports"],[253,9,252,7],[253,10,252,8,"assertUserWhitespacable"],[253,33,252,0],[253,36,252,34,"assertUserWhitespacable"],[253,59,252,0],[254,0,253,0,"exports"],[254,2,253,0,"exports"],[254,9,253,7],[254,10,253,8,"assertMethod"],[254,22,253,0],[254,25,253,23,"assertMethod"],[254,37,253,0],[255,0,254,0,"exports"],[255,2,254,0,"exports"],[255,9,254,7],[255,10,254,8,"assertObjectMember"],[255,28,254,0],[255,31,254,29,"assertObjectMember"],[255,49,254,0],[256,0,255,0,"exports"],[256,2,255,0,"exports"],[256,9,255,7],[256,10,255,8,"assertProperty"],[256,24,255,0],[256,27,255,25,"assertProperty"],[256,41,255,0],[257,0,256,0,"exports"],[257,2,256,0,"exports"],[257,9,256,7],[257,10,256,8,"assertUnaryLike"],[257,25,256,0],[257,28,256,26,"assertUnaryLike"],[257,43,256,0],[258,0,257,0,"exports"],[258,2,257,0,"exports"],[258,9,257,7],[258,10,257,8,"assertPattern"],[258,23,257,0],[258,26,257,24,"assertPattern"],[258,39,257,0],[259,0,258,0,"exports"],[259,2,258,0,"exports"],[259,9,258,7],[259,10,258,8,"assertClass"],[259,21,258,0],[259,24,258,22,"assertClass"],[259,35,258,0],[260,0,259,0,"exports"],[260,2,259,0,"exports"],[260,9,259,7],[260,10,259,8,"assertModuleDeclaration"],[260,33,259,0],[260,36,259,34,"assertModuleDeclaration"],[260,59,259,0],[261,0,260,0,"exports"],[261,2,260,0,"exports"],[261,9,260,7],[261,10,260,8,"assertExportDeclaration"],[261,33,260,0],[261,36,260,34,"assertExportDeclaration"],[261,59,260,0],[262,0,261,0,"exports"],[262,2,261,0,"exports"],[262,9,261,7],[262,10,261,8,"assertModuleSpecifier"],[262,31,261,0],[262,34,261,32,"assertModuleSpecifier"],[262,55,261,0],[263,0,262,0,"exports"],[263,2,262,0,"exports"],[263,9,262,7],[263,10,262,8,"assertFlow"],[263,20,262,0],[263,23,262,21,"assertFlow"],[263,33,262,0],[264,0,263,0,"exports"],[264,2,263,0,"exports"],[264,9,263,7],[264,10,263,8,"assertFlowType"],[264,24,263,0],[264,27,263,25,"assertFlowType"],[264,41,263,0],[265,0,264,0,"exports"],[265,2,264,0,"exports"],[265,9,264,7],[265,10,264,8,"assertFlowBaseAnnotation"],[265,34,264,0],[265,37,264,35,"assertFlowBaseAnnotation"],[265,61,264,0],[266,0,265,0,"exports"],[266,2,265,0,"exports"],[266,9,265,7],[266,10,265,8,"assertFlowDeclaration"],[266,31,265,0],[266,34,265,32,"assertFlowDeclaration"],[266,55,265,0],[267,0,266,0,"exports"],[267,2,266,0,"exports"],[267,9,266,7],[267,10,266,8,"assertFlowPredicate"],[267,29,266,0],[267,32,266,30,"assertFlowPredicate"],[267,51,266,0],[268,0,267,0,"exports"],[268,2,267,0,"exports"],[268,9,267,7],[268,10,267,8,"assertJSX"],[268,19,267,0],[268,22,267,20,"assertJSX"],[268,31,267,0],[269,0,268,0,"exports"],[269,2,268,0,"exports"],[269,9,268,7],[269,10,268,8,"assertPrivate"],[269,23,268,0],[269,26,268,24,"assertPrivate"],[269,39,268,0],[270,0,269,0,"exports"],[270,2,269,0,"exports"],[270,9,269,7],[270,10,269,8,"assertTSTypeElement"],[270,29,269,0],[270,32,269,30,"assertTSTypeElement"],[270,51,269,0],[271,0,270,0,"exports"],[271,2,270,0,"exports"],[271,9,270,7],[271,10,270,8,"assertTSType"],[271,22,270,0],[271,25,270,23,"assertTSType"],[271,37,270,0],[272,0,271,0,"exports"],[272,2,271,0,"exports"],[272,9,271,7],[272,10,271,8,"assertNumberLiteral"],[272,29,271,0],[272,32,271,30,"assertNumberLiteral"],[272,51,271,0],[273,0,272,0,"exports"],[273,2,272,0,"exports"],[273,9,272,7],[273,10,272,8,"assertRegexLiteral"],[273,28,272,0],[273,31,272,29,"assertRegexLiteral"],[273,49,272,0],[274,0,273,0,"exports"],[274,2,273,0,"exports"],[274,9,273,7],[274,10,273,8,"assertRestProperty"],[274,28,273,0],[274,31,273,29,"assertRestProperty"],[274,49,273,0],[275,0,274,0,"exports"],[275,2,274,0,"exports"],[275,9,274,7],[275,10,274,8,"assertSpreadProperty"],[275,30,274,0],[275,33,274,31,"assertSpreadProperty"],[275,53,274,0],[277,0,276,0],[277,6,276,4,"_is"],[277,9,276,7],[277,12,276,10,"_interopRequireDefault"],[277,34,276,32],[277,35,276,33,"require"],[277,46,276,40],[277,88,276,32],[277,89,276,0],[279,0,278,0],[279,11,278,9,"_interopRequireDefault"],[279,33,278,0],[279,34,278,32,"obj"],[279,37,278,0],[279,39,278,37],[280,0,278,39],[280,11,278,46,"obj"],[280,14,278,49],[280,18,278,53,"obj"],[280,21,278,56],[280,22,278,57,"__esModule"],[280,32,278,46],[280,35,278,70,"obj"],[280,38,278,46],[280,41,278,76],[281,0,278,78,"default"],[281,6,278,78,"default"],[281,13,278,85],[281,15,278,87,"obj"],[282,0,278,76],[282,5,278,39],[283,0,278,95],[285,0,280,0],[285,11,280,9,"assert"],[285,17,280,0],[285,18,280,16,"type"],[285,22,280,0],[285,24,280,22,"node"],[285,28,280,0],[285,30,280,28,"opts"],[285,34,280,0],[285,36,280,34],[286,0,281,2],[286,8,281,6],[286,9,281,7],[286,10,281,8],[286,13,281,11,"_is"],[286,16,281,14],[286,17,281,15,"default"],[286,24,281,7],[286,26,281,24,"type"],[286,30,281,7],[286,32,281,30,"node"],[286,36,281,7],[286,38,281,36,"opts"],[286,42,281,7],[286,43,281,2],[286,45,281,43],[287,0,282,4],[287,12,282,10],[287,16,282,14,"Error"],[287,21,282,10],[287,43,282,38,"type"],[287,47,282,10],[287,70,282,59,"JSON"],[287,74,282,63],[287,75,282,64,"stringify"],[287,84,282,59],[287,85,282,74,"opts"],[287,89,282,59],[287,90,282,10],[287,118,282,101,"node"],[287,122,282,105],[287,123,282,106,"type"],[287,127,282,10],[287,136,282,4],[288,0,283,3],[289,0,284,1],[291,0,286,0],[291,11,286,9,"assertArrayExpression"],[291,32,286,0],[291,33,286,31,"node"],[291,37,286,0],[291,39,286,48],[292,0,286,48],[292,8,286,37,"opts"],[292,12,286,48],[292,83,286,44],[292,85,286,48],[293,0,287,2,"assert"],[293,4,287,2,"assert"],[293,10,287,8],[293,11,287,9],[293,28,287,8],[293,30,287,28,"node"],[293,34,287,8],[293,36,287,34,"opts"],[293,40,287,8],[293,41,287,2],[294,0,288,1],[296,0,290,0],[296,11,290,9,"assertAssignmentExpression"],[296,37,290,0],[296,38,290,36,"node"],[296,42,290,0],[296,44,290,53],[297,0,290,53],[297,8,290,42,"opts"],[297,12,290,53],[297,83,290,49],[297,85,290,53],[298,0,291,2,"assert"],[298,4,291,2,"assert"],[298,10,291,8],[298,11,291,9],[298,33,291,8],[298,35,291,33,"node"],[298,39,291,8],[298,41,291,39,"opts"],[298,45,291,8],[298,46,291,2],[299,0,292,1],[301,0,294,0],[301,11,294,9,"assertBinaryExpression"],[301,33,294,0],[301,34,294,32,"node"],[301,38,294,0],[301,40,294,49],[302,0,294,49],[302,8,294,38,"opts"],[302,12,294,49],[302,83,294,45],[302,85,294,49],[303,0,295,2,"assert"],[303,4,295,2,"assert"],[303,10,295,8],[303,11,295,9],[303,29,295,8],[303,31,295,29,"node"],[303,35,295,8],[303,37,295,35,"opts"],[303,41,295,8],[303,42,295,2],[304,0,296,1],[306,0,298,0],[306,11,298,9,"assertInterpreterDirective"],[306,37,298,0],[306,38,298,36,"node"],[306,42,298,0],[306,44,298,53],[307,0,298,53],[307,8,298,42,"opts"],[307,12,298,53],[307,83,298,49],[307,85,298,53],[308,0,299,2,"assert"],[308,4,299,2,"assert"],[308,10,299,8],[308,11,299,9],[308,33,299,8],[308,35,299,33,"node"],[308,39,299,8],[308,41,299,39,"opts"],[308,45,299,8],[308,46,299,2],[309,0,300,1],[311,0,302,0],[311,11,302,9,"assertDirective"],[311,26,302,0],[311,27,302,25,"node"],[311,31,302,0],[311,33,302,42],[312,0,302,42],[312,8,302,31,"opts"],[312,12,302,42],[312,83,302,38],[312,85,302,42],[313,0,303,2,"assert"],[313,4,303,2,"assert"],[313,10,303,8],[313,11,303,9],[313,22,303,8],[313,24,303,22,"node"],[313,28,303,8],[313,30,303,28,"opts"],[313,34,303,8],[313,35,303,2],[314,0,304,1],[316,0,306,0],[316,11,306,9,"assertDirectiveLiteral"],[316,33,306,0],[316,34,306,32,"node"],[316,38,306,0],[316,40,306,49],[317,0,306,49],[317,8,306,38,"opts"],[317,12,306,49],[317,83,306,45],[317,85,306,49],[318,0,307,2,"assert"],[318,4,307,2,"assert"],[318,10,307,8],[318,11,307,9],[318,29,307,8],[318,31,307,29,"node"],[318,35,307,8],[318,37,307,35,"opts"],[318,41,307,8],[318,42,307,2],[319,0,308,1],[321,0,310,0],[321,11,310,9,"assertBlockStatement"],[321,31,310,0],[321,32,310,30,"node"],[321,36,310,0],[321,38,310,47],[322,0,310,47],[322,8,310,36,"opts"],[322,12,310,47],[322,83,310,43],[322,85,310,47],[323,0,311,2,"assert"],[323,4,311,2,"assert"],[323,10,311,8],[323,11,311,9],[323,27,311,8],[323,29,311,27,"node"],[323,33,311,8],[323,35,311,33,"opts"],[323,39,311,8],[323,40,311,2],[324,0,312,1],[326,0,314,0],[326,11,314,9,"assertBreakStatement"],[326,31,314,0],[326,32,314,30,"node"],[326,36,314,0],[326,38,314,47],[327,0,314,47],[327,8,314,36,"opts"],[327,12,314,47],[327,83,314,43],[327,85,314,47],[328,0,315,2,"assert"],[328,4,315,2,"assert"],[328,10,315,8],[328,11,315,9],[328,27,315,8],[328,29,315,27,"node"],[328,33,315,8],[328,35,315,33,"opts"],[328,39,315,8],[328,40,315,2],[329,0,316,1],[331,0,318,0],[331,11,318,9,"assertCallExpression"],[331,31,318,0],[331,32,318,30,"node"],[331,36,318,0],[331,38,318,47],[332,0,318,47],[332,8,318,36,"opts"],[332,12,318,47],[332,83,318,43],[332,85,318,47],[333,0,319,2,"assert"],[333,4,319,2,"assert"],[333,10,319,8],[333,11,319,9],[333,27,319,8],[333,29,319,27,"node"],[333,33,319,8],[333,35,319,33,"opts"],[333,39,319,8],[333,40,319,2],[334,0,320,1],[336,0,322,0],[336,11,322,9,"assertCatchClause"],[336,28,322,0],[336,29,322,27,"node"],[336,33,322,0],[336,35,322,44],[337,0,322,44],[337,8,322,33,"opts"],[337,12,322,44],[337,83,322,40],[337,85,322,44],[338,0,323,2,"assert"],[338,4,323,2,"assert"],[338,10,323,8],[338,11,323,9],[338,24,323,8],[338,26,323,24,"node"],[338,30,323,8],[338,32,323,30,"opts"],[338,36,323,8],[338,37,323,2],[339,0,324,1],[341,0,326,0],[341,11,326,9,"assertConditionalExpression"],[341,38,326,0],[341,39,326,37,"node"],[341,43,326,0],[341,45,326,54],[342,0,326,54],[342,8,326,43,"opts"],[342,12,326,54],[342,83,326,50],[342,85,326,54],[343,0,327,2,"assert"],[343,4,327,2,"assert"],[343,10,327,8],[343,11,327,9],[343,34,327,8],[343,36,327,34,"node"],[343,40,327,8],[343,42,327,40,"opts"],[343,46,327,8],[343,47,327,2],[344,0,328,1],[346,0,330,0],[346,11,330,9,"assertContinueStatement"],[346,34,330,0],[346,35,330,33,"node"],[346,39,330,0],[346,41,330,50],[347,0,330,50],[347,8,330,39,"opts"],[347,12,330,50],[347,83,330,46],[347,85,330,50],[348,0,331,2,"assert"],[348,4,331,2,"assert"],[348,10,331,8],[348,11,331,9],[348,30,331,8],[348,32,331,30,"node"],[348,36,331,8],[348,38,331,36,"opts"],[348,42,331,8],[348,43,331,2],[349,0,332,1],[351,0,334,0],[351,11,334,9,"assertDebuggerStatement"],[351,34,334,0],[351,35,334,33,"node"],[351,39,334,0],[351,41,334,50],[352,0,334,50],[352,8,334,39,"opts"],[352,12,334,50],[352,83,334,46],[352,85,334,50],[353,0,335,2,"assert"],[353,4,335,2,"assert"],[353,10,335,8],[353,11,335,9],[353,30,335,8],[353,32,335,30,"node"],[353,36,335,8],[353,38,335,36,"opts"],[353,42,335,8],[353,43,335,2],[354,0,336,1],[356,0,338,0],[356,11,338,9,"assertDoWhileStatement"],[356,33,338,0],[356,34,338,32,"node"],[356,38,338,0],[356,40,338,49],[357,0,338,49],[357,8,338,38,"opts"],[357,12,338,49],[357,83,338,45],[357,85,338,49],[358,0,339,2,"assert"],[358,4,339,2,"assert"],[358,10,339,8],[358,11,339,9],[358,29,339,8],[358,31,339,29,"node"],[358,35,339,8],[358,37,339,35,"opts"],[358,41,339,8],[358,42,339,2],[359,0,340,1],[361,0,342,0],[361,11,342,9,"assertEmptyStatement"],[361,31,342,0],[361,32,342,30,"node"],[361,36,342,0],[361,38,342,47],[362,0,342,47],[362,8,342,36,"opts"],[362,12,342,47],[362,83,342,43],[362,85,342,47],[363,0,343,2,"assert"],[363,4,343,2,"assert"],[363,10,343,8],[363,11,343,9],[363,27,343,8],[363,29,343,27,"node"],[363,33,343,8],[363,35,343,33,"opts"],[363,39,343,8],[363,40,343,2],[364,0,344,1],[366,0,346,0],[366,11,346,9,"assertExpressionStatement"],[366,36,346,0],[366,37,346,35,"node"],[366,41,346,0],[366,43,346,52],[367,0,346,52],[367,8,346,41,"opts"],[367,12,346,52],[367,83,346,48],[367,85,346,52],[368,0,347,2,"assert"],[368,4,347,2,"assert"],[368,10,347,8],[368,11,347,9],[368,32,347,8],[368,34,347,32,"node"],[368,38,347,8],[368,40,347,38,"opts"],[368,44,347,8],[368,45,347,2],[369,0,348,1],[371,0,350,0],[371,11,350,9,"assertFile"],[371,21,350,0],[371,22,350,20,"node"],[371,26,350,0],[371,28,350,37],[372,0,350,37],[372,8,350,26,"opts"],[372,12,350,37],[372,83,350,33],[372,85,350,37],[373,0,351,2,"assert"],[373,4,351,2,"assert"],[373,10,351,8],[373,11,351,9],[373,17,351,8],[373,19,351,17,"node"],[373,23,351,8],[373,25,351,23,"opts"],[373,29,351,8],[373,30,351,2],[374,0,352,1],[376,0,354,0],[376,11,354,9,"assertForInStatement"],[376,31,354,0],[376,32,354,30,"node"],[376,36,354,0],[376,38,354,47],[377,0,354,47],[377,8,354,36,"opts"],[377,12,354,47],[377,83,354,43],[377,85,354,47],[378,0,355,2,"assert"],[378,4,355,2,"assert"],[378,10,355,8],[378,11,355,9],[378,27,355,8],[378,29,355,27,"node"],[378,33,355,8],[378,35,355,33,"opts"],[378,39,355,8],[378,40,355,2],[379,0,356,1],[381,0,358,0],[381,11,358,9,"assertForStatement"],[381,29,358,0],[381,30,358,28,"node"],[381,34,358,0],[381,36,358,45],[382,0,358,45],[382,8,358,34,"opts"],[382,12,358,45],[382,83,358,41],[382,85,358,45],[383,0,359,2,"assert"],[383,4,359,2,"assert"],[383,10,359,8],[383,11,359,9],[383,25,359,8],[383,27,359,25,"node"],[383,31,359,8],[383,33,359,31,"opts"],[383,37,359,8],[383,38,359,2],[384,0,360,1],[386,0,362,0],[386,11,362,9,"assertFunctionDeclaration"],[386,36,362,0],[386,37,362,35,"node"],[386,41,362,0],[386,43,362,52],[387,0,362,52],[387,8,362,41,"opts"],[387,12,362,52],[387,83,362,48],[387,85,362,52],[388,0,363,2,"assert"],[388,4,363,2,"assert"],[388,10,363,8],[388,11,363,9],[388,32,363,8],[388,34,363,32,"node"],[388,38,363,8],[388,40,363,38,"opts"],[388,44,363,8],[388,45,363,2],[389,0,364,1],[391,0,366,0],[391,11,366,9,"assertFunctionExpression"],[391,35,366,0],[391,36,366,34,"node"],[391,40,366,0],[391,42,366,51],[392,0,366,51],[392,8,366,40,"opts"],[392,12,366,51],[392,83,366,47],[392,85,366,51],[393,0,367,2,"assert"],[393,4,367,2,"assert"],[393,10,367,8],[393,11,367,9],[393,31,367,8],[393,33,367,31,"node"],[393,37,367,8],[393,39,367,37,"opts"],[393,43,367,8],[393,44,367,2],[394,0,368,1],[396,0,370,0],[396,11,370,9,"assertIdentifier"],[396,27,370,0],[396,28,370,26,"node"],[396,32,370,0],[396,34,370,43],[397,0,370,43],[397,8,370,32,"opts"],[397,12,370,43],[397,83,370,39],[397,85,370,43],[398,0,371,2,"assert"],[398,4,371,2,"assert"],[398,10,371,8],[398,11,371,9],[398,23,371,8],[398,25,371,23,"node"],[398,29,371,8],[398,31,371,29,"opts"],[398,35,371,8],[398,36,371,2],[399,0,372,1],[401,0,374,0],[401,11,374,9,"assertIfStatement"],[401,28,374,0],[401,29,374,27,"node"],[401,33,374,0],[401,35,374,44],[402,0,374,44],[402,8,374,33,"opts"],[402,12,374,44],[402,83,374,40],[402,85,374,44],[403,0,375,2,"assert"],[403,4,375,2,"assert"],[403,10,375,8],[403,11,375,9],[403,24,375,8],[403,26,375,24,"node"],[403,30,375,8],[403,32,375,30,"opts"],[403,36,375,8],[403,37,375,2],[404,0,376,1],[406,0,378,0],[406,11,378,9,"assertLabeledStatement"],[406,33,378,0],[406,34,378,32,"node"],[406,38,378,0],[406,40,378,49],[407,0,378,49],[407,8,378,38,"opts"],[407,12,378,49],[407,83,378,45],[407,85,378,49],[408,0,379,2,"assert"],[408,4,379,2,"assert"],[408,10,379,8],[408,11,379,9],[408,29,379,8],[408,31,379,29,"node"],[408,35,379,8],[408,37,379,35,"opts"],[408,41,379,8],[408,42,379,2],[409,0,380,1],[411,0,382,0],[411,11,382,9,"assertStringLiteral"],[411,30,382,0],[411,31,382,29,"node"],[411,35,382,0],[411,37,382,46],[412,0,382,46],[412,8,382,35,"opts"],[412,12,382,46],[412,83,382,42],[412,85,382,46],[413,0,383,2,"assert"],[413,4,383,2,"assert"],[413,10,383,8],[413,11,383,9],[413,26,383,8],[413,28,383,26,"node"],[413,32,383,8],[413,34,383,32,"opts"],[413,38,383,8],[413,39,383,2],[414,0,384,1],[416,0,386,0],[416,11,386,9,"assertNumericLiteral"],[416,31,386,0],[416,32,386,30,"node"],[416,36,386,0],[416,38,386,47],[417,0,386,47],[417,8,386,36,"opts"],[417,12,386,47],[417,83,386,43],[417,85,386,47],[418,0,387,2,"assert"],[418,4,387,2,"assert"],[418,10,387,8],[418,11,387,9],[418,27,387,8],[418,29,387,27,"node"],[418,33,387,8],[418,35,387,33,"opts"],[418,39,387,8],[418,40,387,2],[419,0,388,1],[421,0,390,0],[421,11,390,9,"assertNullLiteral"],[421,28,390,0],[421,29,390,27,"node"],[421,33,390,0],[421,35,390,44],[422,0,390,44],[422,8,390,33,"opts"],[422,12,390,44],[422,83,390,40],[422,85,390,44],[423,0,391,2,"assert"],[423,4,391,2,"assert"],[423,10,391,8],[423,11,391,9],[423,24,391,8],[423,26,391,24,"node"],[423,30,391,8],[423,32,391,30,"opts"],[423,36,391,8],[423,37,391,2],[424,0,392,1],[426,0,394,0],[426,11,394,9,"assertBooleanLiteral"],[426,31,394,0],[426,32,394,30,"node"],[426,36,394,0],[426,38,394,47],[427,0,394,47],[427,8,394,36,"opts"],[427,12,394,47],[427,83,394,43],[427,85,394,47],[428,0,395,2,"assert"],[428,4,395,2,"assert"],[428,10,395,8],[428,11,395,9],[428,27,395,8],[428,29,395,27,"node"],[428,33,395,8],[428,35,395,33,"opts"],[428,39,395,8],[428,40,395,2],[429,0,396,1],[431,0,398,0],[431,11,398,9,"assertRegExpLiteral"],[431,30,398,0],[431,31,398,29,"node"],[431,35,398,0],[431,37,398,46],[432,0,398,46],[432,8,398,35,"opts"],[432,12,398,46],[432,83,398,42],[432,85,398,46],[433,0,399,2,"assert"],[433,4,399,2,"assert"],[433,10,399,8],[433,11,399,9],[433,26,399,8],[433,28,399,26,"node"],[433,32,399,8],[433,34,399,32,"opts"],[433,38,399,8],[433,39,399,2],[434,0,400,1],[436,0,402,0],[436,11,402,9,"assertLogicalExpression"],[436,34,402,0],[436,35,402,33,"node"],[436,39,402,0],[436,41,402,50],[437,0,402,50],[437,8,402,39,"opts"],[437,12,402,50],[437,83,402,46],[437,85,402,50],[438,0,403,2,"assert"],[438,4,403,2,"assert"],[438,10,403,8],[438,11,403,9],[438,30,403,8],[438,32,403,30,"node"],[438,36,403,8],[438,38,403,36,"opts"],[438,42,403,8],[438,43,403,2],[439,0,404,1],[441,0,406,0],[441,11,406,9,"assertMemberExpression"],[441,33,406,0],[441,34,406,32,"node"],[441,38,406,0],[441,40,406,49],[442,0,406,49],[442,8,406,38,"opts"],[442,12,406,49],[442,83,406,45],[442,85,406,49],[443,0,407,2,"assert"],[443,4,407,2,"assert"],[443,10,407,8],[443,11,407,9],[443,29,407,8],[443,31,407,29,"node"],[443,35,407,8],[443,37,407,35,"opts"],[443,41,407,8],[443,42,407,2],[444,0,408,1],[446,0,410,0],[446,11,410,9,"assertNewExpression"],[446,30,410,0],[446,31,410,29,"node"],[446,35,410,0],[446,37,410,46],[447,0,410,46],[447,8,410,35,"opts"],[447,12,410,46],[447,83,410,42],[447,85,410,46],[448,0,411,2,"assert"],[448,4,411,2,"assert"],[448,10,411,8],[448,11,411,9],[448,26,411,8],[448,28,411,26,"node"],[448,32,411,8],[448,34,411,32,"opts"],[448,38,411,8],[448,39,411,2],[449,0,412,1],[451,0,414,0],[451,11,414,9,"assertProgram"],[451,24,414,0],[451,25,414,23,"node"],[451,29,414,0],[451,31,414,40],[452,0,414,40],[452,8,414,29,"opts"],[452,12,414,40],[452,83,414,36],[452,85,414,40],[453,0,415,2,"assert"],[453,4,415,2,"assert"],[453,10,415,8],[453,11,415,9],[453,20,415,8],[453,22,415,20,"node"],[453,26,415,8],[453,28,415,26,"opts"],[453,32,415,8],[453,33,415,2],[454,0,416,1],[456,0,418,0],[456,11,418,9,"assertObjectExpression"],[456,33,418,0],[456,34,418,32,"node"],[456,38,418,0],[456,40,418,49],[457,0,418,49],[457,8,418,38,"opts"],[457,12,418,49],[457,83,418,45],[457,85,418,49],[458,0,419,2,"assert"],[458,4,419,2,"assert"],[458,10,419,8],[458,11,419,9],[458,29,419,8],[458,31,419,29,"node"],[458,35,419,8],[458,37,419,35,"opts"],[458,41,419,8],[458,42,419,2],[459,0,420,1],[461,0,422,0],[461,11,422,9,"assertObjectMethod"],[461,29,422,0],[461,30,422,28,"node"],[461,34,422,0],[461,36,422,45],[462,0,422,45],[462,8,422,34,"opts"],[462,12,422,45],[462,83,422,41],[462,85,422,45],[463,0,423,2,"assert"],[463,4,423,2,"assert"],[463,10,423,8],[463,11,423,9],[463,25,423,8],[463,27,423,25,"node"],[463,31,423,8],[463,33,423,31,"opts"],[463,37,423,8],[463,38,423,2],[464,0,424,1],[466,0,426,0],[466,11,426,9,"assertObjectProperty"],[466,31,426,0],[466,32,426,30,"node"],[466,36,426,0],[466,38,426,47],[467,0,426,47],[467,8,426,36,"opts"],[467,12,426,47],[467,83,426,43],[467,85,426,47],[468,0,427,2,"assert"],[468,4,427,2,"assert"],[468,10,427,8],[468,11,427,9],[468,27,427,8],[468,29,427,27,"node"],[468,33,427,8],[468,35,427,33,"opts"],[468,39,427,8],[468,40,427,2],[469,0,428,1],[471,0,430,0],[471,11,430,9,"assertRestElement"],[471,28,430,0],[471,29,430,27,"node"],[471,33,430,0],[471,35,430,44],[472,0,430,44],[472,8,430,33,"opts"],[472,12,430,44],[472,83,430,40],[472,85,430,44],[473,0,431,2,"assert"],[473,4,431,2,"assert"],[473,10,431,8],[473,11,431,9],[473,24,431,8],[473,26,431,24,"node"],[473,30,431,8],[473,32,431,30,"opts"],[473,36,431,8],[473,37,431,2],[474,0,432,1],[476,0,434,0],[476,11,434,9,"assertReturnStatement"],[476,32,434,0],[476,33,434,31,"node"],[476,37,434,0],[476,39,434,48],[477,0,434,48],[477,8,434,37,"opts"],[477,12,434,48],[477,83,434,44],[477,85,434,48],[478,0,435,2,"assert"],[478,4,435,2,"assert"],[478,10,435,8],[478,11,435,9],[478,28,435,8],[478,30,435,28,"node"],[478,34,435,8],[478,36,435,34,"opts"],[478,40,435,8],[478,41,435,2],[479,0,436,1],[481,0,438,0],[481,11,438,9,"assertSequenceExpression"],[481,35,438,0],[481,36,438,34,"node"],[481,40,438,0],[481,42,438,51],[482,0,438,51],[482,8,438,40,"opts"],[482,12,438,51],[482,83,438,47],[482,85,438,51],[483,0,439,2,"assert"],[483,4,439,2,"assert"],[483,10,439,8],[483,11,439,9],[483,31,439,8],[483,33,439,31,"node"],[483,37,439,8],[483,39,439,37,"opts"],[483,43,439,8],[483,44,439,2],[484,0,440,1],[486,0,442,0],[486,11,442,9,"assertParenthesizedExpression"],[486,40,442,0],[486,41,442,39,"node"],[486,45,442,0],[486,47,442,56],[487,0,442,56],[487,8,442,45,"opts"],[487,12,442,56],[487,83,442,52],[487,85,442,56],[488,0,443,2,"assert"],[488,4,443,2,"assert"],[488,10,443,8],[488,11,443,9],[488,36,443,8],[488,38,443,36,"node"],[488,42,443,8],[488,44,443,42,"opts"],[488,48,443,8],[488,49,443,2],[489,0,444,1],[491,0,446,0],[491,11,446,9,"assertSwitchCase"],[491,27,446,0],[491,28,446,26,"node"],[491,32,446,0],[491,34,446,43],[492,0,446,43],[492,8,446,32,"opts"],[492,12,446,43],[492,83,446,39],[492,85,446,43],[493,0,447,2,"assert"],[493,4,447,2,"assert"],[493,10,447,8],[493,11,447,9],[493,23,447,8],[493,25,447,23,"node"],[493,29,447,8],[493,31,447,29,"opts"],[493,35,447,8],[493,36,447,2],[494,0,448,1],[496,0,450,0],[496,11,450,9,"assertSwitchStatement"],[496,32,450,0],[496,33,450,31,"node"],[496,37,450,0],[496,39,450,48],[497,0,450,48],[497,8,450,37,"opts"],[497,12,450,48],[497,83,450,44],[497,85,450,48],[498,0,451,2,"assert"],[498,4,451,2,"assert"],[498,10,451,8],[498,11,451,9],[498,28,451,8],[498,30,451,28,"node"],[498,34,451,8],[498,36,451,34,"opts"],[498,40,451,8],[498,41,451,2],[499,0,452,1],[501,0,454,0],[501,11,454,9,"assertThisExpression"],[501,31,454,0],[501,32,454,30,"node"],[501,36,454,0],[501,38,454,47],[502,0,454,47],[502,8,454,36,"opts"],[502,12,454,47],[502,83,454,43],[502,85,454,47],[503,0,455,2,"assert"],[503,4,455,2,"assert"],[503,10,455,8],[503,11,455,9],[503,27,455,8],[503,29,455,27,"node"],[503,33,455,8],[503,35,455,33,"opts"],[503,39,455,8],[503,40,455,2],[504,0,456,1],[506,0,458,0],[506,11,458,9,"assertThrowStatement"],[506,31,458,0],[506,32,458,30,"node"],[506,36,458,0],[506,38,458,47],[507,0,458,47],[507,8,458,36,"opts"],[507,12,458,47],[507,83,458,43],[507,85,458,47],[508,0,459,2,"assert"],[508,4,459,2,"assert"],[508,10,459,8],[508,11,459,9],[508,27,459,8],[508,29,459,27,"node"],[508,33,459,8],[508,35,459,33,"opts"],[508,39,459,8],[508,40,459,2],[509,0,460,1],[511,0,462,0],[511,11,462,9,"assertTryStatement"],[511,29,462,0],[511,30,462,28,"node"],[511,34,462,0],[511,36,462,45],[512,0,462,45],[512,8,462,34,"opts"],[512,12,462,45],[512,83,462,41],[512,85,462,45],[513,0,463,2,"assert"],[513,4,463,2,"assert"],[513,10,463,8],[513,11,463,9],[513,25,463,8],[513,27,463,25,"node"],[513,31,463,8],[513,33,463,31,"opts"],[513,37,463,8],[513,38,463,2],[514,0,464,1],[516,0,466,0],[516,11,466,9,"assertUnaryExpression"],[516,32,466,0],[516,33,466,31,"node"],[516,37,466,0],[516,39,466,48],[517,0,466,48],[517,8,466,37,"opts"],[517,12,466,48],[517,83,466,44],[517,85,466,48],[518,0,467,2,"assert"],[518,4,467,2,"assert"],[518,10,467,8],[518,11,467,9],[518,28,467,8],[518,30,467,28,"node"],[518,34,467,8],[518,36,467,34,"opts"],[518,40,467,8],[518,41,467,2],[519,0,468,1],[521,0,470,0],[521,11,470,9,"assertUpdateExpression"],[521,33,470,0],[521,34,470,32,"node"],[521,38,470,0],[521,40,470,49],[522,0,470,49],[522,8,470,38,"opts"],[522,12,470,49],[522,83,470,45],[522,85,470,49],[523,0,471,2,"assert"],[523,4,471,2,"assert"],[523,10,471,8],[523,11,471,9],[523,29,471,8],[523,31,471,29,"node"],[523,35,471,8],[523,37,471,35,"opts"],[523,41,471,8],[523,42,471,2],[524,0,472,1],[526,0,474,0],[526,11,474,9,"assertVariableDeclaration"],[526,36,474,0],[526,37,474,35,"node"],[526,41,474,0],[526,43,474,52],[527,0,474,52],[527,8,474,41,"opts"],[527,12,474,52],[527,83,474,48],[527,85,474,52],[528,0,475,2,"assert"],[528,4,475,2,"assert"],[528,10,475,8],[528,11,475,9],[528,32,475,8],[528,34,475,32,"node"],[528,38,475,8],[528,40,475,38,"opts"],[528,44,475,8],[528,45,475,2],[529,0,476,1],[531,0,478,0],[531,11,478,9,"assertVariableDeclarator"],[531,35,478,0],[531,36,478,34,"node"],[531,40,478,0],[531,42,478,51],[532,0,478,51],[532,8,478,40,"opts"],[532,12,478,51],[532,83,478,47],[532,85,478,51],[533,0,479,2,"assert"],[533,4,479,2,"assert"],[533,10,479,8],[533,11,479,9],[533,31,479,8],[533,33,479,31,"node"],[533,37,479,8],[533,39,479,37,"opts"],[533,43,479,8],[533,44,479,2],[534,0,480,1],[536,0,482,0],[536,11,482,9,"assertWhileStatement"],[536,31,482,0],[536,32,482,30,"node"],[536,36,482,0],[536,38,482,47],[537,0,482,47],[537,8,482,36,"opts"],[537,12,482,47],[537,83,482,43],[537,85,482,47],[538,0,483,2,"assert"],[538,4,483,2,"assert"],[538,10,483,8],[538,11,483,9],[538,27,483,8],[538,29,483,27,"node"],[538,33,483,8],[538,35,483,33,"opts"],[538,39,483,8],[538,40,483,2],[539,0,484,1],[541,0,486,0],[541,11,486,9,"assertWithStatement"],[541,30,486,0],[541,31,486,29,"node"],[541,35,486,0],[541,37,486,46],[542,0,486,46],[542,8,486,35,"opts"],[542,12,486,46],[542,83,486,42],[542,85,486,46],[543,0,487,2,"assert"],[543,4,487,2,"assert"],[543,10,487,8],[543,11,487,9],[543,26,487,8],[543,28,487,26,"node"],[543,32,487,8],[543,34,487,32,"opts"],[543,38,487,8],[543,39,487,2],[544,0,488,1],[546,0,490,0],[546,11,490,9,"assertAssignmentPattern"],[546,34,490,0],[546,35,490,33,"node"],[546,39,490,0],[546,41,490,50],[547,0,490,50],[547,8,490,39,"opts"],[547,12,490,50],[547,83,490,46],[547,85,490,50],[548,0,491,2,"assert"],[548,4,491,2,"assert"],[548,10,491,8],[548,11,491,9],[548,30,491,8],[548,32,491,30,"node"],[548,36,491,8],[548,38,491,36,"opts"],[548,42,491,8],[548,43,491,2],[549,0,492,1],[551,0,494,0],[551,11,494,9,"assertArrayPattern"],[551,29,494,0],[551,30,494,28,"node"],[551,34,494,0],[551,36,494,45],[552,0,494,45],[552,8,494,34,"opts"],[552,12,494,45],[552,83,494,41],[552,85,494,45],[553,0,495,2,"assert"],[553,4,495,2,"assert"],[553,10,495,8],[553,11,495,9],[553,25,495,8],[553,27,495,25,"node"],[553,31,495,8],[553,33,495,31,"opts"],[553,37,495,8],[553,38,495,2],[554,0,496,1],[556,0,498,0],[556,11,498,9,"assertArrowFunctionExpression"],[556,40,498,0],[556,41,498,39,"node"],[556,45,498,0],[556,47,498,56],[557,0,498,56],[557,8,498,45,"opts"],[557,12,498,56],[557,83,498,52],[557,85,498,56],[558,0,499,2,"assert"],[558,4,499,2,"assert"],[558,10,499,8],[558,11,499,9],[558,36,499,8],[558,38,499,36,"node"],[558,42,499,8],[558,44,499,42,"opts"],[558,48,499,8],[558,49,499,2],[559,0,500,1],[561,0,502,0],[561,11,502,9,"assertClassBody"],[561,26,502,0],[561,27,502,25,"node"],[561,31,502,0],[561,33,502,42],[562,0,502,42],[562,8,502,31,"opts"],[562,12,502,42],[562,83,502,38],[562,85,502,42],[563,0,503,2,"assert"],[563,4,503,2,"assert"],[563,10,503,8],[563,11,503,9],[563,22,503,8],[563,24,503,22,"node"],[563,28,503,8],[563,30,503,28,"opts"],[563,34,503,8],[563,35,503,2],[564,0,504,1],[566,0,506,0],[566,11,506,9,"assertClassDeclaration"],[566,33,506,0],[566,34,506,32,"node"],[566,38,506,0],[566,40,506,49],[567,0,506,49],[567,8,506,38,"opts"],[567,12,506,49],[567,83,506,45],[567,85,506,49],[568,0,507,2,"assert"],[568,4,507,2,"assert"],[568,10,507,8],[568,11,507,9],[568,29,507,8],[568,31,507,29,"node"],[568,35,507,8],[568,37,507,35,"opts"],[568,41,507,8],[568,42,507,2],[569,0,508,1],[571,0,510,0],[571,11,510,9,"assertClassExpression"],[571,32,510,0],[571,33,510,31,"node"],[571,37,510,0],[571,39,510,48],[572,0,510,48],[572,8,510,37,"opts"],[572,12,510,48],[572,83,510,44],[572,85,510,48],[573,0,511,2,"assert"],[573,4,511,2,"assert"],[573,10,511,8],[573,11,511,9],[573,28,511,8],[573,30,511,28,"node"],[573,34,511,8],[573,36,511,34,"opts"],[573,40,511,8],[573,41,511,2],[574,0,512,1],[576,0,514,0],[576,11,514,9,"assertExportAllDeclaration"],[576,37,514,0],[576,38,514,36,"node"],[576,42,514,0],[576,44,514,53],[577,0,514,53],[577,8,514,42,"opts"],[577,12,514,53],[577,83,514,49],[577,85,514,53],[578,0,515,2,"assert"],[578,4,515,2,"assert"],[578,10,515,8],[578,11,515,9],[578,33,515,8],[578,35,515,33,"node"],[578,39,515,8],[578,41,515,39,"opts"],[578,45,515,8],[578,46,515,2],[579,0,516,1],[581,0,518,0],[581,11,518,9,"assertExportDefaultDeclaration"],[581,41,518,0],[581,42,518,40,"node"],[581,46,518,0],[581,48,518,57],[582,0,518,57],[582,8,518,46,"opts"],[582,12,518,57],[582,83,518,53],[582,85,518,57],[583,0,519,2,"assert"],[583,4,519,2,"assert"],[583,10,519,8],[583,11,519,9],[583,37,519,8],[583,39,519,37,"node"],[583,43,519,8],[583,45,519,43,"opts"],[583,49,519,8],[583,50,519,2],[584,0,520,1],[586,0,522,0],[586,11,522,9,"assertExportNamedDeclaration"],[586,39,522,0],[586,40,522,38,"node"],[586,44,522,0],[586,46,522,55],[587,0,522,55],[587,8,522,44,"opts"],[587,12,522,55],[587,83,522,51],[587,85,522,55],[588,0,523,2,"assert"],[588,4,523,2,"assert"],[588,10,523,8],[588,11,523,9],[588,35,523,8],[588,37,523,35,"node"],[588,41,523,8],[588,43,523,41,"opts"],[588,47,523,8],[588,48,523,2],[589,0,524,1],[591,0,526,0],[591,11,526,9,"assertExportSpecifier"],[591,32,526,0],[591,33,526,31,"node"],[591,37,526,0],[591,39,526,48],[592,0,526,48],[592,8,526,37,"opts"],[592,12,526,48],[592,83,526,44],[592,85,526,48],[593,0,527,2,"assert"],[593,4,527,2,"assert"],[593,10,527,8],[593,11,527,9],[593,28,527,8],[593,30,527,28,"node"],[593,34,527,8],[593,36,527,34,"opts"],[593,40,527,8],[593,41,527,2],[594,0,528,1],[596,0,530,0],[596,11,530,9,"assertForOfStatement"],[596,31,530,0],[596,32,530,30,"node"],[596,36,530,0],[596,38,530,47],[597,0,530,47],[597,8,530,36,"opts"],[597,12,530,47],[597,83,530,43],[597,85,530,47],[598,0,531,2,"assert"],[598,4,531,2,"assert"],[598,10,531,8],[598,11,531,9],[598,27,531,8],[598,29,531,27,"node"],[598,33,531,8],[598,35,531,33,"opts"],[598,39,531,8],[598,40,531,2],[599,0,532,1],[601,0,534,0],[601,11,534,9,"assertImportDeclaration"],[601,34,534,0],[601,35,534,33,"node"],[601,39,534,0],[601,41,534,50],[602,0,534,50],[602,8,534,39,"opts"],[602,12,534,50],[602,83,534,46],[602,85,534,50],[603,0,535,2,"assert"],[603,4,535,2,"assert"],[603,10,535,8],[603,11,535,9],[603,30,535,8],[603,32,535,30,"node"],[603,36,535,8],[603,38,535,36,"opts"],[603,42,535,8],[603,43,535,2],[604,0,536,1],[606,0,538,0],[606,11,538,9,"assertImportDefaultSpecifier"],[606,39,538,0],[606,40,538,38,"node"],[606,44,538,0],[606,46,538,55],[607,0,538,55],[607,8,538,44,"opts"],[607,12,538,55],[607,83,538,51],[607,85,538,55],[608,0,539,2,"assert"],[608,4,539,2,"assert"],[608,10,539,8],[608,11,539,9],[608,35,539,8],[608,37,539,35,"node"],[608,41,539,8],[608,43,539,41,"opts"],[608,47,539,8],[608,48,539,2],[609,0,540,1],[611,0,542,0],[611,11,542,9,"assertImportNamespaceSpecifier"],[611,41,542,0],[611,42,542,40,"node"],[611,46,542,0],[611,48,542,57],[612,0,542,57],[612,8,542,46,"opts"],[612,12,542,57],[612,83,542,53],[612,85,542,57],[613,0,543,2,"assert"],[613,4,543,2,"assert"],[613,10,543,8],[613,11,543,9],[613,37,543,8],[613,39,543,37,"node"],[613,43,543,8],[613,45,543,43,"opts"],[613,49,543,8],[613,50,543,2],[614,0,544,1],[616,0,546,0],[616,11,546,9,"assertImportSpecifier"],[616,32,546,0],[616,33,546,31,"node"],[616,37,546,0],[616,39,546,48],[617,0,546,48],[617,8,546,37,"opts"],[617,12,546,48],[617,83,546,44],[617,85,546,48],[618,0,547,2,"assert"],[618,4,547,2,"assert"],[618,10,547,8],[618,11,547,9],[618,28,547,8],[618,30,547,28,"node"],[618,34,547,8],[618,36,547,34,"opts"],[618,40,547,8],[618,41,547,2],[619,0,548,1],[621,0,550,0],[621,11,550,9,"assertMetaProperty"],[621,29,550,0],[621,30,550,28,"node"],[621,34,550,0],[621,36,550,45],[622,0,550,45],[622,8,550,34,"opts"],[622,12,550,45],[622,83,550,41],[622,85,550,45],[623,0,551,2,"assert"],[623,4,551,2,"assert"],[623,10,551,8],[623,11,551,9],[623,25,551,8],[623,27,551,25,"node"],[623,31,551,8],[623,33,551,31,"opts"],[623,37,551,8],[623,38,551,2],[624,0,552,1],[626,0,554,0],[626,11,554,9,"assertClassMethod"],[626,28,554,0],[626,29,554,27,"node"],[626,33,554,0],[626,35,554,44],[627,0,554,44],[627,8,554,33,"opts"],[627,12,554,44],[627,83,554,40],[627,85,554,44],[628,0,555,2,"assert"],[628,4,555,2,"assert"],[628,10,555,8],[628,11,555,9],[628,24,555,8],[628,26,555,24,"node"],[628,30,555,8],[628,32,555,30,"opts"],[628,36,555,8],[628,37,555,2],[629,0,556,1],[631,0,558,0],[631,11,558,9,"assertObjectPattern"],[631,30,558,0],[631,31,558,29,"node"],[631,35,558,0],[631,37,558,46],[632,0,558,46],[632,8,558,35,"opts"],[632,12,558,46],[632,83,558,42],[632,85,558,46],[633,0,559,2,"assert"],[633,4,559,2,"assert"],[633,10,559,8],[633,11,559,9],[633,26,559,8],[633,28,559,26,"node"],[633,32,559,8],[633,34,559,32,"opts"],[633,38,559,8],[633,39,559,2],[634,0,560,1],[636,0,562,0],[636,11,562,9,"assertSpreadElement"],[636,30,562,0],[636,31,562,29,"node"],[636,35,562,0],[636,37,562,46],[637,0,562,46],[637,8,562,35,"opts"],[637,12,562,46],[637,83,562,42],[637,85,562,46],[638,0,563,2,"assert"],[638,4,563,2,"assert"],[638,10,563,8],[638,11,563,9],[638,26,563,8],[638,28,563,26,"node"],[638,32,563,8],[638,34,563,32,"opts"],[638,38,563,8],[638,39,563,2],[639,0,564,1],[641,0,566,0],[641,11,566,9,"assertSuper"],[641,22,566,0],[641,23,566,21,"node"],[641,27,566,0],[641,29,566,38],[642,0,566,38],[642,8,566,27,"opts"],[642,12,566,38],[642,83,566,34],[642,85,566,38],[643,0,567,2,"assert"],[643,4,567,2,"assert"],[643,10,567,8],[643,11,567,9],[643,18,567,8],[643,20,567,18,"node"],[643,24,567,8],[643,26,567,24,"opts"],[643,30,567,8],[643,31,567,2],[644,0,568,1],[646,0,570,0],[646,11,570,9,"assertTaggedTemplateExpression"],[646,41,570,0],[646,42,570,40,"node"],[646,46,570,0],[646,48,570,57],[647,0,570,57],[647,8,570,46,"opts"],[647,12,570,57],[647,83,570,53],[647,85,570,57],[648,0,571,2,"assert"],[648,4,571,2,"assert"],[648,10,571,8],[648,11,571,9],[648,37,571,8],[648,39,571,37,"node"],[648,43,571,8],[648,45,571,43,"opts"],[648,49,571,8],[648,50,571,2],[649,0,572,1],[651,0,574,0],[651,11,574,9,"assertTemplateElement"],[651,32,574,0],[651,33,574,31,"node"],[651,37,574,0],[651,39,574,48],[652,0,574,48],[652,8,574,37,"opts"],[652,12,574,48],[652,83,574,44],[652,85,574,48],[653,0,575,2,"assert"],[653,4,575,2,"assert"],[653,10,575,8],[653,11,575,9],[653,28,575,8],[653,30,575,28,"node"],[653,34,575,8],[653,36,575,34,"opts"],[653,40,575,8],[653,41,575,2],[654,0,576,1],[656,0,578,0],[656,11,578,9,"assertTemplateLiteral"],[656,32,578,0],[656,33,578,31,"node"],[656,37,578,0],[656,39,578,48],[657,0,578,48],[657,8,578,37,"opts"],[657,12,578,48],[657,83,578,44],[657,85,578,48],[658,0,579,2,"assert"],[658,4,579,2,"assert"],[658,10,579,8],[658,11,579,9],[658,28,579,8],[658,30,579,28,"node"],[658,34,579,8],[658,36,579,34,"opts"],[658,40,579,8],[658,41,579,2],[659,0,580,1],[661,0,582,0],[661,11,582,9,"assertYieldExpression"],[661,32,582,0],[661,33,582,31,"node"],[661,37,582,0],[661,39,582,48],[662,0,582,48],[662,8,582,37,"opts"],[662,12,582,48],[662,83,582,44],[662,85,582,48],[663,0,583,2,"assert"],[663,4,583,2,"assert"],[663,10,583,8],[663,11,583,9],[663,28,583,8],[663,30,583,28,"node"],[663,34,583,8],[663,36,583,34,"opts"],[663,40,583,8],[663,41,583,2],[664,0,584,1],[666,0,586,0],[666,11,586,9,"assertAnyTypeAnnotation"],[666,34,586,0],[666,35,586,33,"node"],[666,39,586,0],[666,41,586,50],[667,0,586,50],[667,8,586,39,"opts"],[667,12,586,50],[667,83,586,46],[667,85,586,50],[668,0,587,2,"assert"],[668,4,587,2,"assert"],[668,10,587,8],[668,11,587,9],[668,30,587,8],[668,32,587,30,"node"],[668,36,587,8],[668,38,587,36,"opts"],[668,42,587,8],[668,43,587,2],[669,0,588,1],[671,0,590,0],[671,11,590,9,"assertArrayTypeAnnotation"],[671,36,590,0],[671,37,590,35,"node"],[671,41,590,0],[671,43,590,52],[672,0,590,52],[672,8,590,41,"opts"],[672,12,590,52],[672,83,590,48],[672,85,590,52],[673,0,591,2,"assert"],[673,4,591,2,"assert"],[673,10,591,8],[673,11,591,9],[673,32,591,8],[673,34,591,32,"node"],[673,38,591,8],[673,40,591,38,"opts"],[673,44,591,8],[673,45,591,2],[674,0,592,1],[676,0,594,0],[676,11,594,9,"assertBooleanTypeAnnotation"],[676,38,594,0],[676,39,594,37,"node"],[676,43,594,0],[676,45,594,54],[677,0,594,54],[677,8,594,43,"opts"],[677,12,594,54],[677,83,594,50],[677,85,594,54],[678,0,595,2,"assert"],[678,4,595,2,"assert"],[678,10,595,8],[678,11,595,9],[678,34,595,8],[678,36,595,34,"node"],[678,40,595,8],[678,42,595,40,"opts"],[678,46,595,8],[678,47,595,2],[679,0,596,1],[681,0,598,0],[681,11,598,9,"assertBooleanLiteralTypeAnnotation"],[681,45,598,0],[681,46,598,44,"node"],[681,50,598,0],[681,52,598,61],[682,0,598,61],[682,8,598,50,"opts"],[682,12,598,61],[682,83,598,57],[682,85,598,61],[683,0,599,2,"assert"],[683,4,599,2,"assert"],[683,10,599,8],[683,11,599,9],[683,41,599,8],[683,43,599,41,"node"],[683,47,599,8],[683,49,599,47,"opts"],[683,53,599,8],[683,54,599,2],[684,0,600,1],[686,0,602,0],[686,11,602,9,"assertNullLiteralTypeAnnotation"],[686,42,602,0],[686,43,602,41,"node"],[686,47,602,0],[686,49,602,58],[687,0,602,58],[687,8,602,47,"opts"],[687,12,602,58],[687,83,602,54],[687,85,602,58],[688,0,603,2,"assert"],[688,4,603,2,"assert"],[688,10,603,8],[688,11,603,9],[688,38,603,8],[688,40,603,38,"node"],[688,44,603,8],[688,46,603,44,"opts"],[688,50,603,8],[688,51,603,2],[689,0,604,1],[691,0,606,0],[691,11,606,9,"assertClassImplements"],[691,32,606,0],[691,33,606,31,"node"],[691,37,606,0],[691,39,606,48],[692,0,606,48],[692,8,606,37,"opts"],[692,12,606,48],[692,83,606,44],[692,85,606,48],[693,0,607,2,"assert"],[693,4,607,2,"assert"],[693,10,607,8],[693,11,607,9],[693,28,607,8],[693,30,607,28,"node"],[693,34,607,8],[693,36,607,34,"opts"],[693,40,607,8],[693,41,607,2],[694,0,608,1],[696,0,610,0],[696,11,610,9,"assertDeclareClass"],[696,29,610,0],[696,30,610,28,"node"],[696,34,610,0],[696,36,610,45],[697,0,610,45],[697,8,610,34,"opts"],[697,12,610,45],[697,83,610,41],[697,85,610,45],[698,0,611,2,"assert"],[698,4,611,2,"assert"],[698,10,611,8],[698,11,611,9],[698,25,611,8],[698,27,611,25,"node"],[698,31,611,8],[698,33,611,31,"opts"],[698,37,611,8],[698,38,611,2],[699,0,612,1],[701,0,614,0],[701,11,614,9,"assertDeclareFunction"],[701,32,614,0],[701,33,614,31,"node"],[701,37,614,0],[701,39,614,48],[702,0,614,48],[702,8,614,37,"opts"],[702,12,614,48],[702,83,614,44],[702,85,614,48],[703,0,615,2,"assert"],[703,4,615,2,"assert"],[703,10,615,8],[703,11,615,9],[703,28,615,8],[703,30,615,28,"node"],[703,34,615,8],[703,36,615,34,"opts"],[703,40,615,8],[703,41,615,2],[704,0,616,1],[706,0,618,0],[706,11,618,9,"assertDeclareInterface"],[706,33,618,0],[706,34,618,32,"node"],[706,38,618,0],[706,40,618,49],[707,0,618,49],[707,8,618,38,"opts"],[707,12,618,49],[707,83,618,45],[707,85,618,49],[708,0,619,2,"assert"],[708,4,619,2,"assert"],[708,10,619,8],[708,11,619,9],[708,29,619,8],[708,31,619,29,"node"],[708,35,619,8],[708,37,619,35,"opts"],[708,41,619,8],[708,42,619,2],[709,0,620,1],[711,0,622,0],[711,11,622,9,"assertDeclareModule"],[711,30,622,0],[711,31,622,29,"node"],[711,35,622,0],[711,37,622,46],[712,0,622,46],[712,8,622,35,"opts"],[712,12,622,46],[712,83,622,42],[712,85,622,46],[713,0,623,2,"assert"],[713,4,623,2,"assert"],[713,10,623,8],[713,11,623,9],[713,26,623,8],[713,28,623,26,"node"],[713,32,623,8],[713,34,623,32,"opts"],[713,38,623,8],[713,39,623,2],[714,0,624,1],[716,0,626,0],[716,11,626,9,"assertDeclareModuleExports"],[716,37,626,0],[716,38,626,36,"node"],[716,42,626,0],[716,44,626,53],[717,0,626,53],[717,8,626,42,"opts"],[717,12,626,53],[717,83,626,49],[717,85,626,53],[718,0,627,2,"assert"],[718,4,627,2,"assert"],[718,10,627,8],[718,11,627,9],[718,33,627,8],[718,35,627,33,"node"],[718,39,627,8],[718,41,627,39,"opts"],[718,45,627,8],[718,46,627,2],[719,0,628,1],[721,0,630,0],[721,11,630,9,"assertDeclareTypeAlias"],[721,33,630,0],[721,34,630,32,"node"],[721,38,630,0],[721,40,630,49],[722,0,630,49],[722,8,630,38,"opts"],[722,12,630,49],[722,83,630,45],[722,85,630,49],[723,0,631,2,"assert"],[723,4,631,2,"assert"],[723,10,631,8],[723,11,631,9],[723,29,631,8],[723,31,631,29,"node"],[723,35,631,8],[723,37,631,35,"opts"],[723,41,631,8],[723,42,631,2],[724,0,632,1],[726,0,634,0],[726,11,634,9,"assertDeclareOpaqueType"],[726,34,634,0],[726,35,634,33,"node"],[726,39,634,0],[726,41,634,50],[727,0,634,50],[727,8,634,39,"opts"],[727,12,634,50],[727,83,634,46],[727,85,634,50],[728,0,635,2,"assert"],[728,4,635,2,"assert"],[728,10,635,8],[728,11,635,9],[728,30,635,8],[728,32,635,30,"node"],[728,36,635,8],[728,38,635,36,"opts"],[728,42,635,8],[728,43,635,2],[729,0,636,1],[731,0,638,0],[731,11,638,9,"assertDeclareVariable"],[731,32,638,0],[731,33,638,31,"node"],[731,37,638,0],[731,39,638,48],[732,0,638,48],[732,8,638,37,"opts"],[732,12,638,48],[732,83,638,44],[732,85,638,48],[733,0,639,2,"assert"],[733,4,639,2,"assert"],[733,10,639,8],[733,11,639,9],[733,28,639,8],[733,30,639,28,"node"],[733,34,639,8],[733,36,639,34,"opts"],[733,40,639,8],[733,41,639,2],[734,0,640,1],[736,0,642,0],[736,11,642,9,"assertDeclareExportDeclaration"],[736,41,642,0],[736,42,642,40,"node"],[736,46,642,0],[736,48,642,57],[737,0,642,57],[737,8,642,46,"opts"],[737,12,642,57],[737,83,642,53],[737,85,642,57],[738,0,643,2,"assert"],[738,4,643,2,"assert"],[738,10,643,8],[738,11,643,9],[738,37,643,8],[738,39,643,37,"node"],[738,43,643,8],[738,45,643,43,"opts"],[738,49,643,8],[738,50,643,2],[739,0,644,1],[741,0,646,0],[741,11,646,9,"assertDeclareExportAllDeclaration"],[741,44,646,0],[741,45,646,43,"node"],[741,49,646,0],[741,51,646,60],[742,0,646,60],[742,8,646,49,"opts"],[742,12,646,60],[742,83,646,56],[742,85,646,60],[743,0,647,2,"assert"],[743,4,647,2,"assert"],[743,10,647,8],[743,11,647,9],[743,40,647,8],[743,42,647,40,"node"],[743,46,647,8],[743,48,647,46,"opts"],[743,52,647,8],[743,53,647,2],[744,0,648,1],[746,0,650,0],[746,11,650,9,"assertDeclaredPredicate"],[746,34,650,0],[746,35,650,33,"node"],[746,39,650,0],[746,41,650,50],[747,0,650,50],[747,8,650,39,"opts"],[747,12,650,50],[747,83,650,46],[747,85,650,50],[748,0,651,2,"assert"],[748,4,651,2,"assert"],[748,10,651,8],[748,11,651,9],[748,30,651,8],[748,32,651,30,"node"],[748,36,651,8],[748,38,651,36,"opts"],[748,42,651,8],[748,43,651,2],[749,0,652,1],[751,0,654,0],[751,11,654,9,"assertExistsTypeAnnotation"],[751,37,654,0],[751,38,654,36,"node"],[751,42,654,0],[751,44,654,53],[752,0,654,53],[752,8,654,42,"opts"],[752,12,654,53],[752,83,654,49],[752,85,654,53],[753,0,655,2,"assert"],[753,4,655,2,"assert"],[753,10,655,8],[753,11,655,9],[753,33,655,8],[753,35,655,33,"node"],[753,39,655,8],[753,41,655,39,"opts"],[753,45,655,8],[753,46,655,2],[754,0,656,1],[756,0,658,0],[756,11,658,9,"assertFunctionTypeAnnotation"],[756,39,658,0],[756,40,658,38,"node"],[756,44,658,0],[756,46,658,55],[757,0,658,55],[757,8,658,44,"opts"],[757,12,658,55],[757,83,658,51],[757,85,658,55],[758,0,659,2,"assert"],[758,4,659,2,"assert"],[758,10,659,8],[758,11,659,9],[758,35,659,8],[758,37,659,35,"node"],[758,41,659,8],[758,43,659,41,"opts"],[758,47,659,8],[758,48,659,2],[759,0,660,1],[761,0,662,0],[761,11,662,9,"assertFunctionTypeParam"],[761,34,662,0],[761,35,662,33,"node"],[761,39,662,0],[761,41,662,50],[762,0,662,50],[762,8,662,39,"opts"],[762,12,662,50],[762,83,662,46],[762,85,662,50],[763,0,663,2,"assert"],[763,4,663,2,"assert"],[763,10,663,8],[763,11,663,9],[763,30,663,8],[763,32,663,30,"node"],[763,36,663,8],[763,38,663,36,"opts"],[763,42,663,8],[763,43,663,2],[764,0,664,1],[766,0,666,0],[766,11,666,9,"assertGenericTypeAnnotation"],[766,38,666,0],[766,39,666,37,"node"],[766,43,666,0],[766,45,666,54],[767,0,666,54],[767,8,666,43,"opts"],[767,12,666,54],[767,83,666,50],[767,85,666,54],[768,0,667,2,"assert"],[768,4,667,2,"assert"],[768,10,667,8],[768,11,667,9],[768,34,667,8],[768,36,667,34,"node"],[768,40,667,8],[768,42,667,40,"opts"],[768,46,667,8],[768,47,667,2],[769,0,668,1],[771,0,670,0],[771,11,670,9,"assertInferredPredicate"],[771,34,670,0],[771,35,670,33,"node"],[771,39,670,0],[771,41,670,50],[772,0,670,50],[772,8,670,39,"opts"],[772,12,670,50],[772,83,670,46],[772,85,670,50],[773,0,671,2,"assert"],[773,4,671,2,"assert"],[773,10,671,8],[773,11,671,9],[773,30,671,8],[773,32,671,30,"node"],[773,36,671,8],[773,38,671,36,"opts"],[773,42,671,8],[773,43,671,2],[774,0,672,1],[776,0,674,0],[776,11,674,9,"assertInterfaceExtends"],[776,33,674,0],[776,34,674,32,"node"],[776,38,674,0],[776,40,674,49],[777,0,674,49],[777,8,674,38,"opts"],[777,12,674,49],[777,83,674,45],[777,85,674,49],[778,0,675,2,"assert"],[778,4,675,2,"assert"],[778,10,675,8],[778,11,675,9],[778,29,675,8],[778,31,675,29,"node"],[778,35,675,8],[778,37,675,35,"opts"],[778,41,675,8],[778,42,675,2],[779,0,676,1],[781,0,678,0],[781,11,678,9,"assertInterfaceDeclaration"],[781,37,678,0],[781,38,678,36,"node"],[781,42,678,0],[781,44,678,53],[782,0,678,53],[782,8,678,42,"opts"],[782,12,678,53],[782,83,678,49],[782,85,678,53],[783,0,679,2,"assert"],[783,4,679,2,"assert"],[783,10,679,8],[783,11,679,9],[783,33,679,8],[783,35,679,33,"node"],[783,39,679,8],[783,41,679,39,"opts"],[783,45,679,8],[783,46,679,2],[784,0,680,1],[786,0,682,0],[786,11,682,9,"assertInterfaceTypeAnnotation"],[786,40,682,0],[786,41,682,39,"node"],[786,45,682,0],[786,47,682,56],[787,0,682,56],[787,8,682,45,"opts"],[787,12,682,56],[787,83,682,52],[787,85,682,56],[788,0,683,2,"assert"],[788,4,683,2,"assert"],[788,10,683,8],[788,11,683,9],[788,36,683,8],[788,38,683,36,"node"],[788,42,683,8],[788,44,683,42,"opts"],[788,48,683,8],[788,49,683,2],[789,0,684,1],[791,0,686,0],[791,11,686,9,"assertIntersectionTypeAnnotation"],[791,43,686,0],[791,44,686,42,"node"],[791,48,686,0],[791,50,686,59],[792,0,686,59],[792,8,686,48,"opts"],[792,12,686,59],[792,83,686,55],[792,85,686,59],[793,0,687,2,"assert"],[793,4,687,2,"assert"],[793,10,687,8],[793,11,687,9],[793,39,687,8],[793,41,687,39,"node"],[793,45,687,8],[793,47,687,45,"opts"],[793,51,687,8],[793,52,687,2],[794,0,688,1],[796,0,690,0],[796,11,690,9,"assertMixedTypeAnnotation"],[796,36,690,0],[796,37,690,35,"node"],[796,41,690,0],[796,43,690,52],[797,0,690,52],[797,8,690,41,"opts"],[797,12,690,52],[797,83,690,48],[797,85,690,52],[798,0,691,2,"assert"],[798,4,691,2,"assert"],[798,10,691,8],[798,11,691,9],[798,32,691,8],[798,34,691,32,"node"],[798,38,691,8],[798,40,691,38,"opts"],[798,44,691,8],[798,45,691,2],[799,0,692,1],[801,0,694,0],[801,11,694,9,"assertEmptyTypeAnnotation"],[801,36,694,0],[801,37,694,35,"node"],[801,41,694,0],[801,43,694,52],[802,0,694,52],[802,8,694,41,"opts"],[802,12,694,52],[802,83,694,48],[802,85,694,52],[803,0,695,2,"assert"],[803,4,695,2,"assert"],[803,10,695,8],[803,11,695,9],[803,32,695,8],[803,34,695,32,"node"],[803,38,695,8],[803,40,695,38,"opts"],[803,44,695,8],[803,45,695,2],[804,0,696,1],[806,0,698,0],[806,11,698,9,"assertNullableTypeAnnotation"],[806,39,698,0],[806,40,698,38,"node"],[806,44,698,0],[806,46,698,55],[807,0,698,55],[807,8,698,44,"opts"],[807,12,698,55],[807,83,698,51],[807,85,698,55],[808,0,699,2,"assert"],[808,4,699,2,"assert"],[808,10,699,8],[808,11,699,9],[808,35,699,8],[808,37,699,35,"node"],[808,41,699,8],[808,43,699,41,"opts"],[808,47,699,8],[808,48,699,2],[809,0,700,1],[811,0,702,0],[811,11,702,9,"assertNumberLiteralTypeAnnotation"],[811,44,702,0],[811,45,702,43,"node"],[811,49,702,0],[811,51,702,60],[812,0,702,60],[812,8,702,49,"opts"],[812,12,702,60],[812,83,702,56],[812,85,702,60],[813,0,703,2,"assert"],[813,4,703,2,"assert"],[813,10,703,8],[813,11,703,9],[813,40,703,8],[813,42,703,40,"node"],[813,46,703,8],[813,48,703,46,"opts"],[813,52,703,8],[813,53,703,2],[814,0,704,1],[816,0,706,0],[816,11,706,9,"assertNumberTypeAnnotation"],[816,37,706,0],[816,38,706,36,"node"],[816,42,706,0],[816,44,706,53],[817,0,706,53],[817,8,706,42,"opts"],[817,12,706,53],[817,83,706,49],[817,85,706,53],[818,0,707,2,"assert"],[818,4,707,2,"assert"],[818,10,707,8],[818,11,707,9],[818,33,707,8],[818,35,707,33,"node"],[818,39,707,8],[818,41,707,39,"opts"],[818,45,707,8],[818,46,707,2],[819,0,708,1],[821,0,710,0],[821,11,710,9,"assertObjectTypeAnnotation"],[821,37,710,0],[821,38,710,36,"node"],[821,42,710,0],[821,44,710,53],[822,0,710,53],[822,8,710,42,"opts"],[822,12,710,53],[822,83,710,49],[822,85,710,53],[823,0,711,2,"assert"],[823,4,711,2,"assert"],[823,10,711,8],[823,11,711,9],[823,33,711,8],[823,35,711,33,"node"],[823,39,711,8],[823,41,711,39,"opts"],[823,45,711,8],[823,46,711,2],[824,0,712,1],[826,0,714,0],[826,11,714,9,"assertObjectTypeInternalSlot"],[826,39,714,0],[826,40,714,38,"node"],[826,44,714,0],[826,46,714,55],[827,0,714,55],[827,8,714,44,"opts"],[827,12,714,55],[827,83,714,51],[827,85,714,55],[828,0,715,2,"assert"],[828,4,715,2,"assert"],[828,10,715,8],[828,11,715,9],[828,35,715,8],[828,37,715,35,"node"],[828,41,715,8],[828,43,715,41,"opts"],[828,47,715,8],[828,48,715,2],[829,0,716,1],[831,0,718,0],[831,11,718,9,"assertObjectTypeCallProperty"],[831,39,718,0],[831,40,718,38,"node"],[831,44,718,0],[831,46,718,55],[832,0,718,55],[832,8,718,44,"opts"],[832,12,718,55],[832,83,718,51],[832,85,718,55],[833,0,719,2,"assert"],[833,4,719,2,"assert"],[833,10,719,8],[833,11,719,9],[833,35,719,8],[833,37,719,35,"node"],[833,41,719,8],[833,43,719,41,"opts"],[833,47,719,8],[833,48,719,2],[834,0,720,1],[836,0,722,0],[836,11,722,9,"assertObjectTypeIndexer"],[836,34,722,0],[836,35,722,33,"node"],[836,39,722,0],[836,41,722,50],[837,0,722,50],[837,8,722,39,"opts"],[837,12,722,50],[837,83,722,46],[837,85,722,50],[838,0,723,2,"assert"],[838,4,723,2,"assert"],[838,10,723,8],[838,11,723,9],[838,30,723,8],[838,32,723,30,"node"],[838,36,723,8],[838,38,723,36,"opts"],[838,42,723,8],[838,43,723,2],[839,0,724,1],[841,0,726,0],[841,11,726,9,"assertObjectTypeProperty"],[841,35,726,0],[841,36,726,34,"node"],[841,40,726,0],[841,42,726,51],[842,0,726,51],[842,8,726,40,"opts"],[842,12,726,51],[842,83,726,47],[842,85,726,51],[843,0,727,2,"assert"],[843,4,727,2,"assert"],[843,10,727,8],[843,11,727,9],[843,31,727,8],[843,33,727,31,"node"],[843,37,727,8],[843,39,727,37,"opts"],[843,43,727,8],[843,44,727,2],[844,0,728,1],[846,0,730,0],[846,11,730,9,"assertObjectTypeSpreadProperty"],[846,41,730,0],[846,42,730,40,"node"],[846,46,730,0],[846,48,730,57],[847,0,730,57],[847,8,730,46,"opts"],[847,12,730,57],[847,83,730,53],[847,85,730,57],[848,0,731,2,"assert"],[848,4,731,2,"assert"],[848,10,731,8],[848,11,731,9],[848,37,731,8],[848,39,731,37,"node"],[848,43,731,8],[848,45,731,43,"opts"],[848,49,731,8],[848,50,731,2],[849,0,732,1],[851,0,734,0],[851,11,734,9,"assertOpaqueType"],[851,27,734,0],[851,28,734,26,"node"],[851,32,734,0],[851,34,734,43],[852,0,734,43],[852,8,734,32,"opts"],[852,12,734,43],[852,83,734,39],[852,85,734,43],[853,0,735,2,"assert"],[853,4,735,2,"assert"],[853,10,735,8],[853,11,735,9],[853,23,735,8],[853,25,735,23,"node"],[853,29,735,8],[853,31,735,29,"opts"],[853,35,735,8],[853,36,735,2],[854,0,736,1],[856,0,738,0],[856,11,738,9,"assertQualifiedTypeIdentifier"],[856,40,738,0],[856,41,738,39,"node"],[856,45,738,0],[856,47,738,56],[857,0,738,56],[857,8,738,45,"opts"],[857,12,738,56],[857,83,738,52],[857,85,738,56],[858,0,739,2,"assert"],[858,4,739,2,"assert"],[858,10,739,8],[858,11,739,9],[858,36,739,8],[858,38,739,36,"node"],[858,42,739,8],[858,44,739,42,"opts"],[858,48,739,8],[858,49,739,2],[859,0,740,1],[861,0,742,0],[861,11,742,9,"assertStringLiteralTypeAnnotation"],[861,44,742,0],[861,45,742,43,"node"],[861,49,742,0],[861,51,742,60],[862,0,742,60],[862,8,742,49,"opts"],[862,12,742,60],[862,83,742,56],[862,85,742,60],[863,0,743,2,"assert"],[863,4,743,2,"assert"],[863,10,743,8],[863,11,743,9],[863,40,743,8],[863,42,743,40,"node"],[863,46,743,8],[863,48,743,46,"opts"],[863,52,743,8],[863,53,743,2],[864,0,744,1],[866,0,746,0],[866,11,746,9,"assertStringTypeAnnotation"],[866,37,746,0],[866,38,746,36,"node"],[866,42,746,0],[866,44,746,53],[867,0,746,53],[867,8,746,42,"opts"],[867,12,746,53],[867,83,746,49],[867,85,746,53],[868,0,747,2,"assert"],[868,4,747,2,"assert"],[868,10,747,8],[868,11,747,9],[868,33,747,8],[868,35,747,33,"node"],[868,39,747,8],[868,41,747,39,"opts"],[868,45,747,8],[868,46,747,2],[869,0,748,1],[871,0,750,0],[871,11,750,9,"assertThisTypeAnnotation"],[871,35,750,0],[871,36,750,34,"node"],[871,40,750,0],[871,42,750,51],[872,0,750,51],[872,8,750,40,"opts"],[872,12,750,51],[872,83,750,47],[872,85,750,51],[873,0,751,2,"assert"],[873,4,751,2,"assert"],[873,10,751,8],[873,11,751,9],[873,31,751,8],[873,33,751,31,"node"],[873,37,751,8],[873,39,751,37,"opts"],[873,43,751,8],[873,44,751,2],[874,0,752,1],[876,0,754,0],[876,11,754,9,"assertTupleTypeAnnotation"],[876,36,754,0],[876,37,754,35,"node"],[876,41,754,0],[876,43,754,52],[877,0,754,52],[877,8,754,41,"opts"],[877,12,754,52],[877,83,754,48],[877,85,754,52],[878,0,755,2,"assert"],[878,4,755,2,"assert"],[878,10,755,8],[878,11,755,9],[878,32,755,8],[878,34,755,32,"node"],[878,38,755,8],[878,40,755,38,"opts"],[878,44,755,8],[878,45,755,2],[879,0,756,1],[881,0,758,0],[881,11,758,9,"assertTypeofTypeAnnotation"],[881,37,758,0],[881,38,758,36,"node"],[881,42,758,0],[881,44,758,53],[882,0,758,53],[882,8,758,42,"opts"],[882,12,758,53],[882,83,758,49],[882,85,758,53],[883,0,759,2,"assert"],[883,4,759,2,"assert"],[883,10,759,8],[883,11,759,9],[883,33,759,8],[883,35,759,33,"node"],[883,39,759,8],[883,41,759,39,"opts"],[883,45,759,8],[883,46,759,2],[884,0,760,1],[886,0,762,0],[886,11,762,9,"assertTypeAlias"],[886,26,762,0],[886,27,762,25,"node"],[886,31,762,0],[886,33,762,42],[887,0,762,42],[887,8,762,31,"opts"],[887,12,762,42],[887,83,762,38],[887,85,762,42],[888,0,763,2,"assert"],[888,4,763,2,"assert"],[888,10,763,8],[888,11,763,9],[888,22,763,8],[888,24,763,22,"node"],[888,28,763,8],[888,30,763,28,"opts"],[888,34,763,8],[888,35,763,2],[889,0,764,1],[891,0,766,0],[891,11,766,9,"assertTypeAnnotation"],[891,31,766,0],[891,32,766,30,"node"],[891,36,766,0],[891,38,766,47],[892,0,766,47],[892,8,766,36,"opts"],[892,12,766,47],[892,83,766,43],[892,85,766,47],[893,0,767,2,"assert"],[893,4,767,2,"assert"],[893,10,767,8],[893,11,767,9],[893,27,767,8],[893,29,767,27,"node"],[893,33,767,8],[893,35,767,33,"opts"],[893,39,767,8],[893,40,767,2],[894,0,768,1],[896,0,770,0],[896,11,770,9,"assertTypeCastExpression"],[896,35,770,0],[896,36,770,34,"node"],[896,40,770,0],[896,42,770,51],[897,0,770,51],[897,8,770,40,"opts"],[897,12,770,51],[897,83,770,47],[897,85,770,51],[898,0,771,2,"assert"],[898,4,771,2,"assert"],[898,10,771,8],[898,11,771,9],[898,31,771,8],[898,33,771,31,"node"],[898,37,771,8],[898,39,771,37,"opts"],[898,43,771,8],[898,44,771,2],[899,0,772,1],[901,0,774,0],[901,11,774,9,"assertTypeParameter"],[901,30,774,0],[901,31,774,29,"node"],[901,35,774,0],[901,37,774,46],[902,0,774,46],[902,8,774,35,"opts"],[902,12,774,46],[902,83,774,42],[902,85,774,46],[903,0,775,2,"assert"],[903,4,775,2,"assert"],[903,10,775,8],[903,11,775,9],[903,26,775,8],[903,28,775,26,"node"],[903,32,775,8],[903,34,775,32,"opts"],[903,38,775,8],[903,39,775,2],[904,0,776,1],[906,0,778,0],[906,11,778,9,"assertTypeParameterDeclaration"],[906,41,778,0],[906,42,778,40,"node"],[906,46,778,0],[906,48,778,57],[907,0,778,57],[907,8,778,46,"opts"],[907,12,778,57],[907,83,778,53],[907,85,778,57],[908,0,779,2,"assert"],[908,4,779,2,"assert"],[908,10,779,8],[908,11,779,9],[908,37,779,8],[908,39,779,37,"node"],[908,43,779,8],[908,45,779,43,"opts"],[908,49,779,8],[908,50,779,2],[909,0,780,1],[911,0,782,0],[911,11,782,9,"assertTypeParameterInstantiation"],[911,43,782,0],[911,44,782,42,"node"],[911,48,782,0],[911,50,782,59],[912,0,782,59],[912,8,782,48,"opts"],[912,12,782,59],[912,83,782,55],[912,85,782,59],[913,0,783,2,"assert"],[913,4,783,2,"assert"],[913,10,783,8],[913,11,783,9],[913,39,783,8],[913,41,783,39,"node"],[913,45,783,8],[913,47,783,45,"opts"],[913,51,783,8],[913,52,783,2],[914,0,784,1],[916,0,786,0],[916,11,786,9,"assertUnionTypeAnnotation"],[916,36,786,0],[916,37,786,35,"node"],[916,41,786,0],[916,43,786,52],[917,0,786,52],[917,8,786,41,"opts"],[917,12,786,52],[917,83,786,48],[917,85,786,52],[918,0,787,2,"assert"],[918,4,787,2,"assert"],[918,10,787,8],[918,11,787,9],[918,32,787,8],[918,34,787,32,"node"],[918,38,787,8],[918,40,787,38,"opts"],[918,44,787,8],[918,45,787,2],[919,0,788,1],[921,0,790,0],[921,11,790,9,"assertVariance"],[921,25,790,0],[921,26,790,24,"node"],[921,30,790,0],[921,32,790,41],[922,0,790,41],[922,8,790,30,"opts"],[922,12,790,41],[922,83,790,37],[922,85,790,41],[923,0,791,2,"assert"],[923,4,791,2,"assert"],[923,10,791,8],[923,11,791,9],[923,21,791,8],[923,23,791,21,"node"],[923,27,791,8],[923,29,791,27,"opts"],[923,33,791,8],[923,34,791,2],[924,0,792,1],[926,0,794,0],[926,11,794,9,"assertVoidTypeAnnotation"],[926,35,794,0],[926,36,794,34,"node"],[926,40,794,0],[926,42,794,51],[927,0,794,51],[927,8,794,40,"opts"],[927,12,794,51],[927,83,794,47],[927,85,794,51],[928,0,795,2,"assert"],[928,4,795,2,"assert"],[928,10,795,8],[928,11,795,9],[928,31,795,8],[928,33,795,31,"node"],[928,37,795,8],[928,39,795,37,"opts"],[928,43,795,8],[928,44,795,2],[929,0,796,1],[931,0,798,0],[931,11,798,9,"assertJSXAttribute"],[931,29,798,0],[931,30,798,28,"node"],[931,34,798,0],[931,36,798,45],[932,0,798,45],[932,8,798,34,"opts"],[932,12,798,45],[932,83,798,41],[932,85,798,45],[933,0,799,2,"assert"],[933,4,799,2,"assert"],[933,10,799,8],[933,11,799,9],[933,25,799,8],[933,27,799,25,"node"],[933,31,799,8],[933,33,799,31,"opts"],[933,37,799,8],[933,38,799,2],[934,0,800,1],[936,0,802,0],[936,11,802,9,"assertJSXClosingElement"],[936,34,802,0],[936,35,802,33,"node"],[936,39,802,0],[936,41,802,50],[937,0,802,50],[937,8,802,39,"opts"],[937,12,802,50],[937,83,802,46],[937,85,802,50],[938,0,803,2,"assert"],[938,4,803,2,"assert"],[938,10,803,8],[938,11,803,9],[938,30,803,8],[938,32,803,30,"node"],[938,36,803,8],[938,38,803,36,"opts"],[938,42,803,8],[938,43,803,2],[939,0,804,1],[941,0,806,0],[941,11,806,9,"assertJSXElement"],[941,27,806,0],[941,28,806,26,"node"],[941,32,806,0],[941,34,806,43],[942,0,806,43],[942,8,806,32,"opts"],[942,12,806,43],[942,83,806,39],[942,85,806,43],[943,0,807,2,"assert"],[943,4,807,2,"assert"],[943,10,807,8],[943,11,807,9],[943,23,807,8],[943,25,807,23,"node"],[943,29,807,8],[943,31,807,29,"opts"],[943,35,807,8],[943,36,807,2],[944,0,808,1],[946,0,810,0],[946,11,810,9,"assertJSXEmptyExpression"],[946,35,810,0],[946,36,810,34,"node"],[946,40,810,0],[946,42,810,51],[947,0,810,51],[947,8,810,40,"opts"],[947,12,810,51],[947,83,810,47],[947,85,810,51],[948,0,811,2,"assert"],[948,4,811,2,"assert"],[948,10,811,8],[948,11,811,9],[948,31,811,8],[948,33,811,31,"node"],[948,37,811,8],[948,39,811,37,"opts"],[948,43,811,8],[948,44,811,2],[949,0,812,1],[951,0,814,0],[951,11,814,9,"assertJSXExpressionContainer"],[951,39,814,0],[951,40,814,38,"node"],[951,44,814,0],[951,46,814,55],[952,0,814,55],[952,8,814,44,"opts"],[952,12,814,55],[952,83,814,51],[952,85,814,55],[953,0,815,2,"assert"],[953,4,815,2,"assert"],[953,10,815,8],[953,11,815,9],[953,35,815,8],[953,37,815,35,"node"],[953,41,815,8],[953,43,815,41,"opts"],[953,47,815,8],[953,48,815,2],[954,0,816,1],[956,0,818,0],[956,11,818,9,"assertJSXSpreadChild"],[956,31,818,0],[956,32,818,30,"node"],[956,36,818,0],[956,38,818,47],[957,0,818,47],[957,8,818,36,"opts"],[957,12,818,47],[957,83,818,43],[957,85,818,47],[958,0,819,2,"assert"],[958,4,819,2,"assert"],[958,10,819,8],[958,11,819,9],[958,27,819,8],[958,29,819,27,"node"],[958,33,819,8],[958,35,819,33,"opts"],[958,39,819,8],[958,40,819,2],[959,0,820,1],[961,0,822,0],[961,11,822,9,"assertJSXIdentifier"],[961,30,822,0],[961,31,822,29,"node"],[961,35,822,0],[961,37,822,46],[962,0,822,46],[962,8,822,35,"opts"],[962,12,822,46],[962,83,822,42],[962,85,822,46],[963,0,823,2,"assert"],[963,4,823,2,"assert"],[963,10,823,8],[963,11,823,9],[963,26,823,8],[963,28,823,26,"node"],[963,32,823,8],[963,34,823,32,"opts"],[963,38,823,8],[963,39,823,2],[964,0,824,1],[966,0,826,0],[966,11,826,9,"assertJSXMemberExpression"],[966,36,826,0],[966,37,826,35,"node"],[966,41,826,0],[966,43,826,52],[967,0,826,52],[967,8,826,41,"opts"],[967,12,826,52],[967,83,826,48],[967,85,826,52],[968,0,827,2,"assert"],[968,4,827,2,"assert"],[968,10,827,8],[968,11,827,9],[968,32,827,8],[968,34,827,32,"node"],[968,38,827,8],[968,40,827,38,"opts"],[968,44,827,8],[968,45,827,2],[969,0,828,1],[971,0,830,0],[971,11,830,9,"assertJSXNamespacedName"],[971,34,830,0],[971,35,830,33,"node"],[971,39,830,0],[971,41,830,50],[972,0,830,50],[972,8,830,39,"opts"],[972,12,830,50],[972,83,830,46],[972,85,830,50],[973,0,831,2,"assert"],[973,4,831,2,"assert"],[973,10,831,8],[973,11,831,9],[973,30,831,8],[973,32,831,30,"node"],[973,36,831,8],[973,38,831,36,"opts"],[973,42,831,8],[973,43,831,2],[974,0,832,1],[976,0,834,0],[976,11,834,9,"assertJSXOpeningElement"],[976,34,834,0],[976,35,834,33,"node"],[976,39,834,0],[976,41,834,50],[977,0,834,50],[977,8,834,39,"opts"],[977,12,834,50],[977,83,834,46],[977,85,834,50],[978,0,835,2,"assert"],[978,4,835,2,"assert"],[978,10,835,8],[978,11,835,9],[978,30,835,8],[978,32,835,30,"node"],[978,36,835,8],[978,38,835,36,"opts"],[978,42,835,8],[978,43,835,2],[979,0,836,1],[981,0,838,0],[981,11,838,9,"assertJSXSpreadAttribute"],[981,35,838,0],[981,36,838,34,"node"],[981,40,838,0],[981,42,838,51],[982,0,838,51],[982,8,838,40,"opts"],[982,12,838,51],[982,83,838,47],[982,85,838,51],[983,0,839,2,"assert"],[983,4,839,2,"assert"],[983,10,839,8],[983,11,839,9],[983,31,839,8],[983,33,839,31,"node"],[983,37,839,8],[983,39,839,37,"opts"],[983,43,839,8],[983,44,839,2],[984,0,840,1],[986,0,842,0],[986,11,842,9,"assertJSXText"],[986,24,842,0],[986,25,842,23,"node"],[986,29,842,0],[986,31,842,40],[987,0,842,40],[987,8,842,29,"opts"],[987,12,842,40],[987,83,842,36],[987,85,842,40],[988,0,843,2,"assert"],[988,4,843,2,"assert"],[988,10,843,8],[988,11,843,9],[988,20,843,8],[988,22,843,20,"node"],[988,26,843,8],[988,28,843,26,"opts"],[988,32,843,8],[988,33,843,2],[989,0,844,1],[991,0,846,0],[991,11,846,9,"assertJSXFragment"],[991,28,846,0],[991,29,846,27,"node"],[991,33,846,0],[991,35,846,44],[992,0,846,44],[992,8,846,33,"opts"],[992,12,846,44],[992,83,846,40],[992,85,846,44],[993,0,847,2,"assert"],[993,4,847,2,"assert"],[993,10,847,8],[993,11,847,9],[993,24,847,8],[993,26,847,24,"node"],[993,30,847,8],[993,32,847,30,"opts"],[993,36,847,8],[993,37,847,2],[994,0,848,1],[996,0,850,0],[996,11,850,9,"assertJSXOpeningFragment"],[996,35,850,0],[996,36,850,34,"node"],[996,40,850,0],[996,42,850,51],[997,0,850,51],[997,8,850,40,"opts"],[997,12,850,51],[997,83,850,47],[997,85,850,51],[998,0,851,2,"assert"],[998,4,851,2,"assert"],[998,10,851,8],[998,11,851,9],[998,31,851,8],[998,33,851,31,"node"],[998,37,851,8],[998,39,851,37,"opts"],[998,43,851,8],[998,44,851,2],[999,0,852,1],[1001,0,854,0],[1001,11,854,9,"assertJSXClosingFragment"],[1001,35,854,0],[1001,36,854,34,"node"],[1001,40,854,0],[1001,42,854,51],[1002,0,854,51],[1002,8,854,40,"opts"],[1002,12,854,51],[1002,83,854,47],[1002,85,854,51],[1003,0,855,2,"assert"],[1003,4,855,2,"assert"],[1003,10,855,8],[1003,11,855,9],[1003,31,855,8],[1003,33,855,31,"node"],[1003,37,855,8],[1003,39,855,37,"opts"],[1003,43,855,8],[1003,44,855,2],[1004,0,856,1],[1006,0,858,0],[1006,11,858,9,"assertNoop"],[1006,21,858,0],[1006,22,858,20,"node"],[1006,26,858,0],[1006,28,858,37],[1007,0,858,37],[1007,8,858,26,"opts"],[1007,12,858,37],[1007,83,858,33],[1007,85,858,37],[1008,0,859,2,"assert"],[1008,4,859,2,"assert"],[1008,10,859,8],[1008,11,859,9],[1008,17,859,8],[1008,19,859,17,"node"],[1008,23,859,8],[1008,25,859,23,"opts"],[1008,29,859,8],[1008,30,859,2],[1009,0,860,1],[1011,0,862,0],[1011,11,862,9,"assertPlaceholder"],[1011,28,862,0],[1011,29,862,27,"node"],[1011,33,862,0],[1011,35,862,44],[1012,0,862,44],[1012,8,862,33,"opts"],[1012,12,862,44],[1012,83,862,40],[1012,85,862,44],[1013,0,863,2,"assert"],[1013,4,863,2,"assert"],[1013,10,863,8],[1013,11,863,9],[1013,24,863,8],[1013,26,863,24,"node"],[1013,30,863,8],[1013,32,863,30,"opts"],[1013,36,863,8],[1013,37,863,2],[1014,0,864,1],[1016,0,866,0],[1016,11,866,9,"assertArgumentPlaceholder"],[1016,36,866,0],[1016,37,866,35,"node"],[1016,41,866,0],[1016,43,866,52],[1017,0,866,52],[1017,8,866,41,"opts"],[1017,12,866,52],[1017,83,866,48],[1017,85,866,52],[1018,0,867,2,"assert"],[1018,4,867,2,"assert"],[1018,10,867,8],[1018,11,867,9],[1018,32,867,8],[1018,34,867,32,"node"],[1018,38,867,8],[1018,40,867,38,"opts"],[1018,44,867,8],[1018,45,867,2],[1019,0,868,1],[1021,0,870,0],[1021,11,870,9,"assertAwaitExpression"],[1021,32,870,0],[1021,33,870,31,"node"],[1021,37,870,0],[1021,39,870,48],[1022,0,870,48],[1022,8,870,37,"opts"],[1022,12,870,48],[1022,83,870,44],[1022,85,870,48],[1023,0,871,2,"assert"],[1023,4,871,2,"assert"],[1023,10,871,8],[1023,11,871,9],[1023,28,871,8],[1023,30,871,28,"node"],[1023,34,871,8],[1023,36,871,34,"opts"],[1023,40,871,8],[1023,41,871,2],[1024,0,872,1],[1026,0,874,0],[1026,11,874,9,"assertBindExpression"],[1026,31,874,0],[1026,32,874,30,"node"],[1026,36,874,0],[1026,38,874,47],[1027,0,874,47],[1027,8,874,36,"opts"],[1027,12,874,47],[1027,83,874,43],[1027,85,874,47],[1028,0,875,2,"assert"],[1028,4,875,2,"assert"],[1028,10,875,8],[1028,11,875,9],[1028,27,875,8],[1028,29,875,27,"node"],[1028,33,875,8],[1028,35,875,33,"opts"],[1028,39,875,8],[1028,40,875,2],[1029,0,876,1],[1031,0,878,0],[1031,11,878,9,"assertClassProperty"],[1031,30,878,0],[1031,31,878,29,"node"],[1031,35,878,0],[1031,37,878,46],[1032,0,878,46],[1032,8,878,35,"opts"],[1032,12,878,46],[1032,83,878,42],[1032,85,878,46],[1033,0,879,2,"assert"],[1033,4,879,2,"assert"],[1033,10,879,8],[1033,11,879,9],[1033,26,879,8],[1033,28,879,26,"node"],[1033,32,879,8],[1033,34,879,32,"opts"],[1033,38,879,8],[1033,39,879,2],[1034,0,880,1],[1036,0,882,0],[1036,11,882,9,"assertOptionalMemberExpression"],[1036,41,882,0],[1036,42,882,40,"node"],[1036,46,882,0],[1036,48,882,57],[1037,0,882,57],[1037,8,882,46,"opts"],[1037,12,882,57],[1037,83,882,53],[1037,85,882,57],[1038,0,883,2,"assert"],[1038,4,883,2,"assert"],[1038,10,883,8],[1038,11,883,9],[1038,37,883,8],[1038,39,883,37,"node"],[1038,43,883,8],[1038,45,883,43,"opts"],[1038,49,883,8],[1038,50,883,2],[1039,0,884,1],[1041,0,886,0],[1041,11,886,9,"assertPipelineTopicExpression"],[1041,40,886,0],[1041,41,886,39,"node"],[1041,45,886,0],[1041,47,886,56],[1042,0,886,56],[1042,8,886,45,"opts"],[1042,12,886,56],[1042,83,886,52],[1042,85,886,56],[1043,0,887,2,"assert"],[1043,4,887,2,"assert"],[1043,10,887,8],[1043,11,887,9],[1043,36,887,8],[1043,38,887,36,"node"],[1043,42,887,8],[1043,44,887,42,"opts"],[1043,48,887,8],[1043,49,887,2],[1044,0,888,1],[1046,0,890,0],[1046,11,890,9,"assertPipelineBareFunction"],[1046,37,890,0],[1046,38,890,36,"node"],[1046,42,890,0],[1046,44,890,53],[1047,0,890,53],[1047,8,890,42,"opts"],[1047,12,890,53],[1047,83,890,49],[1047,85,890,53],[1048,0,891,2,"assert"],[1048,4,891,2,"assert"],[1048,10,891,8],[1048,11,891,9],[1048,33,891,8],[1048,35,891,33,"node"],[1048,39,891,8],[1048,41,891,39,"opts"],[1048,45,891,8],[1048,46,891,2],[1049,0,892,1],[1051,0,894,0],[1051,11,894,9,"assertPipelinePrimaryTopicReference"],[1051,46,894,0],[1051,47,894,45,"node"],[1051,51,894,0],[1051,53,894,62],[1052,0,894,62],[1052,8,894,51,"opts"],[1052,12,894,62],[1052,83,894,58],[1052,85,894,62],[1053,0,895,2,"assert"],[1053,4,895,2,"assert"],[1053,10,895,8],[1053,11,895,9],[1053,42,895,8],[1053,44,895,42,"node"],[1053,48,895,8],[1053,50,895,48,"opts"],[1053,54,895,8],[1053,55,895,2],[1054,0,896,1],[1056,0,898,0],[1056,11,898,9,"assertOptionalCallExpression"],[1056,39,898,0],[1056,40,898,38,"node"],[1056,44,898,0],[1056,46,898,55],[1057,0,898,55],[1057,8,898,44,"opts"],[1057,12,898,55],[1057,83,898,51],[1057,85,898,55],[1058,0,899,2,"assert"],[1058,4,899,2,"assert"],[1058,10,899,8],[1058,11,899,9],[1058,35,899,8],[1058,37,899,35,"node"],[1058,41,899,8],[1058,43,899,41,"opts"],[1058,47,899,8],[1058,48,899,2],[1059,0,900,1],[1061,0,902,0],[1061,11,902,9,"assertClassPrivateProperty"],[1061,37,902,0],[1061,38,902,36,"node"],[1061,42,902,0],[1061,44,902,53],[1062,0,902,53],[1062,8,902,42,"opts"],[1062,12,902,53],[1062,83,902,49],[1062,85,902,53],[1063,0,903,2,"assert"],[1063,4,903,2,"assert"],[1063,10,903,8],[1063,11,903,9],[1063,33,903,8],[1063,35,903,33,"node"],[1063,39,903,8],[1063,41,903,39,"opts"],[1063,45,903,8],[1063,46,903,2],[1064,0,904,1],[1066,0,906,0],[1066,11,906,9,"assertClassPrivateMethod"],[1066,35,906,0],[1066,36,906,34,"node"],[1066,40,906,0],[1066,42,906,51],[1067,0,906,51],[1067,8,906,40,"opts"],[1067,12,906,51],[1067,83,906,47],[1067,85,906,51],[1068,0,907,2,"assert"],[1068,4,907,2,"assert"],[1068,10,907,8],[1068,11,907,9],[1068,31,907,8],[1068,33,907,31,"node"],[1068,37,907,8],[1068,39,907,37,"opts"],[1068,43,907,8],[1068,44,907,2],[1069,0,908,1],[1071,0,910,0],[1071,11,910,9,"assertImport"],[1071,23,910,0],[1071,24,910,22,"node"],[1071,28,910,0],[1071,30,910,39],[1072,0,910,39],[1072,8,910,28,"opts"],[1072,12,910,39],[1072,83,910,35],[1072,85,910,39],[1073,0,911,2,"assert"],[1073,4,911,2,"assert"],[1073,10,911,8],[1073,11,911,9],[1073,19,911,8],[1073,21,911,19,"node"],[1073,25,911,8],[1073,27,911,25,"opts"],[1073,31,911,8],[1073,32,911,2],[1074,0,912,1],[1076,0,914,0],[1076,11,914,9,"assertDecorator"],[1076,26,914,0],[1076,27,914,25,"node"],[1076,31,914,0],[1076,33,914,42],[1077,0,914,42],[1077,8,914,31,"opts"],[1077,12,914,42],[1077,83,914,38],[1077,85,914,42],[1078,0,915,2,"assert"],[1078,4,915,2,"assert"],[1078,10,915,8],[1078,11,915,9],[1078,22,915,8],[1078,24,915,22,"node"],[1078,28,915,8],[1078,30,915,28,"opts"],[1078,34,915,8],[1078,35,915,2],[1079,0,916,1],[1081,0,918,0],[1081,11,918,9,"assertDoExpression"],[1081,29,918,0],[1081,30,918,28,"node"],[1081,34,918,0],[1081,36,918,45],[1082,0,918,45],[1082,8,918,34,"opts"],[1082,12,918,45],[1082,83,918,41],[1082,85,918,45],[1083,0,919,2,"assert"],[1083,4,919,2,"assert"],[1083,10,919,8],[1083,11,919,9],[1083,25,919,8],[1083,27,919,25,"node"],[1083,31,919,8],[1083,33,919,31,"opts"],[1083,37,919,8],[1083,38,919,2],[1084,0,920,1],[1086,0,922,0],[1086,11,922,9,"assertExportDefaultSpecifier"],[1086,39,922,0],[1086,40,922,38,"node"],[1086,44,922,0],[1086,46,922,55],[1087,0,922,55],[1087,8,922,44,"opts"],[1087,12,922,55],[1087,83,922,51],[1087,85,922,55],[1088,0,923,2,"assert"],[1088,4,923,2,"assert"],[1088,10,923,8],[1088,11,923,9],[1088,35,923,8],[1088,37,923,35,"node"],[1088,41,923,8],[1088,43,923,41,"opts"],[1088,47,923,8],[1088,48,923,2],[1089,0,924,1],[1091,0,926,0],[1091,11,926,9,"assertExportNamespaceSpecifier"],[1091,41,926,0],[1091,42,926,40,"node"],[1091,46,926,0],[1091,48,926,57],[1092,0,926,57],[1092,8,926,46,"opts"],[1092,12,926,57],[1092,83,926,53],[1092,85,926,57],[1093,0,927,2,"assert"],[1093,4,927,2,"assert"],[1093,10,927,8],[1093,11,927,9],[1093,37,927,8],[1093,39,927,37,"node"],[1093,43,927,8],[1093,45,927,43,"opts"],[1093,49,927,8],[1093,50,927,2],[1094,0,928,1],[1096,0,930,0],[1096,11,930,9,"assertPrivateName"],[1096,28,930,0],[1096,29,930,27,"node"],[1096,33,930,0],[1096,35,930,44],[1097,0,930,44],[1097,8,930,33,"opts"],[1097,12,930,44],[1097,83,930,40],[1097,85,930,44],[1098,0,931,2,"assert"],[1098,4,931,2,"assert"],[1098,10,931,8],[1098,11,931,9],[1098,24,931,8],[1098,26,931,24,"node"],[1098,30,931,8],[1098,32,931,30,"opts"],[1098,36,931,8],[1098,37,931,2],[1099,0,932,1],[1101,0,934,0],[1101,11,934,9,"assertBigIntLiteral"],[1101,30,934,0],[1101,31,934,29,"node"],[1101,35,934,0],[1101,37,934,46],[1102,0,934,46],[1102,8,934,35,"opts"],[1102,12,934,46],[1102,83,934,42],[1102,85,934,46],[1103,0,935,2,"assert"],[1103,4,935,2,"assert"],[1103,10,935,8],[1103,11,935,9],[1103,26,935,8],[1103,28,935,26,"node"],[1103,32,935,8],[1103,34,935,32,"opts"],[1103,38,935,8],[1103,39,935,2],[1104,0,936,1],[1106,0,938,0],[1106,11,938,9,"assertTSParameterProperty"],[1106,36,938,0],[1106,37,938,35,"node"],[1106,41,938,0],[1106,43,938,52],[1107,0,938,52],[1107,8,938,41,"opts"],[1107,12,938,52],[1107,83,938,48],[1107,85,938,52],[1108,0,939,2,"assert"],[1108,4,939,2,"assert"],[1108,10,939,8],[1108,11,939,9],[1108,32,939,8],[1108,34,939,32,"node"],[1108,38,939,8],[1108,40,939,38,"opts"],[1108,44,939,8],[1108,45,939,2],[1109,0,940,1],[1111,0,942,0],[1111,11,942,9,"assertTSDeclareFunction"],[1111,34,942,0],[1111,35,942,33,"node"],[1111,39,942,0],[1111,41,942,50],[1112,0,942,50],[1112,8,942,39,"opts"],[1112,12,942,50],[1112,83,942,46],[1112,85,942,50],[1113,0,943,2,"assert"],[1113,4,943,2,"assert"],[1113,10,943,8],[1113,11,943,9],[1113,30,943,8],[1113,32,943,30,"node"],[1113,36,943,8],[1113,38,943,36,"opts"],[1113,42,943,8],[1113,43,943,2],[1114,0,944,1],[1116,0,946,0],[1116,11,946,9,"assertTSDeclareMethod"],[1116,32,946,0],[1116,33,946,31,"node"],[1116,37,946,0],[1116,39,946,48],[1117,0,946,48],[1117,8,946,37,"opts"],[1117,12,946,48],[1117,83,946,44],[1117,85,946,48],[1118,0,947,2,"assert"],[1118,4,947,2,"assert"],[1118,10,947,8],[1118,11,947,9],[1118,28,947,8],[1118,30,947,28,"node"],[1118,34,947,8],[1118,36,947,34,"opts"],[1118,40,947,8],[1118,41,947,2],[1119,0,948,1],[1121,0,950,0],[1121,11,950,9,"assertTSQualifiedName"],[1121,32,950,0],[1121,33,950,31,"node"],[1121,37,950,0],[1121,39,950,48],[1122,0,950,48],[1122,8,950,37,"opts"],[1122,12,950,48],[1122,83,950,44],[1122,85,950,48],[1123,0,951,2,"assert"],[1123,4,951,2,"assert"],[1123,10,951,8],[1123,11,951,9],[1123,28,951,8],[1123,30,951,28,"node"],[1123,34,951,8],[1123,36,951,34,"opts"],[1123,40,951,8],[1123,41,951,2],[1124,0,952,1],[1126,0,954,0],[1126,11,954,9,"assertTSCallSignatureDeclaration"],[1126,43,954,0],[1126,44,954,42,"node"],[1126,48,954,0],[1126,50,954,59],[1127,0,954,59],[1127,8,954,48,"opts"],[1127,12,954,59],[1127,83,954,55],[1127,85,954,59],[1128,0,955,2,"assert"],[1128,4,955,2,"assert"],[1128,10,955,8],[1128,11,955,9],[1128,39,955,8],[1128,41,955,39,"node"],[1128,45,955,8],[1128,47,955,45,"opts"],[1128,51,955,8],[1128,52,955,2],[1129,0,956,1],[1131,0,958,0],[1131,11,958,9,"assertTSConstructSignatureDeclaration"],[1131,48,958,0],[1131,49,958,47,"node"],[1131,53,958,0],[1131,55,958,64],[1132,0,958,64],[1132,8,958,53,"opts"],[1132,12,958,64],[1132,83,958,60],[1132,85,958,64],[1133,0,959,2,"assert"],[1133,4,959,2,"assert"],[1133,10,959,8],[1133,11,959,9],[1133,44,959,8],[1133,46,959,44,"node"],[1133,50,959,8],[1133,52,959,50,"opts"],[1133,56,959,8],[1133,57,959,2],[1134,0,960,1],[1136,0,962,0],[1136,11,962,9,"assertTSPropertySignature"],[1136,36,962,0],[1136,37,962,35,"node"],[1136,41,962,0],[1136,43,962,52],[1137,0,962,52],[1137,8,962,41,"opts"],[1137,12,962,52],[1137,83,962,48],[1137,85,962,52],[1138,0,963,2,"assert"],[1138,4,963,2,"assert"],[1138,10,963,8],[1138,11,963,9],[1138,32,963,8],[1138,34,963,32,"node"],[1138,38,963,8],[1138,40,963,38,"opts"],[1138,44,963,8],[1138,45,963,2],[1139,0,964,1],[1141,0,966,0],[1141,11,966,9,"assertTSMethodSignature"],[1141,34,966,0],[1141,35,966,33,"node"],[1141,39,966,0],[1141,41,966,50],[1142,0,966,50],[1142,8,966,39,"opts"],[1142,12,966,50],[1142,83,966,46],[1142,85,966,50],[1143,0,967,2,"assert"],[1143,4,967,2,"assert"],[1143,10,967,8],[1143,11,967,9],[1143,30,967,8],[1143,32,967,30,"node"],[1143,36,967,8],[1143,38,967,36,"opts"],[1143,42,967,8],[1143,43,967,2],[1144,0,968,1],[1146,0,970,0],[1146,11,970,9,"assertTSIndexSignature"],[1146,33,970,0],[1146,34,970,32,"node"],[1146,38,970,0],[1146,40,970,49],[1147,0,970,49],[1147,8,970,38,"opts"],[1147,12,970,49],[1147,83,970,45],[1147,85,970,49],[1148,0,971,2,"assert"],[1148,4,971,2,"assert"],[1148,10,971,8],[1148,11,971,9],[1148,29,971,8],[1148,31,971,29,"node"],[1148,35,971,8],[1148,37,971,35,"opts"],[1148,41,971,8],[1148,42,971,2],[1149,0,972,1],[1151,0,974,0],[1151,11,974,9,"assertTSAnyKeyword"],[1151,29,974,0],[1151,30,974,28,"node"],[1151,34,974,0],[1151,36,974,45],[1152,0,974,45],[1152,8,974,34,"opts"],[1152,12,974,45],[1152,83,974,41],[1152,85,974,45],[1153,0,975,2,"assert"],[1153,4,975,2,"assert"],[1153,10,975,8],[1153,11,975,9],[1153,25,975,8],[1153,27,975,25,"node"],[1153,31,975,8],[1153,33,975,31,"opts"],[1153,37,975,8],[1153,38,975,2],[1154,0,976,1],[1156,0,978,0],[1156,11,978,9,"assertTSUnknownKeyword"],[1156,33,978,0],[1156,34,978,32,"node"],[1156,38,978,0],[1156,40,978,49],[1157,0,978,49],[1157,8,978,38,"opts"],[1157,12,978,49],[1157,83,978,45],[1157,85,978,49],[1158,0,979,2,"assert"],[1158,4,979,2,"assert"],[1158,10,979,8],[1158,11,979,9],[1158,29,979,8],[1158,31,979,29,"node"],[1158,35,979,8],[1158,37,979,35,"opts"],[1158,41,979,8],[1158,42,979,2],[1159,0,980,1],[1161,0,982,0],[1161,11,982,9,"assertTSNumberKeyword"],[1161,32,982,0],[1161,33,982,31,"node"],[1161,37,982,0],[1161,39,982,48],[1162,0,982,48],[1162,8,982,37,"opts"],[1162,12,982,48],[1162,83,982,44],[1162,85,982,48],[1163,0,983,2,"assert"],[1163,4,983,2,"assert"],[1163,10,983,8],[1163,11,983,9],[1163,28,983,8],[1163,30,983,28,"node"],[1163,34,983,8],[1163,36,983,34,"opts"],[1163,40,983,8],[1163,41,983,2],[1164,0,984,1],[1166,0,986,0],[1166,11,986,9,"assertTSObjectKeyword"],[1166,32,986,0],[1166,33,986,31,"node"],[1166,37,986,0],[1166,39,986,48],[1167,0,986,48],[1167,8,986,37,"opts"],[1167,12,986,48],[1167,83,986,44],[1167,85,986,48],[1168,0,987,2,"assert"],[1168,4,987,2,"assert"],[1168,10,987,8],[1168,11,987,9],[1168,28,987,8],[1168,30,987,28,"node"],[1168,34,987,8],[1168,36,987,34,"opts"],[1168,40,987,8],[1168,41,987,2],[1169,0,988,1],[1171,0,990,0],[1171,11,990,9,"assertTSBooleanKeyword"],[1171,33,990,0],[1171,34,990,32,"node"],[1171,38,990,0],[1171,40,990,49],[1172,0,990,49],[1172,8,990,38,"opts"],[1172,12,990,49],[1172,83,990,45],[1172,85,990,49],[1173,0,991,2,"assert"],[1173,4,991,2,"assert"],[1173,10,991,8],[1173,11,991,9],[1173,29,991,8],[1173,31,991,29,"node"],[1173,35,991,8],[1173,37,991,35,"opts"],[1173,41,991,8],[1173,42,991,2],[1174,0,992,1],[1176,0,994,0],[1176,11,994,9,"assertTSStringKeyword"],[1176,32,994,0],[1176,33,994,31,"node"],[1176,37,994,0],[1176,39,994,48],[1177,0,994,48],[1177,8,994,37,"opts"],[1177,12,994,48],[1177,83,994,44],[1177,85,994,48],[1178,0,995,2,"assert"],[1178,4,995,2,"assert"],[1178,10,995,8],[1178,11,995,9],[1178,28,995,8],[1178,30,995,28,"node"],[1178,34,995,8],[1178,36,995,34,"opts"],[1178,40,995,8],[1178,41,995,2],[1179,0,996,1],[1181,0,998,0],[1181,11,998,9,"assertTSSymbolKeyword"],[1181,32,998,0],[1181,33,998,31,"node"],[1181,37,998,0],[1181,39,998,48],[1182,0,998,48],[1182,8,998,37,"opts"],[1182,12,998,48],[1182,83,998,44],[1182,85,998,48],[1183,0,999,2,"assert"],[1183,4,999,2,"assert"],[1183,10,999,8],[1183,11,999,9],[1183,28,999,8],[1183,30,999,28,"node"],[1183,34,999,8],[1183,36,999,34,"opts"],[1183,40,999,8],[1183,41,999,2],[1184,0,1000,1],[1186,0,1002,0],[1186,11,1002,9,"assertTSVoidKeyword"],[1186,30,1002,0],[1186,31,1002,29,"node"],[1186,35,1002,0],[1186,37,1002,46],[1187,0,1002,46],[1187,8,1002,35,"opts"],[1187,12,1002,46],[1187,83,1002,42],[1187,85,1002,46],[1188,0,1003,2,"assert"],[1188,4,1003,2,"assert"],[1188,10,1003,8],[1188,11,1003,9],[1188,26,1003,8],[1188,28,1003,26,"node"],[1188,32,1003,8],[1188,34,1003,32,"opts"],[1188,38,1003,8],[1188,39,1003,2],[1189,0,1004,1],[1191,0,1006,0],[1191,11,1006,9,"assertTSUndefinedKeyword"],[1191,35,1006,0],[1191,36,1006,34,"node"],[1191,40,1006,0],[1191,42,1006,51],[1192,0,1006,51],[1192,8,1006,40,"opts"],[1192,12,1006,51],[1192,83,1006,47],[1192,85,1006,51],[1193,0,1007,2,"assert"],[1193,4,1007,2,"assert"],[1193,10,1007,8],[1193,11,1007,9],[1193,31,1007,8],[1193,33,1007,31,"node"],[1193,37,1007,8],[1193,39,1007,37,"opts"],[1193,43,1007,8],[1193,44,1007,2],[1194,0,1008,1],[1196,0,1010,0],[1196,11,1010,9,"assertTSNullKeyword"],[1196,30,1010,0],[1196,31,1010,29,"node"],[1196,35,1010,0],[1196,37,1010,46],[1197,0,1010,46],[1197,8,1010,35,"opts"],[1197,12,1010,46],[1197,83,1010,42],[1197,85,1010,46],[1198,0,1011,2,"assert"],[1198,4,1011,2,"assert"],[1198,10,1011,8],[1198,11,1011,9],[1198,26,1011,8],[1198,28,1011,26,"node"],[1198,32,1011,8],[1198,34,1011,32,"opts"],[1198,38,1011,8],[1198,39,1011,2],[1199,0,1012,1],[1201,0,1014,0],[1201,11,1014,9,"assertTSNeverKeyword"],[1201,31,1014,0],[1201,32,1014,30,"node"],[1201,36,1014,0],[1201,38,1014,47],[1202,0,1014,47],[1202,8,1014,36,"opts"],[1202,12,1014,47],[1202,83,1014,43],[1202,85,1014,47],[1203,0,1015,2,"assert"],[1203,4,1015,2,"assert"],[1203,10,1015,8],[1203,11,1015,9],[1203,27,1015,8],[1203,29,1015,27,"node"],[1203,33,1015,8],[1203,35,1015,33,"opts"],[1203,39,1015,8],[1203,40,1015,2],[1204,0,1016,1],[1206,0,1018,0],[1206,11,1018,9,"assertTSThisType"],[1206,27,1018,0],[1206,28,1018,26,"node"],[1206,32,1018,0],[1206,34,1018,43],[1207,0,1018,43],[1207,8,1018,32,"opts"],[1207,12,1018,43],[1207,83,1018,39],[1207,85,1018,43],[1208,0,1019,2,"assert"],[1208,4,1019,2,"assert"],[1208,10,1019,8],[1208,11,1019,9],[1208,23,1019,8],[1208,25,1019,23,"node"],[1208,29,1019,8],[1208,31,1019,29,"opts"],[1208,35,1019,8],[1208,36,1019,2],[1209,0,1020,1],[1211,0,1022,0],[1211,11,1022,9,"assertTSFunctionType"],[1211,31,1022,0],[1211,32,1022,30,"node"],[1211,36,1022,0],[1211,38,1022,47],[1212,0,1022,47],[1212,8,1022,36,"opts"],[1212,12,1022,47],[1212,83,1022,43],[1212,85,1022,47],[1213,0,1023,2,"assert"],[1213,4,1023,2,"assert"],[1213,10,1023,8],[1213,11,1023,9],[1213,27,1023,8],[1213,29,1023,27,"node"],[1213,33,1023,8],[1213,35,1023,33,"opts"],[1213,39,1023,8],[1213,40,1023,2],[1214,0,1024,1],[1216,0,1026,0],[1216,11,1026,9,"assertTSConstructorType"],[1216,34,1026,0],[1216,35,1026,33,"node"],[1216,39,1026,0],[1216,41,1026,50],[1217,0,1026,50],[1217,8,1026,39,"opts"],[1217,12,1026,50],[1217,83,1026,46],[1217,85,1026,50],[1218,0,1027,2,"assert"],[1218,4,1027,2,"assert"],[1218,10,1027,8],[1218,11,1027,9],[1218,30,1027,8],[1218,32,1027,30,"node"],[1218,36,1027,8],[1218,38,1027,36,"opts"],[1218,42,1027,8],[1218,43,1027,2],[1219,0,1028,1],[1221,0,1030,0],[1221,11,1030,9,"assertTSTypeReference"],[1221,32,1030,0],[1221,33,1030,31,"node"],[1221,37,1030,0],[1221,39,1030,48],[1222,0,1030,48],[1222,8,1030,37,"opts"],[1222,12,1030,48],[1222,83,1030,44],[1222,85,1030,48],[1223,0,1031,2,"assert"],[1223,4,1031,2,"assert"],[1223,10,1031,8],[1223,11,1031,9],[1223,28,1031,8],[1223,30,1031,28,"node"],[1223,34,1031,8],[1223,36,1031,34,"opts"],[1223,40,1031,8],[1223,41,1031,2],[1224,0,1032,1],[1226,0,1034,0],[1226,11,1034,9,"assertTSTypePredicate"],[1226,32,1034,0],[1226,33,1034,31,"node"],[1226,37,1034,0],[1226,39,1034,48],[1227,0,1034,48],[1227,8,1034,37,"opts"],[1227,12,1034,48],[1227,83,1034,44],[1227,85,1034,48],[1228,0,1035,2,"assert"],[1228,4,1035,2,"assert"],[1228,10,1035,8],[1228,11,1035,9],[1228,28,1035,8],[1228,30,1035,28,"node"],[1228,34,1035,8],[1228,36,1035,34,"opts"],[1228,40,1035,8],[1228,41,1035,2],[1229,0,1036,1],[1231,0,1038,0],[1231,11,1038,9,"assertTSTypeQuery"],[1231,28,1038,0],[1231,29,1038,27,"node"],[1231,33,1038,0],[1231,35,1038,44],[1232,0,1038,44],[1232,8,1038,33,"opts"],[1232,12,1038,44],[1232,83,1038,40],[1232,85,1038,44],[1233,0,1039,2,"assert"],[1233,4,1039,2,"assert"],[1233,10,1039,8],[1233,11,1039,9],[1233,24,1039,8],[1233,26,1039,24,"node"],[1233,30,1039,8],[1233,32,1039,30,"opts"],[1233,36,1039,8],[1233,37,1039,2],[1234,0,1040,1],[1236,0,1042,0],[1236,11,1042,9,"assertTSTypeLiteral"],[1236,30,1042,0],[1236,31,1042,29,"node"],[1236,35,1042,0],[1236,37,1042,46],[1237,0,1042,46],[1237,8,1042,35,"opts"],[1237,12,1042,46],[1237,83,1042,42],[1237,85,1042,46],[1238,0,1043,2,"assert"],[1238,4,1043,2,"assert"],[1238,10,1043,8],[1238,11,1043,9],[1238,26,1043,8],[1238,28,1043,26,"node"],[1238,32,1043,8],[1238,34,1043,32,"opts"],[1238,38,1043,8],[1238,39,1043,2],[1239,0,1044,1],[1241,0,1046,0],[1241,11,1046,9,"assertTSArrayType"],[1241,28,1046,0],[1241,29,1046,27,"node"],[1241,33,1046,0],[1241,35,1046,44],[1242,0,1046,44],[1242,8,1046,33,"opts"],[1242,12,1046,44],[1242,83,1046,40],[1242,85,1046,44],[1243,0,1047,2,"assert"],[1243,4,1047,2,"assert"],[1243,10,1047,8],[1243,11,1047,9],[1243,24,1047,8],[1243,26,1047,24,"node"],[1243,30,1047,8],[1243,32,1047,30,"opts"],[1243,36,1047,8],[1243,37,1047,2],[1244,0,1048,1],[1246,0,1050,0],[1246,11,1050,9,"assertTSTupleType"],[1246,28,1050,0],[1246,29,1050,27,"node"],[1246,33,1050,0],[1246,35,1050,44],[1247,0,1050,44],[1247,8,1050,33,"opts"],[1247,12,1050,44],[1247,83,1050,40],[1247,85,1050,44],[1248,0,1051,2,"assert"],[1248,4,1051,2,"assert"],[1248,10,1051,8],[1248,11,1051,9],[1248,24,1051,8],[1248,26,1051,24,"node"],[1248,30,1051,8],[1248,32,1051,30,"opts"],[1248,36,1051,8],[1248,37,1051,2],[1249,0,1052,1],[1251,0,1054,0],[1251,11,1054,9,"assertTSOptionalType"],[1251,31,1054,0],[1251,32,1054,30,"node"],[1251,36,1054,0],[1251,38,1054,47],[1252,0,1054,47],[1252,8,1054,36,"opts"],[1252,12,1054,47],[1252,83,1054,43],[1252,85,1054,47],[1253,0,1055,2,"assert"],[1253,4,1055,2,"assert"],[1253,10,1055,8],[1253,11,1055,9],[1253,27,1055,8],[1253,29,1055,27,"node"],[1253,33,1055,8],[1253,35,1055,33,"opts"],[1253,39,1055,8],[1253,40,1055,2],[1254,0,1056,1],[1256,0,1058,0],[1256,11,1058,9,"assertTSRestType"],[1256,27,1058,0],[1256,28,1058,26,"node"],[1256,32,1058,0],[1256,34,1058,43],[1257,0,1058,43],[1257,8,1058,32,"opts"],[1257,12,1058,43],[1257,83,1058,39],[1257,85,1058,43],[1258,0,1059,2,"assert"],[1258,4,1059,2,"assert"],[1258,10,1059,8],[1258,11,1059,9],[1258,23,1059,8],[1258,25,1059,23,"node"],[1258,29,1059,8],[1258,31,1059,29,"opts"],[1258,35,1059,8],[1258,36,1059,2],[1259,0,1060,1],[1261,0,1062,0],[1261,11,1062,9,"assertTSUnionType"],[1261,28,1062,0],[1261,29,1062,27,"node"],[1261,33,1062,0],[1261,35,1062,44],[1262,0,1062,44],[1262,8,1062,33,"opts"],[1262,12,1062,44],[1262,83,1062,40],[1262,85,1062,44],[1263,0,1063,2,"assert"],[1263,4,1063,2,"assert"],[1263,10,1063,8],[1263,11,1063,9],[1263,24,1063,8],[1263,26,1063,24,"node"],[1263,30,1063,8],[1263,32,1063,30,"opts"],[1263,36,1063,8],[1263,37,1063,2],[1264,0,1064,1],[1266,0,1066,0],[1266,11,1066,9,"assertTSIntersectionType"],[1266,35,1066,0],[1266,36,1066,34,"node"],[1266,40,1066,0],[1266,42,1066,51],[1267,0,1066,51],[1267,8,1066,40,"opts"],[1267,12,1066,51],[1267,83,1066,47],[1267,85,1066,51],[1268,0,1067,2,"assert"],[1268,4,1067,2,"assert"],[1268,10,1067,8],[1268,11,1067,9],[1268,31,1067,8],[1268,33,1067,31,"node"],[1268,37,1067,8],[1268,39,1067,37,"opts"],[1268,43,1067,8],[1268,44,1067,2],[1269,0,1068,1],[1271,0,1070,0],[1271,11,1070,9,"assertTSConditionalType"],[1271,34,1070,0],[1271,35,1070,33,"node"],[1271,39,1070,0],[1271,41,1070,50],[1272,0,1070,50],[1272,8,1070,39,"opts"],[1272,12,1070,50],[1272,83,1070,46],[1272,85,1070,50],[1273,0,1071,2,"assert"],[1273,4,1071,2,"assert"],[1273,10,1071,8],[1273,11,1071,9],[1273,30,1071,8],[1273,32,1071,30,"node"],[1273,36,1071,8],[1273,38,1071,36,"opts"],[1273,42,1071,8],[1273,43,1071,2],[1274,0,1072,1],[1276,0,1074,0],[1276,11,1074,9,"assertTSInferType"],[1276,28,1074,0],[1276,29,1074,27,"node"],[1276,33,1074,0],[1276,35,1074,44],[1277,0,1074,44],[1277,8,1074,33,"opts"],[1277,12,1074,44],[1277,83,1074,40],[1277,85,1074,44],[1278,0,1075,2,"assert"],[1278,4,1075,2,"assert"],[1278,10,1075,8],[1278,11,1075,9],[1278,24,1075,8],[1278,26,1075,24,"node"],[1278,30,1075,8],[1278,32,1075,30,"opts"],[1278,36,1075,8],[1278,37,1075,2],[1279,0,1076,1],[1281,0,1078,0],[1281,11,1078,9,"assertTSParenthesizedType"],[1281,36,1078,0],[1281,37,1078,35,"node"],[1281,41,1078,0],[1281,43,1078,52],[1282,0,1078,52],[1282,8,1078,41,"opts"],[1282,12,1078,52],[1282,83,1078,48],[1282,85,1078,52],[1283,0,1079,2,"assert"],[1283,4,1079,2,"assert"],[1283,10,1079,8],[1283,11,1079,9],[1283,32,1079,8],[1283,34,1079,32,"node"],[1283,38,1079,8],[1283,40,1079,38,"opts"],[1283,44,1079,8],[1283,45,1079,2],[1284,0,1080,1],[1286,0,1082,0],[1286,11,1082,9,"assertTSTypeOperator"],[1286,31,1082,0],[1286,32,1082,30,"node"],[1286,36,1082,0],[1286,38,1082,47],[1287,0,1082,47],[1287,8,1082,36,"opts"],[1287,12,1082,47],[1287,83,1082,43],[1287,85,1082,47],[1288,0,1083,2,"assert"],[1288,4,1083,2,"assert"],[1288,10,1083,8],[1288,11,1083,9],[1288,27,1083,8],[1288,29,1083,27,"node"],[1288,33,1083,8],[1288,35,1083,33,"opts"],[1288,39,1083,8],[1288,40,1083,2],[1289,0,1084,1],[1291,0,1086,0],[1291,11,1086,9,"assertTSIndexedAccessType"],[1291,36,1086,0],[1291,37,1086,35,"node"],[1291,41,1086,0],[1291,43,1086,52],[1292,0,1086,52],[1292,8,1086,41,"opts"],[1292,12,1086,52],[1292,83,1086,48],[1292,85,1086,52],[1293,0,1087,2,"assert"],[1293,4,1087,2,"assert"],[1293,10,1087,8],[1293,11,1087,9],[1293,32,1087,8],[1293,34,1087,32,"node"],[1293,38,1087,8],[1293,40,1087,38,"opts"],[1293,44,1087,8],[1293,45,1087,2],[1294,0,1088,1],[1296,0,1090,0],[1296,11,1090,9,"assertTSMappedType"],[1296,29,1090,0],[1296,30,1090,28,"node"],[1296,34,1090,0],[1296,36,1090,45],[1297,0,1090,45],[1297,8,1090,34,"opts"],[1297,12,1090,45],[1297,83,1090,41],[1297,85,1090,45],[1298,0,1091,2,"assert"],[1298,4,1091,2,"assert"],[1298,10,1091,8],[1298,11,1091,9],[1298,25,1091,8],[1298,27,1091,25,"node"],[1298,31,1091,8],[1298,33,1091,31,"opts"],[1298,37,1091,8],[1298,38,1091,2],[1299,0,1092,1],[1301,0,1094,0],[1301,11,1094,9,"assertTSLiteralType"],[1301,30,1094,0],[1301,31,1094,29,"node"],[1301,35,1094,0],[1301,37,1094,46],[1302,0,1094,46],[1302,8,1094,35,"opts"],[1302,12,1094,46],[1302,83,1094,42],[1302,85,1094,46],[1303,0,1095,2,"assert"],[1303,4,1095,2,"assert"],[1303,10,1095,8],[1303,11,1095,9],[1303,26,1095,8],[1303,28,1095,26,"node"],[1303,32,1095,8],[1303,34,1095,32,"opts"],[1303,38,1095,8],[1303,39,1095,2],[1304,0,1096,1],[1306,0,1098,0],[1306,11,1098,9,"assertTSExpressionWithTypeArguments"],[1306,46,1098,0],[1306,47,1098,45,"node"],[1306,51,1098,0],[1306,53,1098,62],[1307,0,1098,62],[1307,8,1098,51,"opts"],[1307,12,1098,62],[1307,83,1098,58],[1307,85,1098,62],[1308,0,1099,2,"assert"],[1308,4,1099,2,"assert"],[1308,10,1099,8],[1308,11,1099,9],[1308,42,1099,8],[1308,44,1099,42,"node"],[1308,48,1099,8],[1308,50,1099,48,"opts"],[1308,54,1099,8],[1308,55,1099,2],[1309,0,1100,1],[1311,0,1102,0],[1311,11,1102,9,"assertTSInterfaceDeclaration"],[1311,39,1102,0],[1311,40,1102,38,"node"],[1311,44,1102,0],[1311,46,1102,55],[1312,0,1102,55],[1312,8,1102,44,"opts"],[1312,12,1102,55],[1312,83,1102,51],[1312,85,1102,55],[1313,0,1103,2,"assert"],[1313,4,1103,2,"assert"],[1313,10,1103,8],[1313,11,1103,9],[1313,35,1103,8],[1313,37,1103,35,"node"],[1313,41,1103,8],[1313,43,1103,41,"opts"],[1313,47,1103,8],[1313,48,1103,2],[1314,0,1104,1],[1316,0,1106,0],[1316,11,1106,9,"assertTSInterfaceBody"],[1316,32,1106,0],[1316,33,1106,31,"node"],[1316,37,1106,0],[1316,39,1106,48],[1317,0,1106,48],[1317,8,1106,37,"opts"],[1317,12,1106,48],[1317,83,1106,44],[1317,85,1106,48],[1318,0,1107,2,"assert"],[1318,4,1107,2,"assert"],[1318,10,1107,8],[1318,11,1107,9],[1318,28,1107,8],[1318,30,1107,28,"node"],[1318,34,1107,8],[1318,36,1107,34,"opts"],[1318,40,1107,8],[1318,41,1107,2],[1319,0,1108,1],[1321,0,1110,0],[1321,11,1110,9,"assertTSTypeAliasDeclaration"],[1321,39,1110,0],[1321,40,1110,38,"node"],[1321,44,1110,0],[1321,46,1110,55],[1322,0,1110,55],[1322,8,1110,44,"opts"],[1322,12,1110,55],[1322,83,1110,51],[1322,85,1110,55],[1323,0,1111,2,"assert"],[1323,4,1111,2,"assert"],[1323,10,1111,8],[1323,11,1111,9],[1323,35,1111,8],[1323,37,1111,35,"node"],[1323,41,1111,8],[1323,43,1111,41,"opts"],[1323,47,1111,8],[1323,48,1111,2],[1324,0,1112,1],[1326,0,1114,0],[1326,11,1114,9,"assertTSAsExpression"],[1326,31,1114,0],[1326,32,1114,30,"node"],[1326,36,1114,0],[1326,38,1114,47],[1327,0,1114,47],[1327,8,1114,36,"opts"],[1327,12,1114,47],[1327,83,1114,43],[1327,85,1114,47],[1328,0,1115,2,"assert"],[1328,4,1115,2,"assert"],[1328,10,1115,8],[1328,11,1115,9],[1328,27,1115,8],[1328,29,1115,27,"node"],[1328,33,1115,8],[1328,35,1115,33,"opts"],[1328,39,1115,8],[1328,40,1115,2],[1329,0,1116,1],[1331,0,1118,0],[1331,11,1118,9,"assertTSTypeAssertion"],[1331,32,1118,0],[1331,33,1118,31,"node"],[1331,37,1118,0],[1331,39,1118,48],[1332,0,1118,48],[1332,8,1118,37,"opts"],[1332,12,1118,48],[1332,83,1118,44],[1332,85,1118,48],[1333,0,1119,2,"assert"],[1333,4,1119,2,"assert"],[1333,10,1119,8],[1333,11,1119,9],[1333,28,1119,8],[1333,30,1119,28,"node"],[1333,34,1119,8],[1333,36,1119,34,"opts"],[1333,40,1119,8],[1333,41,1119,2],[1334,0,1120,1],[1336,0,1122,0],[1336,11,1122,9,"assertTSEnumDeclaration"],[1336,34,1122,0],[1336,35,1122,33,"node"],[1336,39,1122,0],[1336,41,1122,50],[1337,0,1122,50],[1337,8,1122,39,"opts"],[1337,12,1122,50],[1337,83,1122,46],[1337,85,1122,50],[1338,0,1123,2,"assert"],[1338,4,1123,2,"assert"],[1338,10,1123,8],[1338,11,1123,9],[1338,30,1123,8],[1338,32,1123,30,"node"],[1338,36,1123,8],[1338,38,1123,36,"opts"],[1338,42,1123,8],[1338,43,1123,2],[1339,0,1124,1],[1341,0,1126,0],[1341,11,1126,9,"assertTSEnumMember"],[1341,29,1126,0],[1341,30,1126,28,"node"],[1341,34,1126,0],[1341,36,1126,45],[1342,0,1126,45],[1342,8,1126,34,"opts"],[1342,12,1126,45],[1342,83,1126,41],[1342,85,1126,45],[1343,0,1127,2,"assert"],[1343,4,1127,2,"assert"],[1343,10,1127,8],[1343,11,1127,9],[1343,25,1127,8],[1343,27,1127,25,"node"],[1343,31,1127,8],[1343,33,1127,31,"opts"],[1343,37,1127,8],[1343,38,1127,2],[1344,0,1128,1],[1346,0,1130,0],[1346,11,1130,9,"assertTSModuleDeclaration"],[1346,36,1130,0],[1346,37,1130,35,"node"],[1346,41,1130,0],[1346,43,1130,52],[1347,0,1130,52],[1347,8,1130,41,"opts"],[1347,12,1130,52],[1347,83,1130,48],[1347,85,1130,52],[1348,0,1131,2,"assert"],[1348,4,1131,2,"assert"],[1348,10,1131,8],[1348,11,1131,9],[1348,32,1131,8],[1348,34,1131,32,"node"],[1348,38,1131,8],[1348,40,1131,38,"opts"],[1348,44,1131,8],[1348,45,1131,2],[1349,0,1132,1],[1351,0,1134,0],[1351,11,1134,9,"assertTSModuleBlock"],[1351,30,1134,0],[1351,31,1134,29,"node"],[1351,35,1134,0],[1351,37,1134,46],[1352,0,1134,46],[1352,8,1134,35,"opts"],[1352,12,1134,46],[1352,83,1134,42],[1352,85,1134,46],[1353,0,1135,2,"assert"],[1353,4,1135,2,"assert"],[1353,10,1135,8],[1353,11,1135,9],[1353,26,1135,8],[1353,28,1135,26,"node"],[1353,32,1135,8],[1353,34,1135,32,"opts"],[1353,38,1135,8],[1353,39,1135,2],[1354,0,1136,1],[1356,0,1138,0],[1356,11,1138,9,"assertTSImportType"],[1356,29,1138,0],[1356,30,1138,28,"node"],[1356,34,1138,0],[1356,36,1138,45],[1357,0,1138,45],[1357,8,1138,34,"opts"],[1357,12,1138,45],[1357,83,1138,41],[1357,85,1138,45],[1358,0,1139,2,"assert"],[1358,4,1139,2,"assert"],[1358,10,1139,8],[1358,11,1139,9],[1358,25,1139,8],[1358,27,1139,25,"node"],[1358,31,1139,8],[1358,33,1139,31,"opts"],[1358,37,1139,8],[1358,38,1139,2],[1359,0,1140,1],[1361,0,1142,0],[1361,11,1142,9,"assertTSImportEqualsDeclaration"],[1361,42,1142,0],[1361,43,1142,41,"node"],[1361,47,1142,0],[1361,49,1142,58],[1362,0,1142,58],[1362,8,1142,47,"opts"],[1362,12,1142,58],[1362,83,1142,54],[1362,85,1142,58],[1363,0,1143,2,"assert"],[1363,4,1143,2,"assert"],[1363,10,1143,8],[1363,11,1143,9],[1363,38,1143,8],[1363,40,1143,38,"node"],[1363,44,1143,8],[1363,46,1143,44,"opts"],[1363,50,1143,8],[1363,51,1143,2],[1364,0,1144,1],[1366,0,1146,0],[1366,11,1146,9,"assertTSExternalModuleReference"],[1366,42,1146,0],[1366,43,1146,41,"node"],[1366,47,1146,0],[1366,49,1146,58],[1367,0,1146,58],[1367,8,1146,47,"opts"],[1367,12,1146,58],[1367,83,1146,54],[1367,85,1146,58],[1368,0,1147,2,"assert"],[1368,4,1147,2,"assert"],[1368,10,1147,8],[1368,11,1147,9],[1368,38,1147,8],[1368,40,1147,38,"node"],[1368,44,1147,8],[1368,46,1147,44,"opts"],[1368,50,1147,8],[1368,51,1147,2],[1369,0,1148,1],[1371,0,1150,0],[1371,11,1150,9,"assertTSNonNullExpression"],[1371,36,1150,0],[1371,37,1150,35,"node"],[1371,41,1150,0],[1371,43,1150,52],[1372,0,1150,52],[1372,8,1150,41,"opts"],[1372,12,1150,52],[1372,83,1150,48],[1372,85,1150,52],[1373,0,1151,2,"assert"],[1373,4,1151,2,"assert"],[1373,10,1151,8],[1373,11,1151,9],[1373,32,1151,8],[1373,34,1151,32,"node"],[1373,38,1151,8],[1373,40,1151,38,"opts"],[1373,44,1151,8],[1373,45,1151,2],[1374,0,1152,1],[1376,0,1154,0],[1376,11,1154,9,"assertTSExportAssignment"],[1376,35,1154,0],[1376,36,1154,34,"node"],[1376,40,1154,0],[1376,42,1154,51],[1377,0,1154,51],[1377,8,1154,40,"opts"],[1377,12,1154,51],[1377,83,1154,47],[1377,85,1154,51],[1378,0,1155,2,"assert"],[1378,4,1155,2,"assert"],[1378,10,1155,8],[1378,11,1155,9],[1378,31,1155,8],[1378,33,1155,31,"node"],[1378,37,1155,8],[1378,39,1155,37,"opts"],[1378,43,1155,8],[1378,44,1155,2],[1379,0,1156,1],[1381,0,1158,0],[1381,11,1158,9,"assertTSNamespaceExportDeclaration"],[1381,45,1158,0],[1381,46,1158,44,"node"],[1381,50,1158,0],[1381,52,1158,61],[1382,0,1158,61],[1382,8,1158,50,"opts"],[1382,12,1158,61],[1382,83,1158,57],[1382,85,1158,61],[1383,0,1159,2,"assert"],[1383,4,1159,2,"assert"],[1383,10,1159,8],[1383,11,1159,9],[1383,41,1159,8],[1383,43,1159,41,"node"],[1383,47,1159,8],[1383,49,1159,47,"opts"],[1383,53,1159,8],[1383,54,1159,2],[1384,0,1160,1],[1386,0,1162,0],[1386,11,1162,9,"assertTSTypeAnnotation"],[1386,33,1162,0],[1386,34,1162,32,"node"],[1386,38,1162,0],[1386,40,1162,49],[1387,0,1162,49],[1387,8,1162,38,"opts"],[1387,12,1162,49],[1387,83,1162,45],[1387,85,1162,49],[1388,0,1163,2,"assert"],[1388,4,1163,2,"assert"],[1388,10,1163,8],[1388,11,1163,9],[1388,29,1163,8],[1388,31,1163,29,"node"],[1388,35,1163,8],[1388,37,1163,35,"opts"],[1388,41,1163,8],[1388,42,1163,2],[1389,0,1164,1],[1391,0,1166,0],[1391,11,1166,9,"assertTSTypeParameterInstantiation"],[1391,45,1166,0],[1391,46,1166,44,"node"],[1391,50,1166,0],[1391,52,1166,61],[1392,0,1166,61],[1392,8,1166,50,"opts"],[1392,12,1166,61],[1392,83,1166,57],[1392,85,1166,61],[1393,0,1167,2,"assert"],[1393,4,1167,2,"assert"],[1393,10,1167,8],[1393,11,1167,9],[1393,41,1167,8],[1393,43,1167,41,"node"],[1393,47,1167,8],[1393,49,1167,47,"opts"],[1393,53,1167,8],[1393,54,1167,2],[1394,0,1168,1],[1396,0,1170,0],[1396,11,1170,9,"assertTSTypeParameterDeclaration"],[1396,43,1170,0],[1396,44,1170,42,"node"],[1396,48,1170,0],[1396,50,1170,59],[1397,0,1170,59],[1397,8,1170,48,"opts"],[1397,12,1170,59],[1397,83,1170,55],[1397,85,1170,59],[1398,0,1171,2,"assert"],[1398,4,1171,2,"assert"],[1398,10,1171,8],[1398,11,1171,9],[1398,39,1171,8],[1398,41,1171,39,"node"],[1398,45,1171,8],[1398,47,1171,45,"opts"],[1398,51,1171,8],[1398,52,1171,2],[1399,0,1172,1],[1401,0,1174,0],[1401,11,1174,9,"assertTSTypeParameter"],[1401,32,1174,0],[1401,33,1174,31,"node"],[1401,37,1174,0],[1401,39,1174,48],[1402,0,1174,48],[1402,8,1174,37,"opts"],[1402,12,1174,48],[1402,83,1174,44],[1402,85,1174,48],[1403,0,1175,2,"assert"],[1403,4,1175,2,"assert"],[1403,10,1175,8],[1403,11,1175,9],[1403,28,1175,8],[1403,30,1175,28,"node"],[1403,34,1175,8],[1403,36,1175,34,"opts"],[1403,40,1175,8],[1403,41,1175,2],[1404,0,1176,1],[1406,0,1178,0],[1406,11,1178,9,"assertExpression"],[1406,27,1178,0],[1406,28,1178,26,"node"],[1406,32,1178,0],[1406,34,1178,43],[1407,0,1178,43],[1407,8,1178,32,"opts"],[1407,12,1178,43],[1407,83,1178,39],[1407,85,1178,43],[1408,0,1179,2,"assert"],[1408,4,1179,2,"assert"],[1408,10,1179,8],[1408,11,1179,9],[1408,23,1179,8],[1408,25,1179,23,"node"],[1408,29,1179,8],[1408,31,1179,29,"opts"],[1408,35,1179,8],[1408,36,1179,2],[1409,0,1180,1],[1411,0,1182,0],[1411,11,1182,9,"assertBinary"],[1411,23,1182,0],[1411,24,1182,22,"node"],[1411,28,1182,0],[1411,30,1182,39],[1412,0,1182,39],[1412,8,1182,28,"opts"],[1412,12,1182,39],[1412,83,1182,35],[1412,85,1182,39],[1413,0,1183,2,"assert"],[1413,4,1183,2,"assert"],[1413,10,1183,8],[1413,11,1183,9],[1413,19,1183,8],[1413,21,1183,19,"node"],[1413,25,1183,8],[1413,27,1183,25,"opts"],[1413,31,1183,8],[1413,32,1183,2],[1414,0,1184,1],[1416,0,1186,0],[1416,11,1186,9,"assertScopable"],[1416,25,1186,0],[1416,26,1186,24,"node"],[1416,30,1186,0],[1416,32,1186,41],[1417,0,1186,41],[1417,8,1186,30,"opts"],[1417,12,1186,41],[1417,83,1186,37],[1417,85,1186,41],[1418,0,1187,2,"assert"],[1418,4,1187,2,"assert"],[1418,10,1187,8],[1418,11,1187,9],[1418,21,1187,8],[1418,23,1187,21,"node"],[1418,27,1187,8],[1418,29,1187,27,"opts"],[1418,33,1187,8],[1418,34,1187,2],[1419,0,1188,1],[1421,0,1190,0],[1421,11,1190,9,"assertBlockParent"],[1421,28,1190,0],[1421,29,1190,27,"node"],[1421,33,1190,0],[1421,35,1190,44],[1422,0,1190,44],[1422,8,1190,33,"opts"],[1422,12,1190,44],[1422,83,1190,40],[1422,85,1190,44],[1423,0,1191,2,"assert"],[1423,4,1191,2,"assert"],[1423,10,1191,8],[1423,11,1191,9],[1423,24,1191,8],[1423,26,1191,24,"node"],[1423,30,1191,8],[1423,32,1191,30,"opts"],[1423,36,1191,8],[1423,37,1191,2],[1424,0,1192,1],[1426,0,1194,0],[1426,11,1194,9,"assertBlock"],[1426,22,1194,0],[1426,23,1194,21,"node"],[1426,27,1194,0],[1426,29,1194,38],[1427,0,1194,38],[1427,8,1194,27,"opts"],[1427,12,1194,38],[1427,83,1194,34],[1427,85,1194,38],[1428,0,1195,2,"assert"],[1428,4,1195,2,"assert"],[1428,10,1195,8],[1428,11,1195,9],[1428,18,1195,8],[1428,20,1195,18,"node"],[1428,24,1195,8],[1428,26,1195,24,"opts"],[1428,30,1195,8],[1428,31,1195,2],[1429,0,1196,1],[1431,0,1198,0],[1431,11,1198,9,"assertStatement"],[1431,26,1198,0],[1431,27,1198,25,"node"],[1431,31,1198,0],[1431,33,1198,42],[1432,0,1198,42],[1432,8,1198,31,"opts"],[1432,12,1198,42],[1432,83,1198,38],[1432,85,1198,42],[1433,0,1199,2,"assert"],[1433,4,1199,2,"assert"],[1433,10,1199,8],[1433,11,1199,9],[1433,22,1199,8],[1433,24,1199,22,"node"],[1433,28,1199,8],[1433,30,1199,28,"opts"],[1433,34,1199,8],[1433,35,1199,2],[1434,0,1200,1],[1436,0,1202,0],[1436,11,1202,9,"assertTerminatorless"],[1436,31,1202,0],[1436,32,1202,30,"node"],[1436,36,1202,0],[1436,38,1202,47],[1437,0,1202,47],[1437,8,1202,36,"opts"],[1437,12,1202,47],[1437,83,1202,43],[1437,85,1202,47],[1438,0,1203,2,"assert"],[1438,4,1203,2,"assert"],[1438,10,1203,8],[1438,11,1203,9],[1438,27,1203,8],[1438,29,1203,27,"node"],[1438,33,1203,8],[1438,35,1203,33,"opts"],[1438,39,1203,8],[1438,40,1203,2],[1439,0,1204,1],[1441,0,1206,0],[1441,11,1206,9,"assertCompletionStatement"],[1441,36,1206,0],[1441,37,1206,35,"node"],[1441,41,1206,0],[1441,43,1206,52],[1442,0,1206,52],[1442,8,1206,41,"opts"],[1442,12,1206,52],[1442,83,1206,48],[1442,85,1206,52],[1443,0,1207,2,"assert"],[1443,4,1207,2,"assert"],[1443,10,1207,8],[1443,11,1207,9],[1443,32,1207,8],[1443,34,1207,32,"node"],[1443,38,1207,8],[1443,40,1207,38,"opts"],[1443,44,1207,8],[1443,45,1207,2],[1444,0,1208,1],[1446,0,1210,0],[1446,11,1210,9,"assertConditional"],[1446,28,1210,0],[1446,29,1210,27,"node"],[1446,33,1210,0],[1446,35,1210,44],[1447,0,1210,44],[1447,8,1210,33,"opts"],[1447,12,1210,44],[1447,83,1210,40],[1447,85,1210,44],[1448,0,1211,2,"assert"],[1448,4,1211,2,"assert"],[1448,10,1211,8],[1448,11,1211,9],[1448,24,1211,8],[1448,26,1211,24,"node"],[1448,30,1211,8],[1448,32,1211,30,"opts"],[1448,36,1211,8],[1448,37,1211,2],[1449,0,1212,1],[1451,0,1214,0],[1451,11,1214,9,"assertLoop"],[1451,21,1214,0],[1451,22,1214,20,"node"],[1451,26,1214,0],[1451,28,1214,37],[1452,0,1214,37],[1452,8,1214,26,"opts"],[1452,12,1214,37],[1452,83,1214,33],[1452,85,1214,37],[1453,0,1215,2,"assert"],[1453,4,1215,2,"assert"],[1453,10,1215,8],[1453,11,1215,9],[1453,17,1215,8],[1453,19,1215,17,"node"],[1453,23,1215,8],[1453,25,1215,23,"opts"],[1453,29,1215,8],[1453,30,1215,2],[1454,0,1216,1],[1456,0,1218,0],[1456,11,1218,9,"assertWhile"],[1456,22,1218,0],[1456,23,1218,21,"node"],[1456,27,1218,0],[1456,29,1218,38],[1457,0,1218,38],[1457,8,1218,27,"opts"],[1457,12,1218,38],[1457,83,1218,34],[1457,85,1218,38],[1458,0,1219,2,"assert"],[1458,4,1219,2,"assert"],[1458,10,1219,8],[1458,11,1219,9],[1458,18,1219,8],[1458,20,1219,18,"node"],[1458,24,1219,8],[1458,26,1219,24,"opts"],[1458,30,1219,8],[1458,31,1219,2],[1459,0,1220,1],[1461,0,1222,0],[1461,11,1222,9,"assertExpressionWrapper"],[1461,34,1222,0],[1461,35,1222,33,"node"],[1461,39,1222,0],[1461,41,1222,50],[1462,0,1222,50],[1462,8,1222,39,"opts"],[1462,12,1222,50],[1462,83,1222,46],[1462,85,1222,50],[1463,0,1223,2,"assert"],[1463,4,1223,2,"assert"],[1463,10,1223,8],[1463,11,1223,9],[1463,30,1223,8],[1463,32,1223,30,"node"],[1463,36,1223,8],[1463,38,1223,36,"opts"],[1463,42,1223,8],[1463,43,1223,2],[1464,0,1224,1],[1466,0,1226,0],[1466,11,1226,9,"assertFor"],[1466,20,1226,0],[1466,21,1226,19,"node"],[1466,25,1226,0],[1466,27,1226,36],[1467,0,1226,36],[1467,8,1226,25,"opts"],[1467,12,1226,36],[1467,83,1226,32],[1467,85,1226,36],[1468,0,1227,2,"assert"],[1468,4,1227,2,"assert"],[1468,10,1227,8],[1468,11,1227,9],[1468,16,1227,8],[1468,18,1227,16,"node"],[1468,22,1227,8],[1468,24,1227,22,"opts"],[1468,28,1227,8],[1468,29,1227,2],[1469,0,1228,1],[1471,0,1230,0],[1471,11,1230,9,"assertForXStatement"],[1471,30,1230,0],[1471,31,1230,29,"node"],[1471,35,1230,0],[1471,37,1230,46],[1472,0,1230,46],[1472,8,1230,35,"opts"],[1472,12,1230,46],[1472,83,1230,42],[1472,85,1230,46],[1473,0,1231,2,"assert"],[1473,4,1231,2,"assert"],[1473,10,1231,8],[1473,11,1231,9],[1473,26,1231,8],[1473,28,1231,26,"node"],[1473,32,1231,8],[1473,34,1231,32,"opts"],[1473,38,1231,8],[1473,39,1231,2],[1474,0,1232,1],[1476,0,1234,0],[1476,11,1234,9,"assertFunction"],[1476,25,1234,0],[1476,26,1234,24,"node"],[1476,30,1234,0],[1476,32,1234,41],[1477,0,1234,41],[1477,8,1234,30,"opts"],[1477,12,1234,41],[1477,83,1234,37],[1477,85,1234,41],[1478,0,1235,2,"assert"],[1478,4,1235,2,"assert"],[1478,10,1235,8],[1478,11,1235,9],[1478,21,1235,8],[1478,23,1235,21,"node"],[1478,27,1235,8],[1478,29,1235,27,"opts"],[1478,33,1235,8],[1478,34,1235,2],[1479,0,1236,1],[1481,0,1238,0],[1481,11,1238,9,"assertFunctionParent"],[1481,31,1238,0],[1481,32,1238,30,"node"],[1481,36,1238,0],[1481,38,1238,47],[1482,0,1238,47],[1482,8,1238,36,"opts"],[1482,12,1238,47],[1482,83,1238,43],[1482,85,1238,47],[1483,0,1239,2,"assert"],[1483,4,1239,2,"assert"],[1483,10,1239,8],[1483,11,1239,9],[1483,27,1239,8],[1483,29,1239,27,"node"],[1483,33,1239,8],[1483,35,1239,33,"opts"],[1483,39,1239,8],[1483,40,1239,2],[1484,0,1240,1],[1486,0,1242,0],[1486,11,1242,9,"assertPureish"],[1486,24,1242,0],[1486,25,1242,23,"node"],[1486,29,1242,0],[1486,31,1242,40],[1487,0,1242,40],[1487,8,1242,29,"opts"],[1487,12,1242,40],[1487,83,1242,36],[1487,85,1242,40],[1488,0,1243,2,"assert"],[1488,4,1243,2,"assert"],[1488,10,1243,8],[1488,11,1243,9],[1488,20,1243,8],[1488,22,1243,20,"node"],[1488,26,1243,8],[1488,28,1243,26,"opts"],[1488,32,1243,8],[1488,33,1243,2],[1489,0,1244,1],[1491,0,1246,0],[1491,11,1246,9,"assertDeclaration"],[1491,28,1246,0],[1491,29,1246,27,"node"],[1491,33,1246,0],[1491,35,1246,44],[1492,0,1246,44],[1492,8,1246,33,"opts"],[1492,12,1246,44],[1492,83,1246,40],[1492,85,1246,44],[1493,0,1247,2,"assert"],[1493,4,1247,2,"assert"],[1493,10,1247,8],[1493,11,1247,9],[1493,24,1247,8],[1493,26,1247,24,"node"],[1493,30,1247,8],[1493,32,1247,30,"opts"],[1493,36,1247,8],[1493,37,1247,2],[1494,0,1248,1],[1496,0,1250,0],[1496,11,1250,9,"assertPatternLike"],[1496,28,1250,0],[1496,29,1250,27,"node"],[1496,33,1250,0],[1496,35,1250,44],[1497,0,1250,44],[1497,8,1250,33,"opts"],[1497,12,1250,44],[1497,83,1250,40],[1497,85,1250,44],[1498,0,1251,2,"assert"],[1498,4,1251,2,"assert"],[1498,10,1251,8],[1498,11,1251,9],[1498,24,1251,8],[1498,26,1251,24,"node"],[1498,30,1251,8],[1498,32,1251,30,"opts"],[1498,36,1251,8],[1498,37,1251,2],[1499,0,1252,1],[1501,0,1254,0],[1501,11,1254,9,"assertLVal"],[1501,21,1254,0],[1501,22,1254,20,"node"],[1501,26,1254,0],[1501,28,1254,37],[1502,0,1254,37],[1502,8,1254,26,"opts"],[1502,12,1254,37],[1502,83,1254,33],[1502,85,1254,37],[1503,0,1255,2,"assert"],[1503,4,1255,2,"assert"],[1503,10,1255,8],[1503,11,1255,9],[1503,17,1255,8],[1503,19,1255,17,"node"],[1503,23,1255,8],[1503,25,1255,23,"opts"],[1503,29,1255,8],[1503,30,1255,2],[1504,0,1256,1],[1506,0,1258,0],[1506,11,1258,9,"assertTSEntityName"],[1506,29,1258,0],[1506,30,1258,28,"node"],[1506,34,1258,0],[1506,36,1258,45],[1507,0,1258,45],[1507,8,1258,34,"opts"],[1507,12,1258,45],[1507,83,1258,41],[1507,85,1258,45],[1508,0,1259,2,"assert"],[1508,4,1259,2,"assert"],[1508,10,1259,8],[1508,11,1259,9],[1508,25,1259,8],[1508,27,1259,25,"node"],[1508,31,1259,8],[1508,33,1259,31,"opts"],[1508,37,1259,8],[1508,38,1259,2],[1509,0,1260,1],[1511,0,1262,0],[1511,11,1262,9,"assertLiteral"],[1511,24,1262,0],[1511,25,1262,23,"node"],[1511,29,1262,0],[1511,31,1262,40],[1512,0,1262,40],[1512,8,1262,29,"opts"],[1512,12,1262,40],[1512,83,1262,36],[1512,85,1262,40],[1513,0,1263,2,"assert"],[1513,4,1263,2,"assert"],[1513,10,1263,8],[1513,11,1263,9],[1513,20,1263,8],[1513,22,1263,20,"node"],[1513,26,1263,8],[1513,28,1263,26,"opts"],[1513,32,1263,8],[1513,33,1263,2],[1514,0,1264,1],[1516,0,1266,0],[1516,11,1266,9,"assertImmutable"],[1516,26,1266,0],[1516,27,1266,25,"node"],[1516,31,1266,0],[1516,33,1266,42],[1517,0,1266,42],[1517,8,1266,31,"opts"],[1517,12,1266,42],[1517,83,1266,38],[1517,85,1266,42],[1518,0,1267,2,"assert"],[1518,4,1267,2,"assert"],[1518,10,1267,8],[1518,11,1267,9],[1518,22,1267,8],[1518,24,1267,22,"node"],[1518,28,1267,8],[1518,30,1267,28,"opts"],[1518,34,1267,8],[1518,35,1267,2],[1519,0,1268,1],[1521,0,1270,0],[1521,11,1270,9,"assertUserWhitespacable"],[1521,34,1270,0],[1521,35,1270,33,"node"],[1521,39,1270,0],[1521,41,1270,50],[1522,0,1270,50],[1522,8,1270,39,"opts"],[1522,12,1270,50],[1522,83,1270,46],[1522,85,1270,50],[1523,0,1271,2,"assert"],[1523,4,1271,2,"assert"],[1523,10,1271,8],[1523,11,1271,9],[1523,30,1271,8],[1523,32,1271,30,"node"],[1523,36,1271,8],[1523,38,1271,36,"opts"],[1523,42,1271,8],[1523,43,1271,2],[1524,0,1272,1],[1526,0,1274,0],[1526,11,1274,9,"assertMethod"],[1526,23,1274,0],[1526,24,1274,22,"node"],[1526,28,1274,0],[1526,30,1274,39],[1527,0,1274,39],[1527,8,1274,28,"opts"],[1527,12,1274,39],[1527,83,1274,35],[1527,85,1274,39],[1528,0,1275,2,"assert"],[1528,4,1275,2,"assert"],[1528,10,1275,8],[1528,11,1275,9],[1528,19,1275,8],[1528,21,1275,19,"node"],[1528,25,1275,8],[1528,27,1275,25,"opts"],[1528,31,1275,8],[1528,32,1275,2],[1529,0,1276,1],[1531,0,1278,0],[1531,11,1278,9,"assertObjectMember"],[1531,29,1278,0],[1531,30,1278,28,"node"],[1531,34,1278,0],[1531,36,1278,45],[1532,0,1278,45],[1532,8,1278,34,"opts"],[1532,12,1278,45],[1532,83,1278,41],[1532,85,1278,45],[1533,0,1279,2,"assert"],[1533,4,1279,2,"assert"],[1533,10,1279,8],[1533,11,1279,9],[1533,25,1279,8],[1533,27,1279,25,"node"],[1533,31,1279,8],[1533,33,1279,31,"opts"],[1533,37,1279,8],[1533,38,1279,2],[1534,0,1280,1],[1536,0,1282,0],[1536,11,1282,9,"assertProperty"],[1536,25,1282,0],[1536,26,1282,24,"node"],[1536,30,1282,0],[1536,32,1282,41],[1537,0,1282,41],[1537,8,1282,30,"opts"],[1537,12,1282,41],[1537,83,1282,37],[1537,85,1282,41],[1538,0,1283,2,"assert"],[1538,4,1283,2,"assert"],[1538,10,1283,8],[1538,11,1283,9],[1538,21,1283,8],[1538,23,1283,21,"node"],[1538,27,1283,8],[1538,29,1283,27,"opts"],[1538,33,1283,8],[1538,34,1283,2],[1539,0,1284,1],[1541,0,1286,0],[1541,11,1286,9,"assertUnaryLike"],[1541,26,1286,0],[1541,27,1286,25,"node"],[1541,31,1286,0],[1541,33,1286,42],[1542,0,1286,42],[1542,8,1286,31,"opts"],[1542,12,1286,42],[1542,83,1286,38],[1542,85,1286,42],[1543,0,1287,2,"assert"],[1543,4,1287,2,"assert"],[1543,10,1287,8],[1543,11,1287,9],[1543,22,1287,8],[1543,24,1287,22,"node"],[1543,28,1287,8],[1543,30,1287,28,"opts"],[1543,34,1287,8],[1543,35,1287,2],[1544,0,1288,1],[1546,0,1290,0],[1546,11,1290,9,"assertPattern"],[1546,24,1290,0],[1546,25,1290,23,"node"],[1546,29,1290,0],[1546,31,1290,40],[1547,0,1290,40],[1547,8,1290,29,"opts"],[1547,12,1290,40],[1547,83,1290,36],[1547,85,1290,40],[1548,0,1291,2,"assert"],[1548,4,1291,2,"assert"],[1548,10,1291,8],[1548,11,1291,9],[1548,20,1291,8],[1548,22,1291,20,"node"],[1548,26,1291,8],[1548,28,1291,26,"opts"],[1548,32,1291,8],[1548,33,1291,2],[1549,0,1292,1],[1551,0,1294,0],[1551,11,1294,9,"assertClass"],[1551,22,1294,0],[1551,23,1294,21,"node"],[1551,27,1294,0],[1551,29,1294,38],[1552,0,1294,38],[1552,8,1294,27,"opts"],[1552,12,1294,38],[1552,83,1294,34],[1552,85,1294,38],[1553,0,1295,2,"assert"],[1553,4,1295,2,"assert"],[1553,10,1295,8],[1553,11,1295,9],[1553,18,1295,8],[1553,20,1295,18,"node"],[1553,24,1295,8],[1553,26,1295,24,"opts"],[1553,30,1295,8],[1553,31,1295,2],[1554,0,1296,1],[1556,0,1298,0],[1556,11,1298,9,"assertModuleDeclaration"],[1556,34,1298,0],[1556,35,1298,33,"node"],[1556,39,1298,0],[1556,41,1298,50],[1557,0,1298,50],[1557,8,1298,39,"opts"],[1557,12,1298,50],[1557,83,1298,46],[1557,85,1298,50],[1558,0,1299,2,"assert"],[1558,4,1299,2,"assert"],[1558,10,1299,8],[1558,11,1299,9],[1558,30,1299,8],[1558,32,1299,30,"node"],[1558,36,1299,8],[1558,38,1299,36,"opts"],[1558,42,1299,8],[1558,43,1299,2],[1559,0,1300,1],[1561,0,1302,0],[1561,11,1302,9,"assertExportDeclaration"],[1561,34,1302,0],[1561,35,1302,33,"node"],[1561,39,1302,0],[1561,41,1302,50],[1562,0,1302,50],[1562,8,1302,39,"opts"],[1562,12,1302,50],[1562,83,1302,46],[1562,85,1302,50],[1563,0,1303,2,"assert"],[1563,4,1303,2,"assert"],[1563,10,1303,8],[1563,11,1303,9],[1563,30,1303,8],[1563,32,1303,30,"node"],[1563,36,1303,8],[1563,38,1303,36,"opts"],[1563,42,1303,8],[1563,43,1303,2],[1564,0,1304,1],[1566,0,1306,0],[1566,11,1306,9,"assertModuleSpecifier"],[1566,32,1306,0],[1566,33,1306,31,"node"],[1566,37,1306,0],[1566,39,1306,48],[1567,0,1306,48],[1567,8,1306,37,"opts"],[1567,12,1306,48],[1567,83,1306,44],[1567,85,1306,48],[1568,0,1307,2,"assert"],[1568,4,1307,2,"assert"],[1568,10,1307,8],[1568,11,1307,9],[1568,28,1307,8],[1568,30,1307,28,"node"],[1568,34,1307,8],[1568,36,1307,34,"opts"],[1568,40,1307,8],[1568,41,1307,2],[1569,0,1308,1],[1571,0,1310,0],[1571,11,1310,9,"assertFlow"],[1571,21,1310,0],[1571,22,1310,20,"node"],[1571,26,1310,0],[1571,28,1310,37],[1572,0,1310,37],[1572,8,1310,26,"opts"],[1572,12,1310,37],[1572,83,1310,33],[1572,85,1310,37],[1573,0,1311,2,"assert"],[1573,4,1311,2,"assert"],[1573,10,1311,8],[1573,11,1311,9],[1573,17,1311,8],[1573,19,1311,17,"node"],[1573,23,1311,8],[1573,25,1311,23,"opts"],[1573,29,1311,8],[1573,30,1311,2],[1574,0,1312,1],[1576,0,1314,0],[1576,11,1314,9,"assertFlowType"],[1576,25,1314,0],[1576,26,1314,24,"node"],[1576,30,1314,0],[1576,32,1314,41],[1577,0,1314,41],[1577,8,1314,30,"opts"],[1577,12,1314,41],[1577,83,1314,37],[1577,85,1314,41],[1578,0,1315,2,"assert"],[1578,4,1315,2,"assert"],[1578,10,1315,8],[1578,11,1315,9],[1578,21,1315,8],[1578,23,1315,21,"node"],[1578,27,1315,8],[1578,29,1315,27,"opts"],[1578,33,1315,8],[1578,34,1315,2],[1579,0,1316,1],[1581,0,1318,0],[1581,11,1318,9,"assertFlowBaseAnnotation"],[1581,35,1318,0],[1581,36,1318,34,"node"],[1581,40,1318,0],[1581,42,1318,51],[1582,0,1318,51],[1582,8,1318,40,"opts"],[1582,12,1318,51],[1582,83,1318,47],[1582,85,1318,51],[1583,0,1319,2,"assert"],[1583,4,1319,2,"assert"],[1583,10,1319,8],[1583,11,1319,9],[1583,31,1319,8],[1583,33,1319,31,"node"],[1583,37,1319,8],[1583,39,1319,37,"opts"],[1583,43,1319,8],[1583,44,1319,2],[1584,0,1320,1],[1586,0,1322,0],[1586,11,1322,9,"assertFlowDeclaration"],[1586,32,1322,0],[1586,33,1322,31,"node"],[1586,37,1322,0],[1586,39,1322,48],[1587,0,1322,48],[1587,8,1322,37,"opts"],[1587,12,1322,48],[1587,83,1322,44],[1587,85,1322,48],[1588,0,1323,2,"assert"],[1588,4,1323,2,"assert"],[1588,10,1323,8],[1588,11,1323,9],[1588,28,1323,8],[1588,30,1323,28,"node"],[1588,34,1323,8],[1588,36,1323,34,"opts"],[1588,40,1323,8],[1588,41,1323,2],[1589,0,1324,1],[1591,0,1326,0],[1591,11,1326,9,"assertFlowPredicate"],[1591,30,1326,0],[1591,31,1326,29,"node"],[1591,35,1326,0],[1591,37,1326,46],[1592,0,1326,46],[1592,8,1326,35,"opts"],[1592,12,1326,46],[1592,83,1326,42],[1592,85,1326,46],[1593,0,1327,2,"assert"],[1593,4,1327,2,"assert"],[1593,10,1327,8],[1593,11,1327,9],[1593,26,1327,8],[1593,28,1327,26,"node"],[1593,32,1327,8],[1593,34,1327,32,"opts"],[1593,38,1327,8],[1593,39,1327,2],[1594,0,1328,1],[1596,0,1330,0],[1596,11,1330,9,"assertJSX"],[1596,20,1330,0],[1596,21,1330,19,"node"],[1596,25,1330,0],[1596,27,1330,36],[1597,0,1330,36],[1597,8,1330,25,"opts"],[1597,12,1330,36],[1597,83,1330,32],[1597,85,1330,36],[1598,0,1331,2,"assert"],[1598,4,1331,2,"assert"],[1598,10,1331,8],[1598,11,1331,9],[1598,16,1331,8],[1598,18,1331,16,"node"],[1598,22,1331,8],[1598,24,1331,22,"opts"],[1598,28,1331,8],[1598,29,1331,2],[1599,0,1332,1],[1601,0,1334,0],[1601,11,1334,9,"assertPrivate"],[1601,24,1334,0],[1601,25,1334,23,"node"],[1601,29,1334,0],[1601,31,1334,40],[1602,0,1334,40],[1602,8,1334,29,"opts"],[1602,12,1334,40],[1602,83,1334,36],[1602,85,1334,40],[1603,0,1335,2,"assert"],[1603,4,1335,2,"assert"],[1603,10,1335,8],[1603,11,1335,9],[1603,20,1335,8],[1603,22,1335,20,"node"],[1603,26,1335,8],[1603,28,1335,26,"opts"],[1603,32,1335,8],[1603,33,1335,2],[1604,0,1336,1],[1606,0,1338,0],[1606,11,1338,9,"assertTSTypeElement"],[1606,30,1338,0],[1606,31,1338,29,"node"],[1606,35,1338,0],[1606,37,1338,46],[1607,0,1338,46],[1607,8,1338,35,"opts"],[1607,12,1338,46],[1607,83,1338,42],[1607,85,1338,46],[1608,0,1339,2,"assert"],[1608,4,1339,2,"assert"],[1608,10,1339,8],[1608,11,1339,9],[1608,26,1339,8],[1608,28,1339,26,"node"],[1608,32,1339,8],[1608,34,1339,32,"opts"],[1608,38,1339,8],[1608,39,1339,2],[1609,0,1340,1],[1611,0,1342,0],[1611,11,1342,9,"assertTSType"],[1611,23,1342,0],[1611,24,1342,22,"node"],[1611,28,1342,0],[1611,30,1342,39],[1612,0,1342,39],[1612,8,1342,28,"opts"],[1612,12,1342,39],[1612,83,1342,35],[1612,85,1342,39],[1613,0,1343,2,"assert"],[1613,4,1343,2,"assert"],[1613,10,1343,8],[1613,11,1343,9],[1613,19,1343,8],[1613,21,1343,19,"node"],[1613,25,1343,8],[1613,27,1343,25,"opts"],[1613,31,1343,8],[1613,32,1343,2],[1614,0,1344,1],[1616,0,1346,0],[1616,11,1346,9,"assertNumberLiteral"],[1616,30,1346,0],[1616,31,1346,29,"node"],[1616,35,1346,0],[1616,37,1346,35,"opts"],[1616,41,1346,0],[1616,43,1346,41],[1617,0,1347,2,"console"],[1617,4,1347,2,"console"],[1617,11,1347,9],[1617,12,1347,10,"trace"],[1617,17,1347,2],[1617,18,1347,16],[1617,82,1347,2],[1618,0,1348,2,"assert"],[1618,4,1348,2,"assert"],[1618,10,1348,8],[1618,11,1348,9],[1618,26,1348,8],[1618,28,1348,26,"node"],[1618,32,1348,8],[1618,34,1348,32,"opts"],[1618,38,1348,8],[1618,39,1348,2],[1619,0,1349,1],[1621,0,1351,0],[1621,11,1351,9,"assertRegexLiteral"],[1621,29,1351,0],[1621,30,1351,28,"node"],[1621,34,1351,0],[1621,36,1351,34,"opts"],[1621,40,1351,0],[1621,42,1351,40],[1622,0,1352,2,"console"],[1622,4,1352,2,"console"],[1622,11,1352,9],[1622,12,1352,10,"trace"],[1622,17,1352,2],[1622,18,1352,16],[1622,80,1352,2],[1623,0,1353,2,"assert"],[1623,4,1353,2,"assert"],[1623,10,1353,8],[1623,11,1353,9],[1623,25,1353,8],[1623,27,1353,25,"node"],[1623,31,1353,8],[1623,33,1353,31,"opts"],[1623,37,1353,8],[1623,38,1353,2],[1624,0,1354,1],[1626,0,1356,0],[1626,11,1356,9,"assertRestProperty"],[1626,29,1356,0],[1626,30,1356,28,"node"],[1626,34,1356,0],[1626,36,1356,34,"opts"],[1626,40,1356,0],[1626,42,1356,40],[1627,0,1357,2,"console"],[1627,4,1357,2,"console"],[1627,11,1357,9],[1627,12,1357,10,"trace"],[1627,17,1357,2],[1627,18,1357,16],[1627,78,1357,2],[1628,0,1358,2,"assert"],[1628,4,1358,2,"assert"],[1628,10,1358,8],[1628,11,1358,9],[1628,25,1358,8],[1628,27,1358,25,"node"],[1628,31,1358,8],[1628,33,1358,31,"opts"],[1628,37,1358,8],[1628,38,1358,2],[1629,0,1359,1],[1631,0,1361,0],[1631,11,1361,9,"assertSpreadProperty"],[1631,31,1361,0],[1631,32,1361,30,"node"],[1631,36,1361,0],[1631,38,1361,36,"opts"],[1631,42,1361,0],[1631,44,1361,42],[1632,0,1362,2,"console"],[1632,4,1362,2,"console"],[1632,11,1362,9],[1632,12,1362,10,"trace"],[1632,17,1362,2],[1632,18,1362,16],[1632,82,1362,2],[1633,0,1363,2,"assert"],[1633,4,1363,2,"assert"],[1633,10,1363,8],[1633,11,1363,9],[1633,27,1363,8],[1633,29,1363,27,"node"],[1633,33,1363,8],[1633,35,1363,33,"opts"],[1633,39,1363,8],[1633,40,1363,2],[1634,0,1364,1]]},"type":"js/module"}]}